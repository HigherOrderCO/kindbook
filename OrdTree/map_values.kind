// Maps a function over the values of an OrdTree.
// - K: Key type.
// - V: Input value type.
// - B: Output value type.
// - ord: Ord instance for K.
// - tree: Input tree.
// - f: Function to apply to values.
// = Updated tree with mapped values.
OrdTree/map_values : ∀(K: *) ∀(V: *) ∀(B: *) ∀(ord: (Ord K)) (OrdTree K V) -> (V -> B) -> (OrdTree K B)
| K V B ord tree f =
  (OrdTree/fold K V tree
    (OrdTree K B)
    (OrdTree/empty K B)
    (λkv λacc (OrdTree/insert K B ord acc #Pair{(Pair/get_fst K V kv) (f (Pair/get_snd K V kv))})))

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/map_values U64 U64 U64 (U64/Ord) ordtree (U64/add 1))
  (OrdTree/to_list U64 U64 ordtree) == []

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ordtree = (OrdTree/map_values U64 U64 U64 (U64/Ord) ordtree (U64/add 1))
  (OrdTree/to_list U64 U64 ordtree) == [#Pair{1 11}]

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{2 20})
  let ordtree = (OrdTree/map_values U64 U64 U64 (U64/Ord) ordtree (U64/mul 2))
  (OrdTree/to_list U64 U64 ordtree) ==  [#Pair{1 20} #Pair{2 40}]
