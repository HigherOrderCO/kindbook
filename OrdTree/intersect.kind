// Computes the intersection of two AVL trees.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t1: First AVL tree.
// - t2: Second AVL tree.
// = New AVL tree with key_value pairs present in both trees.
OrdTree/intersect : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) (OrdTree K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t1 t2 = (OrdTree/fold K V t1 (OrdTree K V) (OrdTree/empty K V) (OrdTree/intersect/go K V ord t2))

// Helper function for intersection.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t2: Second AVL tree to check against.
// - kv: Key_value pair to check.
// - acc: Accumulator AVL tree.
// = Updated AVL tree.
OrdTree/intersect/go : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) (OrdTree K V) -> (Pair K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t2 #Pair{k v} acc with (OrdTree/has_key K V ord t2 k)
. | #True  = (OrdTree/insert K V ord acc #Pair{k v})
. | #False = acc
  
#test:
  let ordtree = (OrdTree/empty U64 U64)
 (OrdTree/intersect U64 U64 U64/Ord ordtree ordtree) == #Leaf

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ord_tree = (OrdTree/empty U64 U64)
  let ord_tree = (OrdTree/insert U64 U64 (U64/Ord) ord_tree #Pair{1 10})
 (OrdTree/intersect U64 U64 U64/Ord ordtree ord_tree) == #Node{#Pair{1 10} #Zero #Leaf #Leaf}

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ord_tree = (OrdTree/empty U64 U64)
  let ord_tree = (OrdTree/insert U64 U64 (U64/Ord) ord_tree #Pair{2 20})
 (OrdTree/intersect U64 U64 U64/Ord ord_tree ordtree) == #Leaf
