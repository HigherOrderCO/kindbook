// Computes the intersection of two AVL trees.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t1: First AVL tree.
// - t2: Second AVL tree.
// = New AVL tree with key-value pairs present in both trees.
OrdTree/intersect : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) (OrdTree K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t1 t2 = (OrdTree/fold K V (OrdTree K V) t1 (OrdTree/empty K V) (OrdTree/intersect/go K V ord t2))

// Helper function for intersection.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t2: Second AVL tree to check against.
// - kv: Key-value pair to check.
// - acc: Accumulator AVL tree.
// = Updated AVL tree.
OrdTree/intersect/go : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) (OrdTree K V) -> (Pair K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t2 #Pair{k v} acc with (OrdTree/has-key K V ord k t2)
. | #True  = (OrdTree/insert K V ord #Pair{k v} acc)
. | #False = acc
  

#test: (OrdTree/intersect U64 U64 U64/Ord (OrdTree/empty U64 U64) (OrdTree/empty U64 U64)) == (OrdTree/empty U64 U64)
#test: (OrdTree/intersect U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64)) (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64))) == (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64))
#test: (OrdTree/intersect U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64)) (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/empty U64 U64))) == (OrdTree/empty U64 U64)