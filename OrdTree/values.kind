// Extracts all values from an AVL tree.
// - K: The type of keys in the tree.
// - V: The type of values in the tree.
// - tree: The AVL tree to extract values from.
// = A list containing all values from the tree in inorder traversal.
OrdTree/values : ∀(K: *) ∀(V: *) (OrdTree K V) -> (List V)
| K V #Leaf                                      = #Nil
| K V #Node{#Pair{key value} balance left right} =
  let left_values  = (OrdTree/values K V left)
  let right_values = (OrdTree/values K V right)
  (List/append V left_values #Cons{value right_values})

#test:
  let ordtree = (OrdTree/empty U64 U64)
  (OrdTree/values U64 U64 ordtree) == []

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  (OrdTree/values U64 U64 ordtree) == [10]

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{3 30})
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{2 20})
  (OrdTree/values U64 U64 ordtree) == [10 20 30]
