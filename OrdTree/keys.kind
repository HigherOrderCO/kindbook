// Extracts all keys from an AVL tree in inorder traversal.
// - K: Key type.
// - V: Value type.
// - tree: Input tree.
// = List of all keys.
OrdTree/keys : ∀(K: *) ∀(V: *) (OrdTree K V) -> (List K)
| K V #Leaf                                      = #Nil
| K V #Node{#Pair{key value} balance left right} =
  let left_keys  = (OrdTree/keys K V left)
  let right_keys = (OrdTree/keys K V right)
  (List/append K left_keys #Cons{key right_keys})

#test:
  let ordtree = (OrdTree/empty U64 String)
  (OrdTree/keys U64 String ordtree) == []

#test:
  let ordtree = (OrdTree/empty U64 String)
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree #Pair{1 "one"})
  (OrdTree/keys U64 String ordtree) ==  [1]

#test:
  let ordtree = (OrdTree/empty U64 String)
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree #Pair{1 "one"})
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree# Pair{2 "two"})
  (OrdTree/keys U64 String ordtree) == [1 2]

#test:
  let ordtree = (OrdTree/empty U64 String)
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree #Pair{1 "one"})
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree #Pair{2 "two"})
  let ordtree = (OrdTree/insert U64 String (U64/Ord) ordtree #Pair{3 "three"})
  (OrdTree/keys U64 String ordtree) == [1 2 3]
