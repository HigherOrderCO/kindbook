// Inverts an OrdTree, swapping keys and values.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for V.
// - tree: The tree to invert.
// = The inverted tree.
OrdTree/invert : ∀(K: *) ∀(V: *) (Ord V) -> (OrdTree K V) -> (OrdTree V K)
| K V ord tree = (OrdTree/fold K V (OrdTree V K) (OrdTree/invert/go V K ord) (OrdTree/empty V K) tree)

// Helper function for OrdTree/invert.
// - V: New key type (old value type).
// - K: New value type (old key type).
// - ord: Ord instance for V.
// - kv: Key-value pair to insert.
// - acc: Accumulator tree.
// = Updated accumulator tree.
OrdTree/invert/go : ∀(V: *) ∀(K: *) (Ord V) -> (Pair K V) -> (OrdTree V K) -> (OrdTree V K)
| V K ord #Pair{k v} acc = (OrdTree/insert V K ord #Pair{v k} acc)

#test: (OrdTree/invert U64 U64 U64/Ord (OrdTree/empty U64 U64)) == (OrdTree/empty U64 U64)
#test: (OrdTree/invert U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{1 2} (OrdTree/empty U64 U64))) == (OrdTree/insert U64 U64 U64/Ord #Pair{2 1} (OrdTree/empty U64 U64))