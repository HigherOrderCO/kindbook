// Checks if an AVL tree is balanced.
// - K: Key type.
// - V: Value type.
// - tree: The AVL tree to check.
// = True if the tree is balanced, False otherwise.
OrdTree/is-balanced : ∀(K: *) ∀(V: *) (OrdTree K V) -> Bool
| K V tree with (OrdTree/is-balanced-go K V tree)
. | #None = #False
. | _     = #True

// Helper function for is-balanced.
// - K: Key type.
// - V: Value type.
// - tree: The AVL tree to check.
// = Some Nat if balanced, None otherwise.
OrdTree/is-balanced-go : ∀(K: *) ∀(V: *) (OrdTree K V) -> (Maybe Nat)
| K V #Leaf = #Some{#Zero}
| K V #Node{key-value balance left right} with (OrdTree/is-balanced-go K V left)
. | #None = #None
. | #Some{h-left} with (OrdTree/is-balanced-go K V right)
.. | #None = #None
.. | #Some{h-right} with balance
... | #MinusOne = if (Nat/eq h-left #Succ{h-right}) {#Some{#Succ{h-left}}} else {#None}
... | #Zero     = if (Nat/eq h-left h-right) {#Some{#Succ{h-left}}} else {#None}
... | #PlusOne  = if (Nat/eq h-right #Succ{h-left}) {#Some{#Succ{h-right}}} else {#None}


#test: (OrdTree/is-balanced Nat Nat (OrdTree/empty Nat Nat)) == #True
#test: (OrdTree/is-balanced Nat Nat #Node{key-value: #Pair{#0 #0} balance: #Zero left: #Leaf right: #Leaf}) == #True
#test: (OrdTree/is-balanced Nat Nat #Node{key-value: #Pair{#0 #0} balance: #PlusOne left: #Leaf right: #Node{key-value: #Pair{#1 #1} balance: #Zero left: #Leaf right: #Leaf}}) == #True
#test: (OrdTree/is-balanced Nat Nat #Node{key-value: #Pair{#0 #0} balance: #MinusOne left: #Node{key-value: #Pair{#1 #1} balance: #Zero left: #Leaf right: #Leaf} right: #Leaf}) == #True
#test: (OrdTree/is-balanced Nat Nat #Node{key-value: #Pair{#0 #0} balance: #PlusOne left: #Leaf right: #Node{key-value: #Pair{#1 #1} balance: #PlusOne left: #Leaf right: #Node{key-value: #Pair{#2 #2} balance: #Zero left: #Leaf right: #Leaf}}}) == #False