// Filters an AVL tree based on a predicate.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - tree: Input AVL tree.
// - pred: Predicate function for keys.
// = Filtered AVL tree.
OrdTree/filter : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) (OrdTree K V) -> (K -> Bool) -> (OrdTree K V)
| K V ord tree pred=
  use f = λkv λacc
    if (pred (Pair/get_fst K V kv)) {
      (OrdTree/insert K V ord acc kv)
    } else {
      acc
    }
  (OrdTree/fold K V tree (OrdTree K V) (OrdTree/empty K V) f)

#test: 
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{1 10})
  let ordtree = (OrdTree/filter U64 U64 U64/Ord ordtree (λx (U64/to_bool (== x 0))))
  (OrdTree/to_list U64 U64 ordtree) == []

#test: 
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{1 10})
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{2 20})
  let ordtree = (OrdTree/filter U64 U64 U64/Ord ordtree (λx (U64/to_bool (== x 2))))
  (OrdTree/to_list U64 U64 ordtree) == [#Pair{2 20}]

#test: 
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{2 20})
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{1 10})
  let ordtree = (OrdTree/insert U64 U64 U64/Ord ordtree #Pair{3 30})
  let ordtree = (OrdTree/filter U64 U64 U64/Ord ordtree (λx (U64/to_bool (> x 1))))
  (OrdTree/to_list U64 U64 ordtree) == [#Pair{2 20} #Pair{3 30}]
