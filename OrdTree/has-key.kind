// Checks if a key exists in the tree.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - key: Key to search.
// - tree: The AVL tree.
// = True if key exists, False otherwise.
OrdTree/has-key : ∀(K: *) ∀(V: *) ∀(ord: (Ord K)) K -> (OrdTree K V) -> Bool
| K V ord key #Leaf = #False
| K V ord key #Node{#Pair{curr-key curr-val} balance left right} =
  match (Ord/compare K ord key curr-key) {
    #LT: (OrdTree/has-key K V ord key left)
    #EQ: #True
    #GT: (OrdTree/has-key K V ord key right)
  }

#test: (OrdTree/has-key U64 U64 U64/Ord 5 #Leaf) == #False
#test: (OrdTree/has-key U64 U64 U64/Ord 5 #Node{#Pair{5 10} #Zero #Leaf #Leaf}) == #True
#test: (OrdTree/has-key U64 U64 U64/Ord 3 #Node{#Pair{5 10} #Zero #Leaf #Leaf}) == #False
#test: (OrdTree/has-key U64 U64 U64/Ord 7 #Node{#Pair{5 10} #Zero #Leaf #Node{#Pair{7 14} #Zero #Leaf #Leaf}}) == #True