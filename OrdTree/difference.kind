// Computes the difference between two AVL trees.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t1: First AVL tree.
// - t2: Second AVL tree.
// = The difference of t1 and t2.
OrdTree/difference : ∀(K: *) ∀(V: *)  ∀(ord: (Ord K)) (OrdTree K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t1 t2 = (OrdTree/fold K V t1 (OrdTree K V) (OrdTree/empty K V) (OrdTree/difference/go K V ord t2))

// Helper function for difference operation.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - exclude: Tree to exclude keys from.
// - kv: Key-value pair to potentially add.
// - acc: Accumulator tree.
// = Updated accumulator tree.
OrdTree/difference/go : ∀(K: *) ∀(V: *)  ∀(ord: (Ord K)) (OrdTree K V) -> (Pair K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord exclude kv acc =
  let key = (Pair/get-fst K V kv)
  if (OrdTree/has-key K V ord key exclude) {
    acc
  } else {
    (OrdTree/insert K V ord kv acc)
  }

#test: (OrdTree/difference U64 U64 U64/Ord (OrdTree/empty U64 U64) (OrdTree/empty U64 U64)) == (OrdTree/empty U64 U64)
#test: (OrdTree/difference U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64)) (OrdTree/empty U64 U64)) == (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64))
#test: (OrdTree/difference U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64)) (OrdTree/insert U64 U64 U64/Ord #Pair{1 20} (OrdTree/empty U64 U64))) == (OrdTree/empty U64 U64)
#test: (OrdTree/difference U64 U64 U64/Ord (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64))) (OrdTree/insert U64 U64 U64/Ord #Pair{1 10} (OrdTree/empty U64 U64))) == (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/empty U64 U64))