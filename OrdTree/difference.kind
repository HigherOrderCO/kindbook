// Computes the difference between two AVL trees.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - t1: First AVL tree.
// - t2: Second AVL tree.
// = The difference of t1 and t2.
OrdTree/difference : ∀(K: *) ∀(V: *)  ∀(ord: (Ord K)) (OrdTree K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord t1 t2 = (OrdTree/fold K V t1 (OrdTree K V) (OrdTree/empty K V) (OrdTree/difference/go K V ord t2))

// Helper function for difference operation.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - exclude: Tree to exclude keys from.
// - kv: Key_value pair to potentially add.
// - acc: Accumulator tree.
// = Updated accumulator tree.
OrdTree/difference/go : ∀(K: *) ∀(V: *)  ∀(ord: (Ord K)) (OrdTree K V) -> (Pair K V) -> (OrdTree K V) -> (OrdTree K V)
| K V ord exclude kv acc =
  let key = (Pair/get_fst K V kv)
  if (OrdTree/has_key K V ord exclude key) {
    acc
  } else {
    (OrdTree/insert K V ord acc kv)
  }

#test:
  let ordtree = (OrdTree/empty U64 U64)
  (OrdTree/difference U64 U64 U64/Ord ordtree ordtree) == #Leaf

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ord_tree = (OrdTree/empty U64 U64)
  (OrdTree/difference U64 U64 U64/Ord ordtree ord_tree) == #Node{#Pair{1 10} #Zero #Leaf #Leaf}

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ord_tree = (OrdTree/empty U64 U64)
  let ord_tree = (OrdTree/insert U64 U64 (U64/Ord) ord_tree #Pair{1 10})
  (OrdTree/difference U64 U64 U64/Ord ordtree ord_tree) == #Leaf

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{1 10})
  let ord_tree = (OrdTree/empty U64 U64)
  let ord_tree = (OrdTree/insert U64 U64 (U64/Ord) ord_tree #Pair{1 10})
  let ord_tree = (OrdTree/insert U64 U64 (U64/Ord) ord_tree #Pair{2 20})
  (OrdTree/difference U64 U64 U64/Ord ord_tree ordtree) == #Node{#Pair{2 20} #Zero #Leaf #Leaf}
