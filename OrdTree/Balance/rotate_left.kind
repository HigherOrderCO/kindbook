// Left rotation on an AVL tree to fix +2 imbalance.
// - K: Key type.
// - V: Value type.
// - tree: AVL tree to rotate.
// = Rotated AVL tree and height change indicator.
OrdTree/Balance/rotate_left : ∀(K: *) ∀(V: *) (OrdTree K V) -> (Pair (OrdTree K V) Bool)
| K V #Leaf                                         = #Pair{#Leaf #False}
| K V #Node{v1 #PlusOne l #Node{v2 #PlusOne rl rr}} =
  #Pair{#Node{v2 #Zero #Node{v1 #Zero l rl} rr} #False}
| K V #Node{v1 #PlusOne l #Node{v2 #Zero rl rr}}    =
  #Pair{#Node{v2 #MinusOne #Node{v1 #PlusOne l rl} rr} #True}
| K V #Node{v1 #PlusOne l #Node{v2 #MinusOne #Node{v3 balance rll rlr} rr}} with balance 
. | #PlusOne  =
  #Pair{#Node{v3 #Zero #Node{v1 #MinusOne l rll} #Node{v2 #Zero rlr rr}} #False}
. | #Zero     = 
  #Pair{#Node{v3 #Zero #Node{v1 #Zero l rll} #Node{v2 #Zero rlr rr}} #False}
. | #MinusOne = 
  #Pair{#Node{v3 #Zero #Node{v1 #Zero l rll} #Node{v2 #PlusOne rlr rr}} #False}
| K V tree                                          = #Pair{tree #False}

#test: (OrdTree/Balance/rotate_left U64 U64 #Leaf) == #Pair{#Leaf #False}
#test: (OrdTree/Balance/rotate_left U64 U64 #Node{#Pair{1 1} #PlusOne #Leaf #Node{#Pair{2 2} #PlusOne #Leaf #Leaf}}) == #Pair{#Node{#Pair{2 2} #Zero #Node{#Pair{1 1} #Zero #Leaf #Leaf} #Leaf} #False}
#test: (OrdTree/Balance/rotate_left U64 U64 #Node{#Pair{1 1} #PlusOne #Leaf #Node{#Pair{2 2} #Zero #Leaf #Leaf}}) == #Pair{#Node{#Pair{2 2} #MinusOne #Node{#Pair{1 1} #PlusOne #Leaf #Leaf} #Leaf} #True}
