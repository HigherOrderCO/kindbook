// Deletes a key from an AVL tree, maintaining balance.
// - K: Key type.
// - V: Value type.
// - ord: Ord instance for K.
// - k: Key to delete.
// - tree: Input AVL tree.
// = Pair of new OrdTree and height decrease flag.
OrdTree/Delete/delete-go : ∀(K: *) ∀(V: *) (Ord K) -> K -> (OrdTree K V) -> (Pair (OrdTree K V) Bool)
| K V ord k #Leaf = #Pair{#Leaf #False}
| K V ord k #Node{curr balance left right} 
  with (Ord/compare K ord k (Pair/get-fst K V curr))
. | #EQ with left
.. | #Leaf = #Pair{right #True}
.. | _     with (OrdTree/Delete/delete-maximum K V left)
... | #Pair{#None #Pair{other is-smaller}} = 
        #Pair{#Node{curr balance left right} #False}
... | #Pair{#Some{got} #Pair{other is-smaller}} with is-smaller
.... | #True with balance
..... | #MinusOne = #Pair{#Node{got #Zero other right} #True}
..... | #Zero     = #Pair{#Node{got #PlusOne other right} #False}
..... | #PlusOne  = 
          (OrdTree/Balance/rotate-left K V #Node{got #PlusOne other right})
.... | #False = #Pair{#Node{got balance other right} #False}
. | #LT with (OrdTree/Delete/delete-go K V ord k left)
.. | #Pair{other is-smaller} with is-smaller
... | #True with balance
.... | #Zero     = #Pair{#Node{curr #PlusOne other right} #False}
.... | #PlusOne  = 
        (OrdTree/Balance/rotate-left K V #Node{curr #PlusOne other right})
.... | #MinusOne = #Pair{#Node{curr #Zero other right} #True}
... | #False = #Pair{#Node{curr balance other right} #False}
. | #GT with (OrdTree/Delete/delete-go K V ord k right)
.. | #Pair{other is-smaller} with is-smaller
... | #True with balance
.... | #PlusOne  = #Pair{#Node{curr #Zero left other} #True}
.... | #Zero     = #Pair{#Node{curr #MinusOne left other} #False}
.... | #MinusOne = 
        (OrdTree/Balance/rotate-right K V #Node{curr #MinusOne left other})
... | #False = #Pair{#Node{curr balance left other} #False}

#test: (Pair/get-fst (OrdTree U64 U64) Bool (OrdTree/Delete/delete-go U64 U64 U64/Ord 1 (OrdTree/empty U64 U64))) == (OrdTree/empty U64 U64)
#test: (Pair/get-fst (OrdTree U64 U64) Bool (OrdTree/Delete/delete-go U64 U64 U64/Ord 2 (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/empty U64 U64)))) == (OrdTree/empty U64 U64)
#test: (Pair/get-fst (OrdTree U64 U64) Bool (OrdTree/Delete/delete-go U64 U64 U64/Ord 1 (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/empty U64 U64)))) == (OrdTree/insert U64 U64 U64/Ord #Pair{2 20} (OrdTree/empty U64 U64))
