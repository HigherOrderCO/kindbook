// Gets minimum key_value pair from an AVL tree.
// - K: Key type.
// - V: Value type.
// - tree: The AVL tree.
// = Some (key, value) if non_empty, None otherwise.
OrdTree/minimum : ∀(K: *) ∀(V: *) (OrdTree K V) -> (Maybe (Pair K V))
| K V #Leaf                                = #None
| K V #Node{key_value balance #Leaf right} = #Some{key_value}
| K V #Node{key_value balance left right}  = (OrdTree/minimum K V left)

#test:
  let ordtree = (OrdTree/empty U64 U64)
  (OrdTree/minimum U64 U64 ordtree) == #None

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{5 10})
  (OrdTree/minimum U64 U64 ordtree) == #Some{#Pair{5 10}}

#test:
  let ordtree = (OrdTree/empty U64 U64)
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{5 10})
  let ordtree = (OrdTree/insert U64 U64 (U64/Ord) ordtree #Pair{3 6})
  (OrdTree/minimum U64 U64 ordtree) == #Some{#Pair{3 6}}
