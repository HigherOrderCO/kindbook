// Dependent eliminator for lists.
// - A: The type of elements in the list.
// - P: The motive (type family) for the elimination.
// - nil: The result for the empty list case.
// - cons: The function to apply for the cons case.
// - xs: The list to eliminate (scrutinee).
// = The result of the elimination, whose type depends on the input list.
List/match
: ∀(A: *)
  ∀(P: ∀(xs: (List/List A)) *)
  ∀(nil: (P #Nil{}))
  ∀(cons: ∀(x: A) ∀(xs: (List/List A)) (P (#Cons{x xs})))
  ∀(xs: (List/List A))
  (P xs)
= λA λP λnil λcons λ{
  #Nil: nil
  #Cons: λxs.head λxs.tail (cons xs.head xs.tail)
}
