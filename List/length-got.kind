// Computes list length while preserving it.
// - A: Input type.
// - xs: Input list.
// = Pair of original list and its length.
List/length-got : âˆ€(A: *) (List A) -> (Pair (List A) Nat)
| A #Nil             = #Pair{#Nil #Zero}
| A #Cons{head tail} =
  let #Pair{rest len} = (List/length-got A tail)
  #Pair{#Cons{head rest} #Succ{len}}

#test: (List/length-got Nat []) == #Pair{[] #0}
#test: (List/length-got Nat [#0]) == #Pair{[#0] #1}
#test: (List/length-got Nat [#0 #1 #2]) == #Pair{[#0 #1 #2] #3}
