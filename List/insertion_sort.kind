// Sorts a list in ascending order using insertion sort.
// - A: Element type.
// - xs: Input list to be sorted.
// - leq: Less_than_or_equal comparison function.
// = New list containing all elements from xs in ascending order.
List/insertion_sort : âˆ€(A: *) (List A) -> (A -> A -> Bool) -> (List A)
| A #Nil             leq = #Nil
| A #Cons{head tail} leq = 
  let sorted_tail = (List/insertion_sort A tail leq)
  (List/insert_at_sorted A sorted_tail head leq)

#test: (List/insertion_sort Nat [#3 #1 #4 #1 #5] Nat/lte) == [#1 #1 #3 #4 #5]
#test: (List/insertion_sort Nat [] Nat/lte) == []
#test: (List/insertion_sort Nat [#2 #1] Nat/lte) == [#1 #2]
#test: (List/insertion_sort Nat [#1] Nat/lte) == [#1]
