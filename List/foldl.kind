// Left-folds a list.
// - A: Accumulator type.
// - B: Element type.
// - xs: Input list.
// - z: Initial value.
// - f: Combining function.
// = Folded result.
List/foldl : ∀(A: *) ∀(B: *) (List B) -> A -> (A -> B -> A) -> A
| A B #Nil             z f = z
| A B #Cons{head tail} z f = (List/foldl A B tail (f z head) f)

#test: (List/foldl U64 U64 [1 2 3] 0 (λacc λx (+ acc x))) == 6
#test: (List/foldl (List U64) U64 [1 2 3] [] (λacc λx #Cons{x acc})) == [3 2 1]
