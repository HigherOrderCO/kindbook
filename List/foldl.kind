// Left-folds a list.
// - A: Accumulator type.
// - B: Element type.
// - f: Combining function.
// - z: Initial value.
// - xs: Input list.
// = Folded result.
List/foldl : ∀(A: *) ∀(B: *) (A -> B -> A) -> A -> (List B) -> A
| A B f z #Nil             = z
| A B f z #Cons{head tail} = (List/foldl A B f (f z head) tail)

#test: (List/foldl U32 U32 (λacc λx (+ acc x)) 0 [1 2 3]) == 6
#test: (List/foldl (List U32) U32 (λacc λx #Cons{x acc}) [] [1 2 3]) == [3 2 1]
