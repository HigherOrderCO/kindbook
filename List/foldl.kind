// Left_folds a list.
// - A: Element type.
// - xs: Input list.
// - B: Accumulator type.
// - nil: Initial value.
// - cons: Combining function.
// = Folded result.
List/foldl : ∀(A: *) (List A) -> ∀(B: *) B -> (B -> A -> B) -> B
| A #Nil             B nil cons = nil
| A #Cons{head tail} B nil cons = (List/foldl A tail B (cons nil head) cons)

#test: (List/foldl U64 [1 2 3] U64 0 (λacc λx (+ acc x))) == 6
#test: (List/foldl U64 [1 2 3] (List U64) [] (λacc λx #Cons{x acc})) == [3 2 1]
