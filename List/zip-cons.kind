// Prepends elements of one list to corresponding lists in another.
// - A: Element type.
// - xs: List to prepend from.
// - yss: List of lists to prepend to.
// = New list of lists with xs elements prepended.
List/zip-cons : ∀(A: *) (List A) -> (List (List A)) -> (List (List A))
| A #Nil             yss                      = yss
| A xs               #Nil                     = (List/map A (List A) xs (λx #Cons{x #Nil}))
| A #Cons{head tail} #Cons{yss.head yss.tail} = #Cons{#Cons{head yss.head} (List/zip-cons A tail yss.tail)}

#test: (List/zip-cons U64 [1 2 3] [[4 5] [6 7] [8 9]]) == [[1 4 5] [2 6 7] [3 8 9]]
#test: (List/zip-cons U64 [1 2] [[3 4] [5 6] [7 8]]) == [[1 3 4] [2 5 6] [7 8]]
#test: (List/zip-cons U64 [1 2 3] []) == [[1] [2] [3]]
#test: (List/zip-cons U64 [] [[1 2] [3 4]]) == [[1 2] [3 4]]
