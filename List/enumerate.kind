// Enumerates a list, pairing each element with its index.
// - A: Element type.
// - xs: Input list.
// = List of (index, element) pairs.
List/enumerate : ∀(A: *) (List A) -> (List (Pair Nat A))
= λA λxs (List/enumerate/go A #Zero xs)

// Recursive helper for enumerate.
List/enumerate/go : ∀(A: *) Nat -> (List A) -> (List (Pair Nat A))
| A n #Nil        = #Nil
| A n #Cons{x xs} = #Cons{#Pair{n x} (List/enumerate/go A (#Succ{n}) xs)}

#test: (List/enumerate (List U32) ["0" "1"]) == [#Pair{#0 "0"} #Pair{#1 "1"}]
