// Enumerates a list, pairing each element with its index.
// - A: Element type.
// - xs: Input list.
// = List of (index, element) pairs.
List/enumerate : ∀(A: *) (List A) -> (List (Pair Nat A))
= λA λxs (List/enumerate/go A xs #Zero)

// Recursive helper for enumerate.
List/enumerate/go : ∀(A: *)(List A) -> Nat -> (List (Pair Nat A))
| A #Nil             n = #Nil
| A #Cons{head tail} n = #Cons{#Pair{n head} (List/enumerate/go A tail (#Succ{n}))}

#test: (List/enumerate String ["0" "1"]) == [#Pair{#0 "0"} #Pair{#1 "1"}]
