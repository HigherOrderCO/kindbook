// Helper function for enumerate
// Recursively builds the enumerated list starting from a given index
List/enumerate-go
: ∀(A: *)
  ∀(n: Nat)
  ∀(xs: (List A))
  (List (Pair/Pair Nat A))
= λA λn λ{
  #Nil: #Nil{}
  #Cons: λxs.head λxs.tail
    #Cons{
      #Pair{n xs.head}
      (List/enumerate-go A (#Succ{n}) xs.tail)
    }
}

// Enumerates a list, pairing each element with its index
// - A: The type of elements in the input list
// - xs: The input list
// = A new list where each element is paired with its index
List/enumerate
: ∀(A: *)
  ∀(xs: (List A))
  (List (Pair/Pair Nat A))
= λA λxs (List/enumerate-go A #Zero{} xs)

// Examples and properties of the enumerate function

// Example: enumerate ["0", "1", "2"] ≡ [(0, "0"), (1, "1"), (2, "2")]
List/enumerate/example0
: (Equal
    (List (Pair/Pair Nat (List U32)))
    (List/enumerate (List U32) (#Cons{"0" (#Cons{"1" (#Cons{"2" #Nil{}})})}))
    (#Cons{(Pair/Pair #Zero{} "0") (#Cons{(Pair/Pair #Succ{#Zero{}} "1") (#Cons{(Pair/Pair #Succ{#Succ{#Zero{}}} "2") #Nil{}})})})
)
= #Refl{} 

// ✓ List/enumerate/empty
// ERROR:
// - expected: ?type_annotation
// - detected: ?untyped_match
// - bad_term: λ{ #Cons: ?a #Nil: ?b }
// unknown_file
// Could not read source file.
// ✗ List/enumerate/example0

// Property: enumerate [] ≡ []
List/enumerate/empty
: ∀(A: *)
  (Equal
    (List (Pair/Pair Nat A))
    (List/enumerate A #Nil{})
    #Nil{}
  )
= λA #Refl{}
