// Computes the cartesian product of two lists, applying a function to each pair.
// - A: First input type.
// - B: Second input type.
// - C: Output type.
// - f: Function to apply to each pair.
// - xs: First input list.
// - ys: Second input list.
// = List of results from applying f to all possible pairs.
List/cartesian-product-with
: ∀(A: *) ∀(B: *) ∀(C: *)
  (A -> B -> C) -> (List A) -> (List B) -> (List C)
| A B C f #Nil             ys = []
| A B C f #Cons{head tail} ys =
  (List/append C
    (List/map B C (f head) ys)
    (List/cartesian-product-with A B C f tail ys))

#test: (List/cartesian-product-with U64 U64 U64 (U64/add) [1 2] [3 4]) == [4 5 5 6]
#test: (List/cartesian-product-with U64 U64 U64 (U64/add) [] [1 2 3]) == []
#test: (List/cartesian-product-with U64 U64 U64 (U64/add) [1 2 3] []) == []
#test: (List/cartesian-product-with U64 U64 (Pair U64 U64) (λf λs #Pair{f s}) [1 2] [3 4]) == [#Pair{1 3} #Pair{1 4} #Pair{2 3} #Pair{2 4}]