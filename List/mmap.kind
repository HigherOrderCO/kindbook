// Applies a monadic function to each element of a list.
// - M: Monad type constructor.
// - m: Monad instance for M.
// - A: Input type.
// - B: Output type.
// - f: Function to apply.
// - x: Input list.
// = Monadic list of results.
List/mmap
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  ∀(B: *)
  ∀(f: A -> (M B))
  (List A) -> (M (List B))
| M #Monad{pure bind} A B f #Nil = (pure (List B) #Nil)
| M #Monad{pure bind} A B f #Cons{head tail} =
  (bind B (List B) (f head) λy
  (bind (List B) (List B) (List/mmap M #Monad{pure bind} A B f tail) λys
  (pure (List B) (#Cons{y ys}))))

//#test: (List/mmap Maybe Maybe/Monad U64 U64 (λx (Maybe/Monad/pure U64 x)) [1 2 3]) == #Some{[1 2 3]}
//#test: (List/mmap Maybe Maybe/Monad U64 U64 (λx #None) [1 2 3]) == #None
