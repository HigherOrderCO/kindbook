use List/ as L/

// FIXME: this will be deprecated in favor of L/fold

// Performs a right fold over a list.
// - 1st: The type of elements in the input list.
// - 2nd: The type of the result.
// - 3rd: The combining function.
// - 4th: The initial value (for the empty list case).
// - 5th: The list to fold over.
// = The result of folding the list.
L/foldr : ∀(A: *) ∀(B: *) (A -> B -> B) -> B -> (L/List A) -> B
= λA λB λf λz λ{
  #Nil: z
  #Cons: λxs.head λxs.tail 
		let acc = (L/foldr A B f z xs.tail)
		(f xs.head acc)
	}
