// Right_folds a list.
// - A: Input type.
// - xs: Input list.
// - B: Result type.
// - nil: Initial value.
// - cons: Combining function.
// = Folded result.
List/foldr : ∀(A: *) (List A) -> ∀(B: *) B -> (A -> B -> B) -> B
| A #Nil             B nil cons = nil
| A #Cons{head tail} B nil cons = (cons head (List/foldr A tail B nil cons))

#test: (List/foldr U64 [1 2 3] U64 0 (λx λacc (+ x acc))) == 6
#test: (List/foldr U64 [1 2 3] (List U64) [] (λx λacc #Cons{x acc})) == [1 2 3]
#test: (List/foldr U64 [1 2 3] (List U64) [] (λx λacc #Cons{x acc})) == (List/fold U64 [1 2 3] (List U64) [] (λx λacc #Cons{x acc}))
