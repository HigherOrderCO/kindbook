// Sorts a list in ascending order.
// - A: Element type.
// - xs: Input list to be sorted.
// - leq: Less_than_or_equal comparison function.
// = New list containing all elements from xs in ascending order.
List/sort : âˆ€(A: *) (List A) -> (A -> A -> Bool) -> (List A)
| A xs leq = (List/insertion_sort A xs leq)

// TODO: Use a better sorting algorithm like merge sort or quicksort

#test: (List/sort Nat [#3 #1 #4 #1 #5] Nat/lte) == [#1 #1 #3 #4 #5]
#test: (List/sort Nat [] Nat/lte) == []
#test: (List/sort Nat [#2 #1] Nat/lte) == [#1 #2]
#test: (List/sort Nat [#1] Nat/lte) == [#1]
