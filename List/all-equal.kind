// Checks if all elements in a list are equal.
// - A: The type of elements in the list.
// - e: An equality function for type A.
// - xs: The input list.
// = True if all elements are equal, False otherwise.
List/all-equal
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(xs: (List/List A))
  Bool/Bool
= λA λe λ{
  #Nil: #True{}
  #Cons: λxs.head λxs.tail
    (List/all-equal/aux A e xs.head xs.tail)
}

// Auxiliary function to handle the recursive case
List/all-equal/aux
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(x: A)
  ∀(xs: (List/List A))
  Bool/Bool
= λA λe λx λ{
  #Nil: #True{}
  #Cons: λxs.head λxs.tail
    (Bool/and
      (Trait/Eq/eq A e x xs.head)
      (List/all-equal/aux A e xs.head xs.tail))
}
