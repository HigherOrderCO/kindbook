// Compares two lists lexicographically.
// - A: The type of elements in the lists.
// - ord: The Ord instance for type A.
// - xs: The first list.
// - ys: The second list.
// = LT if xs < ys, EQ if xs = ys, GT if xs > ys.
List/compare
: ∀(A: *)
  ∀(ord: (Trait/Ord A))
  ∀(xs: (List/List A))
  ∀(ys: (List/List A))
  Ordering/Ordering
= λA λord λ{
  #Nil: λ{
    #Nil: #EQ{}
    #Cons: λys.head λys.tail #LT{}
  }
  #Cons: λxs.head λxs.tail λ{
    #Nil: #GT{}
    #Cons: λys.head λys.tail
      let head_cmp = (Trait/Ord/compare A ord xs.head ys.head)
      (Ordering/match
        Ordering/Ordering
        #LT{}
        (List/compare A ord xs.tail ys.tail)
        #GT{}
        head_cmp)
  }
}
