// Concatenates all Some values in a list of Maybe.
// - A: Element type.
// - xs: Input list of Maybe values.
// = New list containing all Some values.
List/concat-maybes : ∀(A: *) (List (Maybe A)) -> (List A)
| A xs = (List/foldr (Maybe A) xs (List A) #Nil (List/concat-maybes/go A))

// Helper function for concat-maybes
List/concat-maybes/go : ∀(A: *) (Maybe A) -> (List A) -> (List A)
| A #None        acc = acc
| A #Some{value} acc = #Cons{value acc}

#test: (List/concat-maybes U64 [#Some{1} #None #Some{2} #Some{3}]) == [1 2 3]
#test: (List/concat-maybes U64 [#None #None]) == []
#test: (List/concat-maybes U64 []) == []
