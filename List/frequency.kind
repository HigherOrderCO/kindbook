// Counts the frequency of elements in a list.
// - A: Input type.
// - ord: Ord instance for A.
// - xs: Input list.
// = OrdTree mapping elements to their frequencies.
List/frequency : ∀(A: *) ∀(ord: (Ord A)) (List A) -> (OrdTree A Nat)
| A ord xs = (List/foldr _ xs _ #Leaf (count_element A ord))

// Counts an element in the frequency tree.
// - A: Element type.
// - ord: Ord instance for A.
// - x: Element to count.
// - tree: Current frequency tree.
// = Updated frequency tree.
count_element : ∀(A: *) ∀(ord: (Ord A)) A -> (OrdTree A Nat) -> (OrdTree A Nat)
| A ord x tree with (OrdTree/get_pair _ _ ord tree x)
. | #Some{#Pair{k v}} = (OrdTree/insert _ _ ord tree #Pair{k #Succ{v}})
. | #None             = (OrdTree/insert _ _ ord tree #Pair{x #1})

#test: (List/frequency U64 U64/Ord [])            == (OrdTree/empty _ _)
#test: (List/frequency U64 U64/Ord [1])           == (OrdTree/insert _ _ U64/Ord (OrdTree/empty _ _) #Pair{1 #1})
#test: (List/frequency U64 U64/Ord [1 2 1 3 2 1]) == (OrdTree/insert _ _ U64/Ord (OrdTree/insert _ _ U64/Ord (OrdTree/insert _ _ U64/Ord (OrdTree/empty _ _) #Pair{1 #3}) #Pair{2 #2}) #Pair{3 #1})
