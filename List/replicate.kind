// Replicates a value n times to create a list.
// - A: Element type.
// - x: Value to replicate.
// - n: Replication count.
// = List with n repetitions of x.
List/replicate : âˆ€(A: *) A -> Nat -> (List A)
| A x #Zero    = #Nil
| A x #Succ{n} = #Cons{x (List/replicate A x n)}

#test: (List/replicate Nat #3 #0) == #Nil
#test: (List/replicate Nat #7 #3) == #Cons{#7 #Cons{#7 #Cons{#7 #Nil}}}
#test: (List/replicate Bool #True #2) == #Cons{#True #Cons{#True #Nil}}
#test: (List/length Nat (List/replicate Nat #0 #5)) == #5