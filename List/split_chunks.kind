// Splits a list into chunks, separated by elements that satisfy a predicate.
// Each chunk starts with an element that satisfies the predicate, except for the first chunk.
// - A: Element type.
// - xs: Input list.
// - pred: Predicate function.
// = List of list chunks.
List/split_chunks : ∀(A: *) (List A) -> (A -> Bool) -> (List (List A))
| A #Nil pred = []
| A #Cons{head tail} pred with #Pair{(List/split_chunks A tail pred) (pred head)} :: (Pair (List (List A)) Bool)
. | #Pair{#Nil                #False} = #Cons{#Cons{head []} []}
. | #Pair{#Nil                #True}  = #Cons{[] #Cons{#Cons{head []} []}}
. | #Pair{#Cons{chunk chunks} #False} = #Cons{#Cons{head chunk} chunks}
. | #Pair{#Cons{chunk chunks} #True}  = #Cons{[] #Cons{#Cons{head chunk} chunks}}

#test: (List/split_chunks U64 [] (λx (U64/to_bool (== x 0)))) == []
#test: (List/split_chunks U64 [1 2 3] (λx (U64/to_bool (== x 0)))) == [[1 2 3]]
#test: (List/split_chunks U64 [0 1 2 0 3] (λx (U64/to_bool (== x 0)))) == [[] [0 1 2] [0 3]]
#test: (List/split_chunks U64 [1 2 0 3 4 0 5] (λx (U64/to_bool (== x 0)))) == [[1 2] [0 3 4] [0 5]]