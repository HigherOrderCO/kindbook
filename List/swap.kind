// Swaps an element at a given index with a new value.
// - A: Element type.
// - xs: Input list.
// - y: New value.
// - n: Index to swap.
// = Pair of new list and old value (if found).
List/swap : âˆ€(A: *) (List A) -> A -> Nat -> (Pair (List A) (Maybe A))
| A #Nil        y n        = #Pair{#Nil #None}
| A #Cons{x xs} y #Zero    = #Pair{#Cons{y xs} #Some{x}}
| A #Cons{x xs} y #Succ{n} =
  let #Pair{list maybe} = (List/swap A xs y n)
  #Pair{#Cons{x list} maybe}

#test: (List/swap U64 [1 2 3] 42 #0) == #Pair{[42 2 3] #Some{1}}
#test: (List/swap U64 [1 2 3] 42 #1) == #Pair{[1 42 3] #Some{2}}
#test: (List/swap U64 [1 2 3] 42 #2) == #Pair{[1 2 42] #Some{3}}
#test: (List/swap U64 [1 2 3] 42 #3) == #Pair{[1 2 3] #None}
#test: (List/swap U64 [] 42 #0) == #Pair{[] #None}