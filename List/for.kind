// Applies a monadic function to each list element, threading a state.
// - M: Monad type constructor.
// - m: Monad instance.
// - A: Element type.
// - S: State type.
// - x: Input list.
// - s: Initial state.
// - f: Monadic function (state -> element -> M state).
// = Final state after processing all elements.
List/for
: ∀(M: ∀(A: *) *)
  ∀(m: (Trait/Monad M))
  ∀(A: *)
  ∀(S: *)
  ∀(x: (List A))
  ∀(s: S)
  ∀(f: ∀(s: S) ∀(a: A) (M S))
  (M S)
| M m A S #Nil{}           s f = (Trait/Monad/pure M m S s)
| M m A S #Cons{head tail} s f = (Trait/Monad/bind M m S S (f s head) (λx (List/for M m A S tail x f)))
