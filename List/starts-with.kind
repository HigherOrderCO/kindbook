// Checks if one list starts with another list.
// - A: The type of elements in the lists.
// - e: An equality function for type A.
// - prefix: The potential prefix list.
// - xs: The list to check against.
// = True if xs starts with prefix, False otherwise.
List/starts-with
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(prefix: (List A))
  ∀(xs: (List A))
  Bool
= λA λe λprefix λxs
  let #Pair{prefix-list prefix-length}= (List/length-got A prefix)
  let xs-prefix = (List/take A prefix-length xs)
  let xs-length = (List/length A xs-prefix)
  (Bool/and
    (List/eq A e xs-prefix prefix-list)
    (Nat/eq xs-length prefix-length))