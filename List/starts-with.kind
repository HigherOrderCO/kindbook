// Checks if one list starts with another list.
// - A: Element type.
// - e: Equality function for A.
// - prefix: Potential prefix list.
// - xs: List to check against.
// = True if xs starts with prefix, False otherwise.
List/starts-with : ∀(A: *) ∀(e: (IsEqual A)) (List A) -> (List A) -> Bool
| A e prefix xs =
  let #Pair{prefix_list prefix_length} = (List/length-got A prefix)
  let xs_prefix = (List/take A xs prefix_length)
  let xs_length = (List/length A xs_prefix)
  (Bool/and
    (List/eq A e xs_prefix prefix_list)
    (Nat/eq xs_length prefix_length))

#test: (List/starts-with Nat Nat/IsEqual [#1 #2 #3] [#1 #2 #3 #4 #5]) == #True
#test: (List/starts-with Nat Nat/IsEqual [#1 #2 #4] [#1 #2 #3 #4 #5]) == #False
#test: (List/starts-with Nat Nat/IsEqual [] [#1 #2 #3 #4 #5]) == #True
#test: (List/starts-with Nat Nat/IsEqual [#1 #2 #3 #4 #5 #6] [#1 #2 #3 #4 #5]) == #False
