use List/ as L/
use Bool/ as B/
use Nat/ as N/
use Trait/ as T/

// Checks if one list starts with another list.
// - A: The type of elements in the lists.
// - e: An equality function for type A.
// - prefix: The potential prefix list.
// - xs: The list to check against.
// = True if xs starts with prefix, False otherwise.
L/starts-with
: ∀(A: *)
  ∀(e: (T/Eq A))
  ∀(prefix: (L/List A))
  ∀(xs: (L/List A))
  B/Bool
= λA λe λprefix λxs
  let #Pair{prefix-list prefix-length}= (L/length-got A prefix)
  let xs-prefix = (L/take A prefix-length xs)
  let xs-length = (L/length A xs-prefix)
  (B/and
    (L/eq A e xs-prefix prefix-list)
    (N/eq xs-length prefix-length))