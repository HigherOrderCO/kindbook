// Monadic left fold over a list.
// - M: Monad to operate in.
// - m: Monad instance for M.
// - A: Input type.
// - B: Accumulator type.
// - x: Input list.
// - z: Initial value.
// - f: Combining function.
// = Monadic result of folding the list.
List/mfoldl
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  ∀(B: *)
  (List A)
  -> B
  -> (B -> A -> (M B))
  -> (M B)
| M #Monad{pure bind} A B #Nil             z f = (pure B z)
| M #Monad{pure bind} A B #Cons{head tail} z f = (bind B B (f z head) λz1 (List/mfoldl M #Monad{pure bind} A B tail z1 f))
