// Monadic left fold over a list.
// - M: Monad to operate in.
// - m: Monad instance for M.
// - A: Input type.
// - xs: Input list.
// - B: Accumulator type.
// - nil: Initial value.
// - cons: Combining function.
// = Monadic result of folding the list.
List/mfoldl
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  (List A)
  -> ∀(B: *) B
  -> (B -> A -> (M B))
  -> (M B)
| M #Monad{pure bind} A #Nil             B nil cons = (pure B nil)
| M #Monad{pure bind} A #Cons{head tail} B nil cons = (bind B B (cons nil head) λacc (List/mfoldl M #Monad{pure bind} A tail B acc cons))
