// Monadic left fold over a list.
// - M: Monad to operate in.
// - m: Monad instance for M.
// - A: Input type.
// - B: Accumulator type.
// - f: Combining function.
// - z: Initial value.
// - x: Input list.
// = Monadic result of folding the list.
List/mfoldl
: ∀(M: ∀(A: *) *)
  ∀(m: (Trait/Monad M))
  ∀(A: *)
  ∀(B: *)
  ∀(f: ∀(b: B) ∀(a: A) (M B))
  ∀(z: B)
  ∀(x: (List A))
  (M B)
| M m A B f z #Nil             = (Trait/Monad/pure M m B z)
| M m A B f z #Cons{head tail} = (Trait/Monad/bind M m B B (f z head) λz1 (List/mfoldl M m A B f z1 tail))
