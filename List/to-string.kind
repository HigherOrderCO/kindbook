// Converts a list to a string representation.
// - A: Element type.
// - show: Show instance for A.
// - xs: Input list.
// = String representation of the list.
List/to-string : ∀(A: *) ∀(show: (Show A)) (List A) -> String
| A show #Nil             = "[]"
| A show #Cons{head tail} =
  let head_str = (Show/to-string A show head)
  let tail_str = (List/to-string-rest A show tail)
  (String/append "[" (String/append head_str tail_str))

List/to-string-rest : ∀(A: *) ∀(show: (Show A)) (List A) -> String
| A show #Nil             = "]"
| A show #Cons{head tail} =
  let head_str = (Show/to-string A show head)
  let tail_str = (List/to-string-rest A show tail)
  (String/append ", " (String/append head_str tail_str))

#test: (List/to-string Nat Nat/Show #Nil) == "[]"
#test: (List/to-string Nat Nat/Show #Cons{#0 #Nil}) == "[0]"
#test: (List/to-string Nat Nat/Show #Cons{#1 #Cons{#2 #Cons{#3 #Nil}}}) == "[1, 2, 3]"
#test: (List/to-string Bool Bool/Show #Cons{#True #Cons{#False #Nil}}) == "[True, False]"