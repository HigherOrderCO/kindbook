// Filters a list based on a predicate.
// - A: Element type.
// - xs: Input list.
// - fn: Predicate function.
// = New list with elements satisfying the predicate.
List/filter : ∀(A: *) (List A) -> (A -> Bool) -> (List A)
| A #Nil             fn = #Nil
| A #Cons{head tail} fn with (fn head) 
. | #True  = #Cons{head (List/filter A tail fn)}
. | #False = (List/filter A tail fn)

#test: (List/filter U64 [1 2 3 4 5] (λx (U64/to-bool (> x 2)))) == [3 4 5]
#test: (List/filter U64 [1 2 3 2 1] (λx (U64/to-bool (== x 2)))) == [2 2]
