// Filters a list based on a predicate.
// - A: Element type.
// - fn: Predicate function.
// - xs: Input list.
// = New list with elements satisfying the predicate.
List/filter : ∀(A: *) (A -> Bool) -> (List A) -> (List A)
| A fn #Nil             = #Nil
| A fn #Cons{head tail} =
  if (fn head) {
    #Cons{head (List/filter A fn tail)}
  } else {
    (List/filter A fn tail)
  }

#test: (List/filter U64 (λx (U64/to-bool (== x 2))) [1 2 3 2 1]) == [2 2]
#test: (List/filter U64 (λx (U64/to-bool (> x 2))) [1 2 3 4 5]) == [3 4 5]
