// Zips two lists into a list of pairs.
// - A: First type.
// - B: Second type.
// - xs: First list.
// - ys: Second list.
// = List of pairs from corresponding elements.
List/zip : âˆ€(A: *) âˆ€(B: *) (List A) -> (List B) -> (List (Pair A B))
| A B #Nil             ys                = #Nil
| A B #Cons{head tail} #Nil              = #Nil
| A B #Cons{head tail} #Cons{head2 tail2} = #Cons{#Pair{head head2} (List/zip A B tail tail2)}

#test: (List/zip U64 U64 [1 2 3] [4 5 6]) == [#Pair{1 4} #Pair{2 5} #Pair{3 6}]
#test: (List/zip U64 U64 [1 2] [3 4 5]) == [#Pair{1 3} #Pair{2 4}]
#test: (List/zip U64 U64 [1 2 3] [4 5]) == [#Pair{1 4} #Pair{2 5}]
#test: (List/zip U64 U64 [] [1 2 3]) == []
