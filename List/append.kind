// Appends two lists.
// - A: The type of elements in the lists.
// - xs: The first list.
// - ys: The second list.
// = A new list containing all elements from both input lists.
List/append : âˆ€(A: *) (List A) -> (List A) -> (List A)
| A xs ys = (List/append/rev _ (List/reverse _ xs) ys)

// - A: The type of elements in the lists.
// - xs: The first list.
// - ys: The second list.
// = A new list containing all elements from both input lists.
List/append/rev : âˆ€(A: *) (List A) -> (List A) -> (List A)
| A #Nil             ys = ys
| A #Cons{head tail} ys = (List/append/rev A tail #Cons{head ys})

//#test: (List/append U64 [1 2] [3 4]) == [1 2 3 4]
//#test: (List/append U64 [] [1 2 3]) == [1 2 3]
//#test: (List/append U64 [1 2 3] []) == [1 2 3]
