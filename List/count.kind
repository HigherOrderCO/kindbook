// Counts the occurrences of a given element in a list.
// - A: The type of elements in the list.
// - e: An equality function for type A.
// - x: The element to count.
// - xs: The list to search.
// = The number of occurrences of the given element in the list.
List/count
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(x: A)
  ∀(xs: (List/List A))
  Nat/Nat
= λA λe λx λ{
  #Nil: #Zero{}
  #Cons: λxs.head λxs.tail
    let head_count = (Bool/if Nat/Nat (Trait/Eq/eq _ e x xs.head) #Succ{#Zero{}} #Zero{})
    let tail_count = (List/count _ e x xs.tail)
    (Nat/add head_count tail_count)
}
