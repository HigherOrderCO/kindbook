// Counts occurrences of an element in a list.
// - A: Element type.
// - e: Equality function for A.
// - x: Element to count.
// - xs: Input list.
// = Number of occurrences.
List/count : âˆ€(A: *) (Trait/Eq A) -> A -> (List A) -> Nat
| A e x #Nil             = #Zero
| A e x #Cons{head tail} =
  let count_head = (Bool/if Nat (Trait/Eq/eq A e x head) #1 #Zero)
  let count_tail = (List/count A e x tail)
  (Nat/add count_head count_tail)

#test: (List/count Nat (Trait/Eq/derive Nat Nat/eq) #2 [#1 #2 #3 #2 #4 #2]) == #3
#test: (List/count Nat (Trait/Eq/derive Nat Nat/eq) #5 [#1 #2 #3 #2 #4 #2]) == #0
#test: (List/count Nat (Trait/Eq/derive Nat Nat/eq) #1 [#1]) == #1
#test: (List/count Nat (Trait/Eq/derive Nat Nat/eq) #1 []) == #0
