// Takes elements from the front of the list while predicate holds.
// - A: Element type.
// - fn: Predicate function.
// - xs: Input list.
// = Longest prefix of xs satisfying fn.
List/take-while : ∀(A: *) (A -> Bool) -> (List A) -> (List A)
| A fn #Nil             = #Nil
| A fn #Cons{head tail} =
  if (fn head) {
    #Cons{head (List/take-while A fn tail)}
  } else {
    #Nil
  }

#test: (List/take-while U32 (λx (U32/to-bool (< x 3))) [1 2 3 4 5]) == [1 2]
#test: (List/take-while U32 (λx (U32/to-bool (> x 3))) [1 2 3 4 5]) == []
#test: (List/take-while U32 (λx (U32/to-bool (< x 10))) [1 2 3 4 5]) == [1 2 3 4 5]
