// Takes elements from the front of the list while predicate holds.
// - A: Element type.
// - xs: Input list.
// - fn: Predicate function.
// = Longest prefix of xs satisfying fn.
List/take-while : ∀(A: *) (List A) -> (A -> Bool) -> (List A)
| A #Nil             fn = #Nil
| A #Cons{head tail} fn =
  if (fn head) {
    #Cons{head (List/take-while A tail fn)}
  } else {
    #Nil
  }

#test: (List/take-while U64 [1 2 3 4 5] (λx (U64/to-bool (< x 3)))) == [1 2]
#test: (List/take-while U64 [1 2 3 4 5] (λx (U64/to-bool (> x 3)))) == []
#test: (List/take-while U64 [1 2 3 4 5] (λx (U64/to-bool (< x 10)))) == [1 2 3 4 5]
