// Separates a list into initial elements and last element.
// - A: Input type.
// - xs: Input list.
// = Pair of initial elements and last element (Maybe).
List/unsnoc : âˆ€(A: *) (List A) -> (Pair (List A) (Maybe A))
| A #Nil                = #Pair{#Nil (Maybe/none A)}
| A #Cons{x #Nil}       = #Pair{#Nil (Maybe/some A x)}
| A #Cons{x xs}         = 
  let #Pair{list maybe} = (List/unsnoc A xs)
  #Pair{#Cons{x list} maybe}

#test: (List/unsnoc U64 []) == #Pair{[] #None}
#test: (List/unsnoc U64 [1]) == #Pair{[] #Some{1}}
#test: (List/unsnoc U64 [1 2 3]) == #Pair{[1 2] #Some{3}}