
use UG/SIPD as G

insert_skill : (OrdTree String G/Skill) -> String -> G/Skill -> (OrdTree String G/Skill)
| skills key val = (OrdTree/insert String G/Skill String/Ord skills #Pair{key val})

insert_cooldown : (OrdTree String U64) -> String -> U64 -> (OrdTree String U64)
| cooldowns key val = (OrdTree/insert String U64 String/Ord cooldowns #Pair{key val})

TPS : U64
= 50

// time in SECONDS
time_to_tick : U64 -> U64
| time = (U64/mul (U64/mul time TPS) 2)

make_skills : G/State -> U64 -> U64 -> (Pair (OrdTree String G/Skill) G/State)
| #State{next_id tick players hero_states game_map} player_id body_id =
  let s = (OrdTree/empty String G/Skill)
  let s = (insert_skill s "RightClick" (G/Skill/move player_id body_id 0))
  let s = (insert_skill s "E" (G/Skill/teleport player_id body_id (F64/mul G/range_unit 4.0) (time_to_tick 1)))
  let s = (insert_skill s "Z" (G/Skill/wave_of_force player_id 100 (F64/mul 2.0 G/unit_scaling) 160 (time_to_tick 1)))
  let s = (insert_skill s "W" (G/Skill/shoot player_id (F64/mul G/range_unit 19.0) (F64/mul 0.25 G/unit_scaling) 10000 (time_to_tick 1)))
  let s = (insert_skill s "Q" (G/Skill/magic_missiles player_id (F64/mul G/range_unit 12.0) 10000 (F64/mul (F64/mul 0.5 0.475) G/unit_scaling) (time_to_tick 1)))
  let s = (insert_skill s "R" (G/Skill/disintegrate player_id (time_to_tick 3) 10.0 (F64/mul G/range_unit 16.0) 0.1 (time_to_tick 1)))

  let li_ming_health = 1270

  let s_cooldowns = (OrdTree/empty String U64)
  let s_cooldowns = (insert_cooldown s_cooldowns "RightClick" 0)
  let s_cooldowns = (insert_cooldown s_cooldowns "R"          0)
  let s_cooldowns = (insert_cooldown s_cooldowns "E"          0)
  let s_cooldowns = (insert_cooldown s_cooldowns "Z"          0)
  let s_cooldowns = (insert_cooldown s_cooldowns "W"          0)
  let s_cooldowns = (insert_cooldown s_cooldowns "Q"          0)

  let new_hero_states = (Map/insert G/Hero/HeroState hero_states player_id #HeroState{s_cooldowns li_ming_health})

  (s , #State{next_id tick players new_hero_states game_map})

get_body_effects_state : (Maybe G/Body) -> G/State -> G/State
| #Some{body} state = (G/Body/apply_effects body state)
| #None state       = state

apply_skill_if_not_on_cooldown : G/Skill -> U64 -> G/State -> G/State
| skill cooldown state =
  if (U64/eq cooldown 0) {
    (G/Skill/apply skill state) 
  } else {
    state
  }

tick : U64 -> G/State -> G/State
| pid #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} with (Map/get G/Player players pid)
.| #None = 
  #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
.| #Some{#Player{id name keys target #Hero{owner_id name skills hero_body_id}}} with (Map/get G/Hero/HeroState hero_states pid)
..| #None =
  #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
..| #Some{#HeroState{cooldowns health}} =
  let maybe_hero_body = (Map/get G/Body bodies hero_body_id)
  let body_effects_state = (get_body_effects_state maybe_hero_body #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}})
  let skill_keys = (OrdTree/keys String G/Skill skills)
  let state_after_skills = (G/Hero/apply_pressed_skills skill_keys pid skills keys cooldowns body_effects_state)
  let maybe_right_click = (OrdTree/get String G/Skill String/Ord skills "RightClick")

  match maybe_right_click {
    #None: state_after_skills
    #Some{skill} : 
      let cooldown = (OrdTree/get String U64 String/Ord cooldowns "RightClick")
      match cooldown {
        #None: state_after_skills
        #Some{cooldown}: (apply_skill_if_not_on_cooldown skill cooldown state_after_skills)
      }
  }

UG/SIPD/Hero/li_ming : G/State -> U64 -> V2 -> (Pair G/Hero G/State)
| state owner_id pos =
  let name  = "Li-Ming" 
  let collision_radius = 0.625
  let unit_scaling = UG/SIPD/unit_scaling
  let shape = (UG/Shape/circle pos (F64/mul collision_radius unit_scaling))

  let state = (G/State/insert_body state #Body{owner_id shape (tick owner_id) [] #TakesEffects})
  let #Pair{skills state} = (make_skills state owner_id owner_id)
  (#Hero{owner_id name skills owner_id} , state) 

