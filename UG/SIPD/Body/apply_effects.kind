
use UG/SIPD as G

// Applies all effects of a body to the game state.
// - body: The body with effects.
// - state: Current game state.
// = Updated state after applying effects.
UG/SIPD/Body/apply_effects : UG/SIPD/Body -> UG/SIPD/State -> UG/SIPD/State
| #Body{id hitbox tick effects collidable} state = (UG/SIPD/Body/apply_effects/go #Body{id hitbox tick effects collidable} state effects)

// Auxiliary function for apply_effects.
// - body: The body with effects.
// - state: Current game state.
// - effects: List of effects to apply.
// = Updated state after applying effects.
UG/SIPD/Body/apply_effects/go : UG/SIPD/Body -> UG/SIPD/State -> (List UG/SIPD/Effect) -> UG/SIPD/State
| body state #Nil             = state
| body state #Cons{head tail} = 
  let updated_body = (UG/SIPD/Body/set_effects body tail)
  let #Body{id hitbox tick effects collidable} = updated_body
  let #State{next_id state_tick players hero_states game_map} = state
  let #GameMap{width height bodies bodies_count} = game_map
  let updated_bodies = (Map/insert G/Body bodies id updated_body)
  let new_state = (G/Effect/apply head #State{next_id state_tick players hero_states #GameMap{width height updated_bodies bodies_count}})
  (UG/SIPD/Body/apply_effects/go updated_body new_state tail)

// Sets new effects for a body.
// - body: The body to update.
// - effects: New effects list.
// = Updated body with new effects.
UG/SIPD/Body/set_effects : UG/SIPD/Body -> (List UG/SIPD/Effect) -> UG/SIPD/Body
| #Body{id hitbox tick effects collidable} new_effects = #Body{id hitbox tick new_effects collidable}

