use UG/SIPD as G

calculate_angle_diff : F64 -> F64
| raw_diff = 
  if (F64/gt (F64/abs raw_diff) 3.1415) {
    // If the difference is more than Ï€, adjust to the shorter path
    if (F64/gt raw_diff 0.0) {
      (F64/sub raw_diff (F64/mul 2.0 3.1415))
    } else {
      (F64/add raw_diff (F64/mul 2.0 3.1415))
    }
  } else {
    raw_diff
  }

// Updates the disintegrate line effect.
// - line_id: ID of the line body.
// - player_id: ID of the player.
// - line_width: Width of the line.
// - line_range: Range of the line.
// - rotation_speed: Speed of rotation in radians per tick.
// - state: Current game state.
// = Updated game state.
UG/SIPD/Effect/tick_disintegrate_line : U64 -> U64 -> F64 -> F64 -> F64 -> G/State -> G/State
| line_id player_id line_width line_range rotation_speed #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} with (G/Body/get_body line_id bodies)
.| #None = #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
.| #Some{line} with (G/Body/get_body player_id bodies)
..| #None = #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
..| #Some{hero} with (Map/get G/Player players player_id)
...| #None         = #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
...| #Some{player} =
  let #Body{hero_id hero_hitbox hero_tick hero_effects hero_collidable hero_side} = hero
  let hero_pos = (UG/Shape/get_center hero_hitbox)
  let def_line = (UG/Shape/start_centered_rectangle hero_pos line_width line_range)

  let #Body{line_id line_hitbox line_tick line_effects line_collidable line_side} = line
  
  let #Player{pid player_name player_keys player_target player_hero} = player
  let target_angle = (round (V2/calculate_angle hero_pos player_target))
  let current_angle = (round (UG/Shape/get_rotation line_hitbox))
  
  let raw_diff = (round (F64/sub target_angle current_angle))
  let angle_diff = (round (calculate_angle_diff raw_diff))

  if (F64/gt (F64/abs angle_diff) rotation_speed) {
    let new_angle = (round (F64/add current_angle (round (F64/mul rotation_speed (F64/sign angle_diff)))))
    let new_line_shape = (UG/Shape/rotate def_line new_angle)
    let new_state = (G/State/insert_body #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} #Body{line_id new_line_shape line_tick line_effects line_collidable line_side})
    
    (G/Body/apply_effects #Body{line_id new_line_shape line_tick line_effects line_collidable line_side} new_state)
  } else {
    let new_angle = target_angle
    let new_line_shape = (UG/Shape/rotate def_line new_angle)
    let new_state = (G/State/insert_body #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} #Body{line_id new_line_shape line_tick line_effects line_collidable line_side})
    
    (G/Body/apply_effects #Body{line_id new_line_shape line_tick line_effects line_collidable line_side} new_state)
  }
 
disintegrate/create_disintegrate_line : U64 -> U64 -> F64 -> F64 -> F64 -> V2 -> V2 -> G/Side -> G/Body
| line_id player_id line_width line_range rotation_speed start end side =
  let direction = (V2/normalize (V2/sub end start))
  let center = start
  let body_shape = (UG/Shape/start_centered_rectangle center line_width line_range)
  let body_tick = (G/Effect/tick_disintegrate_line line_id player_id line_width line_range rotation_speed)
  #Body{line_id body_shape body_tick [] #Untouchable side}

disintegrate/block_player_movement : U64 -> U64 -> G/State -> G/State
| block_time player_id state =
  let movement_key = "RightClick"
  (G/Hero/HeroState/update_cooldown player_id movement_key state block_time) 

UG/SIPD/Effect/disintegrate : U64 -> U64 -> F64 -> F64 -> F64 -> G/Effect
| player_id duration line_width line_range rotation_speed #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} with (Map/get G/Player players player_id)
.| #None = 
  #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
.| #Some{#Player{id name keys target hero}} =
  let #Hero{owner_id hero_name skills body_id} = hero 
  
  let hero_body = (G/Body/get_body body_id bodies)
  match hero_body {
    #None: 
      #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
    #Some{body}:
      let #Body{body_id hitbox body_tick effects collidable side} = body
      let hero_pos = (UG/Shape/get_center hitbox)    
      let target = (G/Player/get_mouse_pos #Player{id name keys target hero} "R")
      let direction = (V2/round (V2/normalize (V2/sub target hero_pos)))
      let line_end = (V2/round (V2/add hero_pos (V2/mul_scalar direction line_range)))
      let #Pair{new_id new_state} = (G/State/generate_id #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}})
      let disintegrate_line = (disintegrate/create_disintegrate_line new_id player_id line_width line_range rotation_speed hero_pos line_end side)

      let dmg_per_tick = 1
  
      let spawn_effect = (G/Effect/spawn_body disintegrate_line)
      let with_duration = (G/Effect/with_duration duration new_id (G/Effect/collide_and_dps body_id new_id dmg_per_tick))
      let state = (G/Effect/apply spawn_effect new_state)
      let state = (disintegrate/block_player_movement duration player_id state)
      let state = (G/Effect/apply with_duration state)

      state
  }
