use UG/SIPD as G

UG/SIPD/Effect/accelerated_move_range : U64 -> F64 -> V2 -> F64 -> F64 -> U64 -> G/Effect -> G/Effect
| body_id initial_speed target range acceleration duration effect #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} with (G/Body/get_body body_id bodies)
.| #None                                                = #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}}
.| #Some{#Body{id hitbox body_tick effects collidable}} =
  let hitbox_center = (UG/Shape/get_center hitbox)
  let distance_to_target = (V2/sub target hitbox_center)
  let ln = (V2/length distance_to_target)

  if (Bool/or (F64/lt ln 20.0) (F64/lte range 0.0)) {
    (G/State/delete_body #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} body_id)
  } else {
    let accelerated_speed = (round (F64/add initial_speed acceleration))

    let move_distance = (F64/min accelerated_speed range)
    let direction = (V2/normalize distance_to_target)
    let movement = (V2/round (V2/mul_scalar direction move_distance))
    let new_hitbox = (UG/Shape/move hitbox movement)

    let updated_state = (UG/SIPD/State/update_body #State{next_id tick players hero_states #GameMap{width height bodies bodies_count}} #Body{id new_hitbox body_tick effects collidable})

    let state = (G/Effect/apply effect updated_state)
  
    if (U64/gt duration 0) {
      let new_effect = (G/Effect/accelerated_move_range body_id accelerated_speed target range acceleration (- duration 1) effect)
      (G/State/update_body state #Body{id new_hitbox body_tick #Cons{new_effect effects} collidable}) 
    } else { 
      (G/State/delete_body state body_id)
    }
  }
