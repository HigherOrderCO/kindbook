// Gets possible collisions from a QuadTree.
// - qt: The QuadTree containing shapes.
// - objects: List of objects to check for collisions.
// - acc: Accumulator for collision pairs.
// = List of possible collision pairs.
UG/Collision/get-possible-collisions/go : (QuadTree UG/Shape) -> (List (QuadTree/Object UG/Shape)) -> (List (Pair UG/Shape UG/Shape)) -> (List (Pair UG/Shape UG/Shape))
| qt #Nil acc = acc
| qt #Cons{#Object{bounds value} os} acc = 
  let potential = (QuadTree/query UG/Shape qt bounds)
  let new-collisions = (UG/Collision/filter-potential-collisions #Object{bounds value} potential)
  (UG/Collision/get-possible-collisions/go qt os (List/append (Pair UG/Shape UG/Shape) acc new-collisions))

// Gets all possible collisions in a QuadTree.
// - qt: The QuadTree to check.
// - max_rect: The maximum rectangle to consider.
// = List of possible collision pairs.
UG/Collision/get-possible-collisions : (QuadTree UG/Shape) -> QuadTree/Rectangle -> (List (Pair UG/Shape UG/Shape))
| qt max-rect =
  let all-objects = (QuadTree/query UG/Shape qt max-rect)
  (UG/Collision/get-possible-collisions/go qt all-objects #Nil)
