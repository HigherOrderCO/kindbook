// Gets the initial state and tick of a game.
// - S: State type.
// - A: Action type.
// - mach: The state machine.
// - game: The game.
// = A pair of the initial state and tick.
UG/SM/get-initial-state : ∀(S: *) ∀(A: *) (UG/SM/Mach S A) -> (UG/SM/Game S A) -> (Pair S UG/SM/Tick)
| S A #Mach{ticks-per-second genesis-tick cached-tick state-logs action-logs action-eq} #Game{init when tick} =
  (Maybe/match (UG/SM/StateLogs/StateNode S) (λx (Pair S UG/SM/Tick))
    (#Pair{init genesis-tick})
    (λnode #Pair{(UG/SM/StateLogs/StateNode/state S node) (UG/SM/StateLogs/StateNode/tick S node)})
    state-logs)
