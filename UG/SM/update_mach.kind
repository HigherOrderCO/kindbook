// Updates a machine with a new tick and state.
// - S: State type.
// - A: Action type.
// - mach: The machine to be updated.
// - t: The new tick to update the machine with.
// - s: The new state to be added to the state logs.
// = Updated Mach with the new tick and state.
UG/SM/update_mach : ∀(S: *) ∀(A: *) (UG/SM/Mach S A) -> UG/SM/Tick -> S -> (UG/SM/Mach S A)
| S A #Mach{ticks_per_second genesis_tick cached_tick state_logs action_logs action_eq} t s
= let new_cached_tick = (U64/max cached_tick t)
  let new_state_logs  = (UG/SM/StateLogs/push S s state_logs t)
  #Mach{ticks_per_second genesis_tick new_cached_tick new_state_logs action_logs action_eq}

#test: (UG/SM/Mach/cached_tick U64 U64 (UG/SM/update_mach U64 U64 (UG/SM/new_mach U64 U64 10 U64/eq) 5 3)) == 5
