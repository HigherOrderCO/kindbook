// A simple game state with a counter
data GameState {
  #GameState { counter: U64 }
}

gm : GameState
= #GameState {3}

// Actions for our simple game
data GameAction {
  #Increment
}

GameState/counter : GameState -> U64
| #GameState {counter} = counter

// Equality function for GameAction
GameAction/eq : GameAction -> GameAction -> Bool
| #Increment #Increment = #True

// Our simple game definition
simple_game : (UG/SM/Game GameState GameAction)
= #Game{
  init: #GameState{counter: 0}
  when: λaction λstate
    match action {
      #Increment: #GameState{counter: (U64/add (GameState/counter state) 1)}
    }
  tick: λstate state
}

// Simulates the game for a given number of ticks
simulate_game : U64 -> (UG/SM/Mach GameState GameAction)
| ticks =
  let mach = (UG/SM/new_mach GameState GameAction 60 GameAction/eq)
  let mach = (UG/SM/register_action GameState GameAction mach #TimedAction{action: #Increment time: 0})
  mach

event : UG/SIPD/Event
= #KeyEvent{ 0 0 "a" #False}

event1 : UG/SIPD/Event
= #MouseClick{ 0 0 #LeftButton 1.0 1.0}

event2 : UG/SIPD/Event
= #KeyMouse{ 0 0 "a" #True 1.0 1.0}

event3 : UG/SIPD/Event
= #MouseMove{ 0 0 1.0 1.0}

event4 : UG/SIPD/Event
= #ActionEvent{ #SetNick{1 1 "hey"}}




mach : (UG/SM/Mach GameState GameAction)
= (simulate_game 1)

main : (UG/SM/Mach GameState GameAction)
= #Mach{ticks_per_second: 60 genesis_tick: 0 cached_tick: 0 state_logs: #None action_logs: #Node{#Some{[#Increment{}]} #Leaf{} #Leaf{}} action_eq: GameAction/eq}


#test: ((simulate_game 1) == mach)

