// FIXME: abstract U64/to_string and this as a base_n stringifier

// Converts a U64 to its string representation.
// - n: The U64 to convert.
// = The string representation of the number.
U64/to_hex_string : U64 -> String
= Î»n (U64/to_hex_string/go n String/nil)

// Recursively builds the reversed string representation of a U64.
// - n: The U64 to convert.
// - k: The accumulator for the reversed string.
// = The reversed string representation of the number.
U64/to_hex_string/go : U64 -> String -> String
| n k =
  if (U64/to_bool (== n 0)) {
    match k {
      #Nil: (String/cons '0' String/nil)
      #Cons{h t}: k
    }
  } else {
    let n16 = (/ n 16)
    let rem = (% n 16)
    let hex = (U64/to_bool (>= rem 10))
    let dig = if hex { (+ 'A' (- rem 10)) } else { (+ '0' rem) } :: U64
    (U64/to_hex_string/go n16 (String/cons dig k))
  }
