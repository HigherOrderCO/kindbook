// FIXME: this file isn't working

// Splits a Bits value into chunks of a specified length.
// - 1st: The length of each chunk.
// - 2nd: The Bits value to be split.
// = A List of Bits, where each element is a chunk of the specified length.
Bits/split-chunks
: ∀(d: Nat)
  ∀(bits: Bits)
  (List Bits)
= λ{
  #Zero: λbits []
  #Succ: λpred λ{
    #E: []
    #O: λtail
      let #Pair{collected rest} = (Bits/split-at #Succ{pred} #O{tail})
      match rest {
          #E: #Cons{collected []}
          #O: λrest.tail #Cons{collected (Bits/split-chunks #Succ{pred} #O{rest.tail})}
          #I: λrest.tail #Cons{collected (Bits/split-chunks #Succ{pred} #I{rest.tail})}
      }
    #I: λtail
      let #Pair{collected rest} = (Bits/split-at #Succ{pred} #I{tail})
      match rest {
          #E: #Cons{collected []}
          #O: λrest.tail #Cons{collected (Bits/split-chunks #Succ{pred} #O{rest.tail})}
          #I: λrest.tail #Cons{collected (Bits/split-chunks #Succ{pred} #I{rest.tail})}
      }
  }
}

#test: (Bits/split-chunks #3 #E) == []
#test: (Bits/split-chunks #2 (Nat/to-bits #45)) == (#Cons{#I{#O{#E}} #Cons{#I{#I{#E}} #Cons{#O{#I{#E}} []}}})
#test: (Bits/split-chunks #3 (Nat/to-bits #123)) == (#Cons{#I{#I{#O{#E}}} #Cons{#I{#I{#I{#E}}} #Cons{#I{#O{#E}} []}}})
#test: (Bits/split-chunks #8 (Nat/to-bits #15)) == (#Cons{#I{#I{#I{#I{#O{#O{#O{#E}}}}}}} []})
