use Bits/ as BS/
use Nat/ as N/
use List/ as L/
use Equal/ as E/

// Test: Split empty Bits
T0 
: (E/Equal (L/List BS/Bits) (BS/split-chunks #3 #E) [])
= #Refl

// Test: Split Bits into chunks of length 2
T1 
: (E/Equal
  (L/List BS/Bits)
  (BS/split-chunks #2 (N/to-bits #45))
  (#Cons{#I{#O{#E}} #Cons{#I{#I{#E}} #Cons{#O{#I{#E}} []}}}))
= #Refl

// Test: Split Bits into chunks of length 3
T2 
: (E/Equal
  (L/List BS/Bits)
  (BS/split-chunks #3 (N/to-bits #123))
  (#Cons{#I{#I{#O{#E}}} #Cons{#I{#I{#I{#E}}} #Cons{#I{#O{#E}} []}}}))
= #Refl

// Test: Split Bits with chunk size larger than Bits length
T3 
: (E/Equal
  (L/List BS/Bits)
  (BS/split-chunks #8 (N/to-bits #15))
  (#Cons{#I{#I{#I{#I{#O{#O{#O{#E}}}}}}} []}))
= #Refl
