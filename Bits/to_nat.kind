// Recursively converts a Bits representation to Nat.
// - bits: The Bits to convert.
// - mult: The weight or power of 2 to be applied for the current bit position.
// = The Nat representation of the input Bits after recursive processing.
Bits/to_nat_go : Bits -> Nat -> Nat
| #E       mult = #Zero
| #O{tail} mult = (Bits/to_nat_go tail (Nat/mul #2 mult))
| #I{tail} mult = (Nat/add mult (Bits/to_nat_go tail (Nat/mul #2 mult)))

// Converts a binary representation (Bits) to its Nat value.
// - bits: The Bits to convert.
// = The Nat representation of the input Bits.
Bits/to_nat : Bits -> Nat
| bits = (Bits/to_nat_go bits #1)

#test: (Bits/to_nat #E) == #Zero
#test: (Bits/to_nat (#O{#E})) == #Zero
#test: (Bits/to_nat (#I{#E})) == #1
#test: (Bits/to_nat (#O{#I{#E}})) == #2
#test: (Bits/to_nat (#I{#I{#E}})) == #3
#test: (Bits/to_nat (#O{#O{#I{#E}}})) == #4
#test: (Bits/to_nat (#I{#O{#I{#E}}})) == #5
#test: (Bits/to_nat (#O{#I{#O{#I{#E}}}})) == #10
#test: (Bits/to_nat (#I{#O{#O{#I{#I{#E}}}}})) == #25
