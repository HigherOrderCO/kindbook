// Applies a function n times to an initial argument.
// - 1st: The type of the argument and result.
// - 2nd: The number of times to apply the function.
// - 3rd: The function to apply.
// - 4th: The initial argument.
// = The result of applying function to argument, n times.
Nat/apply
: ∀(A: *)
  ∀(n: Nat)
  ∀(f: ∀(a: A) A)
  ∀(x: A)
  A
= λA λ{
  #Zero: λf λx x
  #Succ: λn.pred λf λx (f (Nat/apply A n.pred f x))
}

// Test: Applying id 0 times to 5 should return 5
TEST_0
: (Equal
    Nat
    (Nat/apply _ #Zero (Function/id Nat) #Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}})
    #Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}})
= #Refl

// Test: Applying Succ 3 times to 0 should return 3
TEST_1
: (Equal
    Nat
    (Nat/apply _ #Succ{#Succ{#Succ{#Zero}}} (λx #Succ{x}) #Zero)
    #Succ{#Succ{#Succ{#Zero}}})
= #Refl

// Test: Applying (_+ 1) 2 times to 3 should return 5
TEST_2
: (Equal
    Nat
    (Nat/apply
      _
      #Succ{#Succ{#Zero}}
      (λx (Nat/add x #Succ{#Zero}))
      #Succ{#Succ{#Succ{#Zero}}})
    #Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}})
= #Refl
