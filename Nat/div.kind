// Performs integer division of natural numbers.
// - m: The dividend.
// - n: The divisor.
// = The quotient of the division.
Nat/div : Nat -> Nat -> Nat
| m #Zero    = #Zero  // Division by zero returns zero.
| m #Succ{n} = (Nat/div/go n m n #Zero)

// Helper function 'go' for Euclidean division.
//
// go computes n / (1+m) via iteration on n.
//
//   n div (suc m) = go m n m 0
//
// The state of the iterator has two accumulator variables:
//
//   k: The quotient, returned once n=0. Initialized to 0.
//
//   j: A counter, initialized to the divisor m, decreased on each iteration step.
//      Once it reaches 0, the quotient k is increased and j reset to m,
//      starting the next countdown.
//
// Under the precondition j â‰¤ m, the invariant is
//
//   go m n j k = (k + (n + m - j)) / (1 + m)
Nat/div/go : Nat -> Nat -> Nat -> Nat -> Nat
| m #Zero    j        k = k
| m #Succ{n} #Zero    k = (Nat/div/go m n m (#Succ{k}))
| m #Succ{n} #Succ{j} k = (Nat/div/go m n j k)

#test: (Nat/div #Zero #1) == #Zero
#test: (Nat/div #5 #1) == #5
#test: (Nat/div #5 #2) == #2
#test: (Nat/div #10 #3) == #3
#test: (Nat/div #15 #5) == #3
#test: (Nat/div (#100) (#10)) == #10
#test: (Nat/div #5 #Zero) == #Zero
#test: (Nat/add (Nat/mul (Nat/div #15 #4) #4) (Nat/mod #15 #4)) == #15
