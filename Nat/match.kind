// Applies a function to a natural number based on its structure.
// This function allows pattern matching on natural numbers.
// - P: A type-level function that determines the return type for each case.
// - z: The value to return in the zero case.
// - s: The function to apply in the successor case.
// - n: The natural number to match on.
// = The result of matching on the input natural number.
Nat/match : ∀(P: Nat -> *) (P #Zero) -> (∀(x: Nat) (P #Succ{x})) -> ∀(n: Nat) (P n)
| P z s #Zero    = z
| P z s #Succ{n} = (s n)

// A simple function that returns a boolean description of a natural number
Nat/describe : Nat -> Bool
= (Nat/match (λx Bool) #False (λpred #True))

#test: (Nat/describe #Zero) == #False
#test: (Nat/describe #1) == #True
#test: (Nat/describe #2) == #True
#test: (Nat/describe #3) == #True
#test: (Bool/eq (Nat/describe #1) (Nat/describe #2)) == #True
#test: (Bool/eq (Nat/describe #Zero) (Nat/describe #1)) == #False
