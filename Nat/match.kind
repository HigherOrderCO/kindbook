use Nat/ as N/

// Applies a function to a natural number based on its structure.
// This function allows pattern matching on natural numbers.
// 1st: A type-level function that determines the return type for each case.
// 2nd: The value to return in the zero case.
// 3rd: The function to apply in the successor case.
// 4th: The natural number to match on.
// = The result of matching on the input natural number.
N/match
: ∀(P: ∀(x: N/Nat) *)
  ∀(z: (P #Zero{}))
  ∀(s: ∀(x: N/Nat) (P #Succ{x}))
  ∀(n: N/Nat)
  (P n)
= λP λz λs λ{
  #Zero: z
  #Succ: λn.pred (s n.pred)
}
//TEST//

use Nat/ as N/
use Equal/ as E/
use Bool/ as B/

// A simple function that returns a string description of a natural number
N/describe
: ∀(n: N/Nat)
  B/Bool
= (N/match
    λx(B/Bool)
    #False{}
    λpred #True{}
  )

// Test: Describe of Zero{}
T0
: (E/Equal B/Bool (N/describe #Zero{}) #False{})
= #Refl{}

// Test: Describe of Succ{Zero}
T1
: (E/Equal B/Bool (N/describe #Succ{#Zero{}}) #True{})
= #Refl{}

// Test: Describe of Succ{Succ{Zero}}
T2
: (E/Equal B/Bool (N/describe #Succ{#Succ{#Zero{}}}) #True{})
= #Refl{}

// Test: Describe of Succ{Succ{Succ{Zero}}}
T3
: (E/Equal B/Bool (N/describe #Succ{#Succ{#Succ{#Zero{}}}}) #True{})
= #Refl{}

// Test: Equality of describe results for different non-zero numbers
T4
: (E/Equal B/Bool (B/eq (N/describe #Succ{#Zero{}}) (N/describe #Succ{#Succ{#Zero{}}})) #True{})
= #Refl{}

// Test: Inequality of describe results for zero and non-zero
T5
: (E/Equal B/Bool (B/eq (N/describe #Zero{}) (N/describe #Succ{#Zero{}})) #False{})
= #Refl{}