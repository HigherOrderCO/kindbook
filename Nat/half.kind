// Calculates half of a nat.
// - n: The number to halve.
// = The largest nat not exceeding n/2.
Nat/half : Nat/Nat -> Nat/Nat
| #Succ{#Succ{n}} = #Succ{(Nat/half n)} 
| #Succ{n}        = #Zero
| #Zero           = #Zero

// Test cases for the half function

// Test: half of 0 is 0
TEST_0
: (Equal/Equal Nat/Nat (Nat/half #Zero{}) #Zero{})
= #Refl{}

// Test: half of 1 is 0
TEST_1
: (Equal/Equal Nat/Nat (Nat/half #Succ{#Zero{}}) #Zero{})
= #Refl{}

// Test: half of 2 is 1
TEST_2
: (Equal/Equal Nat/Nat (Nat/half #Succ{#Succ{#Zero{}}}) #Succ{#Zero{}})
= #Refl{}

// Test: half of 3 is 1
TEST_3
: (Equal/Equal Nat/Nat (Nat/half #Succ{#Succ{#Succ{#Zero{}}}}) #Succ{#Zero{}})
= #Refl{}

// Test: half of 4 is 2
TEST_4
: (Equal/Equal Nat/Nat (Nat/half #Succ{#Succ{#Succ{#Succ{#Zero{}}}}}) #Succ{#Succ{#Zero{}}})
= #Refl{}

// Test: half of 5 is 2
TEST_5
: (Equal/Equal Nat/Nat (Nat/half #Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}) #Succ{#Succ{#Zero{}}})
= #Refl{}