// Compares two natural numbers. This function determines the relative order
// of two given natural numbers.
// - 1st: The first natural number to compare.
// - 2nd: The second natural number to compare.
// = An Ordering value: LT if 1st < 2nd, EQ if 1st = 2nd, GT if 1st > 2nd.
Nat/compare
: ∀(m: Nat/Nat)
  ∀(n: Nat/Nat)
  Ordering/Ordering
= λ{
  #Zero: λ{
    #Zero: #EQ{}
    #Succ: λn.pred #LT{}
  }
  #Succ: λm.pred λ{
    #Zero: #GT{}
    #Succ: λn.pred (Nat/compare m.pred n.pred)
  }
}
// // Test: Transitivity: if a < b and b < c, then a < c
// T6
// : ∀(a: Nat/Nat)
//   ∀(b: Nat/Nat)
//   ∀(c: Nat/Nat)
//   ∀(ab_lt: (Equal/Equal Ordering/Ordering (Nat/compare a b) #LT{}))
//   ∀(bc_lt: (Equal/Equal Ordering/Ordering (Nat/compare b c) #LT{}))
//   (Equal/Equal Ordering/Ordering (Nat/compare a c) #LT{})
// = λa λb λc λab_lt λbc_lt #Refl{}

// // Test: Antisymmetry: if compare a b = EQ, then a = b
// T7
// : ∀(a: Nat/Nat)
//   ∀(b: Nat/Nat)
//   ∀(eq: (Equal/Equal Ordering/Ordering (Nat/compare a b) #EQ{}))
//   (Equal/Equal Nat/Nat a b)
// = λa λb λeq #Refl{}

// Test: compare 0 0 = EQ
TEST_0
: (Equal/Equal Ordering/Ordering (Nat/compare #Zero{} #Zero{}) #EQ{})
= #Refl{}

// Test: compare 0 5 = LT
TEST_1
: (Equal/Equal Ordering/Ordering (Nat/compare #Zero{} #Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}) #LT{})
= #Refl{}

// Test: compare 5 0 = GT
TEST_2
: (Equal/Equal Ordering/Ordering (Nat/compare #Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Zero{}) #GT{})
= #Refl{}

// Test: compare 3 3 = EQ
TEST_3
: (Equal/Equal Ordering/Ordering (Nat/compare #Succ{#Succ{#Succ{#Zero{}}}} #Succ{#Succ{#Succ{#Zero{}}}}) #EQ{})
= #Refl{}

// Test: compare 2 7 = LT
TEST_4
: (Equal/Equal Ordering/Ordering (Nat/compare #Succ{#Succ{#Zero{}}} #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}) #LT{})
= #Refl{}

// Test: compare 8 4 = GT
TEST_5
: (Equal/Equal Ordering/Ordering (Nat/compare (#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}) (#Succ{#Succ{#Succ{#Succ{#Zero{}}}}})) #GT{})
= #Refl{}
