// Returns the predecessor of a nat.
// - n: The input nat.
// = The predecessor of n, or Zero if n is already Zero.
Nat/pred : Nat -> Nat
| #Zero    = #Zero
| #Succ{n} = n

#test: (Nat/pred #0) == #0
#test: (Nat/pred #1) == #0
#test: (Nat/pred #2) == #1
#test: (Nat/pred #5) == #4
#test: (Nat/pred (Nat/pred #3)) == #1
#test: (Nat/pred (Nat/pred #1)) == #0
#test: (Nat/pred (Nat/pred #0)) == #0
