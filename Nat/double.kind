// Doubles a natural number.
// 1st: The number to double.
// = The double of the input number.
Nat/double
: ∀(n: Nat)
  Nat
= λ{
  #Zero: #Zero{}
  #Succ: λn.pred #Succ{#Succ{(Nat/double n.pred)}}
}
// Tests for the double function.

// Test: double 0 = 0
TEST_0
: (Equal Nat (Nat/double #Zero{}) #Zero{})
= #Refl{}

// Test: double 1 = 2
TEST_1
: (Equal Nat (Nat/double #Succ{#Zero{}}) #Succ{#Succ{#Zero{}}})
= #Refl{}

// Test: double 2 = 4
TEST_2
: (Equal Nat (Nat/double #Succ{#Succ{#Zero{}}}) #Succ{#Succ{#Succ{#Succ{#Zero{}}}}})
= #Refl{}

// Test: double 5 = 10
TEST_3
: (Equal Nat (Nat/double #Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}) #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}})
= #Refl{}

// Test: double (double 2) = 8
TEST_4
: (Equal Nat (Nat/double (Nat/double #Succ{#Succ{#Zero{}}})) #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}})
= #Refl{}

// Test: double (3 + 2) = double 3 + double 2
TEST_5
: (Equal
    Nat
    (Nat/double (Nat/add #Succ{#Succ{#Succ{#Zero{}}}} #Succ{#Succ{#Zero{}}}))
    (Nat/add (Nat/double #Succ{#Succ{#Succ{#Zero{}}}}) (Nat/double #Succ{#Succ{#Zero{}}})))
= #Refl{}
