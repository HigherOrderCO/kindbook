// Converts a nat to its binary representation.
// - n: The nat to convert.
// = The binary representation of the number as Bits.
Nat/to-bits : Nat -> Bits
| #Zero           = #O{#E}
| #Succ{#Zero}    = #I{#E}
| #Succ{#Succ{n}} =
  let quotient  = (Nat/div #Succ{#Succ{n}} #2)
  let remainder = (Nat/mod #Succ{#Succ{n}} #2)
  if (Nat/eq remainder #Zero) {
    #O{(Nat/to-bits quotient)}
  } else {
    #I{(Nat/to-bits quotient)}
  }

#test: (Nat/to-bits #0)  == #O{#E}
#test: (Nat/to-bits #1)  == #I{#E}
#test: (Nat/to-bits #2)  == #O{#I{#E}}
#test: (Nat/to-bits #3)  == #I{#I{#E}}
#test: (Nat/to-bits #4)  == #O{#O{#I{#E}}}
#test: (Nat/to-bits #5)  == #I{#O{#I{#E}}}
#test: (Nat/to-bits #8)  == #O{#O{#O{#I{#E}}}}
#test: (Nat/to-bits #15) == #I{#I{#I{#I{#E}}}}
