// Higher-order Virtual Machine
// ============================

// Core Types
// ----------

data HVM/CPol {
  #Pos
  #Neg
}

data HVM/CTerm ~ (pol: HVM/CPol) {
  #Var{ uid: Bits } : (HVM/CTerm #Pos)
  #Sub{ uid: Bits } : (HVM/CTerm #Neg)
  #Nul : (HVM/CTerm #Pos)
  #Era : (HVM/CTerm #Neg)
  #Lam{ var: (HVM/CTerm #Neg) bod: (HVM/CTerm #Pos) } : (HVM/CTerm #Pos)
  #App{ arg: (HVM/CTerm #Pos) ret: (HVM/CTerm #Neg) } : (HVM/CTerm #Neg)
  #Sup{ tm1: (HVM/CTerm #Pos) tm2: (HVM/CTerm #Pos) } : (HVM/CTerm #Pos)
  #Dup{ dp1: (HVM/CTerm #Neg) dp2: (HVM/CTerm #Neg) } : (HVM/CTerm #Neg)
}

HVM/CDex : *
= (Pair (HVM/CTerm #Neg) (HVM/CTerm #Pos))

HVM/CBag : *
= (List HVM/CDex)

data HVM/CNet {
  #Net{
    rot: (HVM/CTerm #Pos)
    bag: HVM/CBag
  }
}

// Runtime Types
// -------------

data HVM/RTag {
  #VAR
  #SUB
  #NUL
  #ERA
  #LAM
  #APP
  #SUP
  #DUP
}

HVM/RLoc : *
= Bits

data HVM/RTerm {
  #RTerm{
    tag: HVM/RTag
    loc: HVM/RLoc
  }
}

HVM/RDex : *
= (Pair HVM/RTerm HVM/RTerm)

HVM/RBag : *
= (BinMap HVM/RDex)

HVM/RMem : *
= (BinMap HVM/RTerm)

data HVM/RNet {
  #RNet{
    bag_buf: HVM/RBag
    bag_len: Bits
    bag_pop: Bits
    mem_buf: HVM/RMem
    mem_len: Bits
  }
}

HVM : * -> *
| A = ∀(net: HVM/RNet) (Maybe (Pair HVM/RNet A))

// HVM Monad
// ---------

HVM/pure : ∀(A: *) A -> (HVM A)
| A a net = #Some{#Pair{ net a }}

HVM/bind : ∀(A: *) ∀(B: *) (HVM A) -> (A -> (HVM B)) -> (HVM B)
| A B ma fn net = (HVM/bind/go A B (ma net) fn)

HVM/bind/go : ∀(A: *) ∀(B: *) (Maybe (Pair HVM/RNet A)) -> (A -> (HVM B)) -> (Maybe (Pair HVM/RNet B))
| A B #None               fn = #None
| A B #Some{#Pair{net a}} fn = (fn a net)

HVM/Monad : (Monad HVM)
= #Monad{
  pure: HVM/pure
  bind: HVM/bind
}

// Initialization
// --------------

HVM/CNet/new : HVM/CNet
= #Net{
  rot: #Nul
  bag: #Nil
}

HVM/RNet/new : HVM/RNet
= #RNet{
  bag_buf: (BinMap/new _)
  bag_len: #E
  bag_pop: #E
  mem_buf: (BinMap/new _)
  mem_len: (Bits/succ #E)
}

// RTerm
// -----

HVM/RTag/is-sub : HVM/RTag -> Bool
| #SUB = #True
| else = #False

HVM/RTag/is-var : HVM/RTag -> Bool
| #VAR = #True
| else = #False

HVM/RTerm/get-tag : HVM/RTerm -> HVM/RTag
| #RTerm{tag loc} = tag

HVM/RTerm/get-loc : HVM/RTerm -> HVM/RLoc
| #RTerm{tag loc} = loc

HVM/at : Nat -> Bits -> Bits
| #Zero    x = x
| #Succ{n} x = (Bits/succ (HVM/at n x))

// Actions
// -------

HVM/get : Bits -> (HVM HVM/RTerm)
| loc #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  let #Pair{mem_buf got} = (BinMap/got _ mem_buf loc)
  match got {
    #None: #None
    #Some: λterm #Some{ #Pair{ #RNet{ bag_buf bag_len bag_pop mem_buf mem_len } term }}
  }

HVM/set : Bits -> HVM/RTerm -> (HVM Unit)
| loc term #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use mem_buf = (BinMap/set _ mem_buf loc term)
  use new_net = #RNet{ bag_buf bag_len bag_pop mem_buf mem_len }
  #Some{ #Pair{ new_net #Unit } }

HVM/del : Bits -> (HVM Unit)
| loc #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use mem_buf = (BinMap/del _ mem_buf loc)
  use new_net = #RNet{ bag_buf bag_len bag_pop mem_buf mem_len }
  #Some{ #Pair{ new_net #Unit } }

HVM/swap : Bits -> (Maybe HVM/RTerm) -> (HVM (Maybe HVM/RTerm))
| loc term #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  let #Pair{mem_buf old} = (BinMap/swap _ mem_buf loc term)
  #Some{ #Pair{ #RNet{ bag_buf bag_len bag_pop mem_buf mem_len } old } }

HVM/take : Bits -> (HVM HVM/RTerm)
| loc #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  let #Pair{mem_buf got} = (BinMap/swap _ mem_buf loc #Some{#RTerm{ #SUB loc }})
  match got {
    #None: #None
    #Some{got}: if (HVM/RTag/is-sub (HVM/RTerm/get-tag got)) {
      #Some{ #Pair{ #RNet{ bag_buf bag_len bag_pop mem_buf mem_len } got } }
    } else {
      let mem_buf = (BinMap/del _ mem_buf loc) 
      #Some{ #Pair{ #RNet{ bag_buf bag_len bag_pop mem_buf mem_len } got } }
    }
  }

HVM/init : Bits -> HVM/RTerm -> (HVM Unit)
| loc term #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use mem_buf = (BinMap/init _ mem_buf loc term)
  use new_net = #RNet{ bag_buf bag_len bag_pop mem_buf mem_len }
  #Some{ #Pair{ new_net #Unit } }

HVM/get-rnet : (HVM HVM/RNet)
= λnet #Some{ #Pair{ net net } }

HVM/get-rbag : (HVM HVM/RBag)
| #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  #Some{ #Pair{ #RNet{ bag_buf bag_len bag_pop mem_buf mem_len } bag_buf } }

HVM/get-rrot : (HVM HVM/RTerm)
= (HVM/get #E)

HVM/get-cnet : (HVM HVM/CNet)
= do HVM {
  ask net = HVM/get-rnet
  (HVM/recover-net net)
}

// Allocation
// ----------

HVM/alloc-node : Nat -> (HVM Bits)
| arity #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use old_mem_len = mem_len
  use new_mem_len = (Nat/apply _ arity Bits/succ old_mem_len)
  use new_net     = #RNet{ bag_buf bag_len bag_pop mem_buf new_mem_len }
  #Some{ #Pair{ new_net old_mem_len } }

HVM/push-redex : HVM/RDex -> (HVM Bits)
| redex #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use old_bag_len = bag_len
  use new_bag_len = (Bits/succ old_bag_len)
  use new_bag_buf = (BinMap/set _ bag_buf old_bag_len redex)
  use new_net     = #RNet{ new_bag_buf new_bag_len bag_pop mem_buf mem_len }
  #Some{ #Pair{ new_net old_bag_len } }

HVM/pop-redex : (HVM (Maybe HVM/RDex))
| #RNet{bag_buf bag_len bag_pop mem_buf mem_len} =
  use old_bag_pop  = bag_pop
  use new_bag_pop  = (Bits/succ old_bag_pop)
  let #Pair{bb rx} = (BinMap/take _ bag_buf old_bag_pop)
  use new_net      = #RNet{ bb bag_len new_bag_pop mem_buf mem_len }
  #Some{ #Pair{ new_net rx } }

// Injection
// ---------

HVM/VarMap : *
= (BinMap Bits)

HVM/inject-term : ∀(p: HVM/CPol) (HVM/CTerm p) -> (Maybe Bits) -> HVM/VarMap -> (HVM (Pair HVM/VarMap HVM/RTerm))
| p #Lam{var bod} host vars = do HVM {
  ask lam             = (HVM/alloc-node #3)
  ask #Pair{vars var} = (HVM/inject-term #Neg var #Some{(HVM/at #1 lam)} vars)
  ask #Pair{vars bod} = (HVM/inject-term #Pos bod #Some{(HVM/at #2 lam)} vars)
  ask (HVM/init (HVM/at #1 lam) var)
  ask (HVM/init (HVM/at #2 lam) bod)
  ret #Pair{ vars #RTerm{ #LAM lam } }
}
| p #App{arg ret} host vars = do HVM {
  ask app             = (HVM/alloc-node #3)
  ask #Pair{vars arg} = (HVM/inject-term #Pos arg #Some{(HVM/at #1 app)} vars)
  ask #Pair{vars ret} = (HVM/inject-term #Neg ret #Some{(HVM/at #2 app)} vars)
  ask (HVM/init (HVM/at #1 app) arg)
  ask (HVM/init (HVM/at #2 app) ret)
  ret #Pair{ vars #RTerm{ #APP app } }
}
| p #Sup{tm1 tm2} host vars = do HVM {
  ask sup             = (HVM/alloc-node #3)
  ask #Pair{vars tm1} = (HVM/inject-term #Pos tm1 #Some{(HVM/at #1 sup)} vars)
  ask #Pair{vars tm2} = (HVM/inject-term #Pos tm2 #Some{(HVM/at #2 sup)} vars)
  ask (HVM/init (HVM/at #1 sup) tm1)
  ask (HVM/init (HVM/at #2 sup) tm2)
  ret #Pair{ vars #RTerm{ #SUP sup } }
}
| p #Dup{dp1 dp2} host vars = do HVM {
  ask dup             = (HVM/alloc-node #3)
  ask #Pair{vars dp1} = (HVM/inject-term #Neg dp1 #Some{(HVM/at #1 dup)} vars)
  ask #Pair{vars dp2} = (HVM/inject-term #Neg dp2 #Some{(HVM/at #2 dup)} vars)
  ask (HVM/init (HVM/at #1 dup) dp1)
  ask (HVM/init (HVM/at #2 dup) dp2)
  ret #Pair{ vars #RTerm{ #DUP dup } }
}
| p #Var{uid} #None vars = λnet #None
| p #Var{uid} #Some{host} vars = 
  let #Pair{vars got} = (BinMap/swap _ vars uid #Some{host})
  match got {
    #None: do HVM { ret #Pair{ vars #RTerm{ #NUL #E } } }
    #Some{neg_host}: do HVM { ret #Pair{ vars #RTerm{ #VAR neg_host } } }
  }
| p #Sub{uid} #None vars = λnet #None
| p #Sub{uid} #Some{host} vars = 
  let #Pair{vars got} = (BinMap/swap _ vars uid #Some{host})
  match got {
    #None: do HVM { ret #Pair{ vars #RTerm{ #SUB host } } }
    #Some{pos_host}: do HVM {
      ask (HVM/set pos_host (#RTerm{ #VAR host }))
      ret #Pair{ vars #RTerm{ #SUB host } }
    }
  }
| p #Nul host vars = do HVM {
  ret #Pair{ vars #RTerm{ #NUL #E } }
}
| p #Era host vars = do HVM {
  ret #Pair{ vars #RTerm{ #ERA #E } }
}

HVM/inject-redex : HVM/CDex -> HVM/VarMap -> (HVM HVM/VarMap)
| redex vars = do HVM {
  let #Pair{neg pos}  = redex
  ask #Pair{vars neg} = (HVM/inject-term #Neg neg #None vars)
  ask #Pair{vars pos} = (HVM/inject-term #Pos pos #None vars)
  ask (HVM/push-redex #Pair{neg pos})
  ret vars
}

HVM/inject-net : HVM/CNet -> HVM/VarMap -> (HVM (Pair HVM/VarMap HVM/RTerm))
| net vars = do HVM {
  let #Net{rot bag} = net
  ask #Pair{vars rot} = (HVM/inject-term #Pos rot #Some{#E} vars)
  ask vars = for dex in bag {
    (HVM/inject-redex dex vars)
  }
  ret #Pair{ vars rot }
}

HVM/do-inject-net : HVM/CNet -> (HVM HVM/RTerm)
| net = do HVM {
  ask #Pair{x rot} = (HVM/inject-net net (BinMap/new _))
  ret rot
}

// Recovery
// --------

HVM/recover-var : Bits -> HVM/RTerm -> (HVM (HVM/CTerm #Pos))
| var #RTerm{#ERA loc} = λnet #None
| var #RTerm{#APP loc} = λnet #None
| var #RTerm{#DUP loc} = λnet #None
| var #RTerm{#VAR loc} = (HVM/recover-term #Pos (#RTerm{ #VAR loc }))
| var #RTerm{#NUL loc} = (HVM/recover-term #Pos (#RTerm{ #NUL loc }))
| var #RTerm{#LAM loc} = (HVM/recover-term #Pos (#RTerm{ #LAM loc }))
| var #RTerm{#SUP loc} = (HVM/recover-term #Pos (#RTerm{ #SUP loc }))
| var #RTerm{#SUB loc} = if (Bits/eq var loc) {
  do HVM { ret #Var{loc} }
} else {
  (HVM/recover-term #Pos (#RTerm{ #SUB loc }))
}

HVM/recover-sub : Bits -> HVM/RTerm -> (HVM (HVM/CTerm #Neg))
| sub #RTerm{#NUL loc} = λnet #None
| sub #RTerm{#LAM loc} = λnet #None
| sub #RTerm{#SUP loc} = λnet #None
| sub #RTerm{#VAR loc} = (HVM/recover-term #Neg (#RTerm{ #VAR loc }))
| sub #RTerm{#ERA loc} = (HVM/recover-term #Neg (#RTerm{ #ERA loc }))
| sub #RTerm{#APP loc} = (HVM/recover-term #Neg (#RTerm{ #APP loc }))
| sub #RTerm{#DUP loc} = (HVM/recover-term #Neg (#RTerm{ #DUP loc }))
| sub #RTerm{#SUB loc} = if (Bits/eq sub loc) {
  do HVM { ret #Sub{loc} }
} else {
  (HVM/recover-term #Neg (#RTerm{ #SUB loc }))
}

HVM/recover-term : ∀(p: HVM/CPol) ∀(term: HVM/RTerm) (HVM (HVM/CTerm p))
| #Pos #RTerm{#NUL loc} = do HVM {
  ret #Nul
}
| #Pos #RTerm{#VAR loc} = do HVM {
  ask got = (HVM/get loc)
  (HVM/recover-var loc got)
}
| #Pos #RTerm{#LAM loc} = do HVM {
  ask var = (HVM/get (HVM/at #1 loc))
  ask bod = (HVM/get (HVM/at #2 loc))
  ask var = (HVM/recover-term #Neg var)
  ask bod = (HVM/recover-term #Pos bod)
  ret #Lam{var bod}
}
| #Pos #RTerm{#SUP loc} = do HVM {
  ask tm1 = (HVM/get (HVM/at #1 loc))
  ask tm2 = (HVM/get (HVM/at #2 loc))
  ask tm1 = (HVM/recover-term #Pos tm1)
  ask tm2 = (HVM/recover-term #Pos tm2)
  ret #Sup{tm1 tm2}
}
| #Pos #RTerm{#SUB loc} = λnet #None
| #Pos #RTerm{#ERA loc} = λnet #None
| #Pos #RTerm{#APP loc} = λnet #None
| #Pos #RTerm{#DUP loc} = λnet #None
| #Neg #RTerm{#ERA loc} = do HVM { ret #Era }
| #Neg #RTerm{#SUB loc} = do HVM {
  ask got = (HVM/get loc)
  (HVM/recover-sub loc got)
}
| #Neg #RTerm{#APP loc} = do HVM {
  ask arg = (HVM/get (HVM/at #1 loc))
  ask ret = (HVM/get (HVM/at #2 loc))
  ask arg = (HVM/recover-term #Pos arg)
  ask ret = (HVM/recover-term #Neg ret)
  ret #App{arg ret}
}
| #Neg #RTerm{#DUP loc} = do HVM {
  ask dp1 = (HVM/get (HVM/at #1 loc))
  ask dp2 = (HVM/get (HVM/at #2 loc))
  ask dp1 = (HVM/recover-term #Neg dp1)
  ask dp2 = (HVM/recover-term #Neg dp2)
  ret #Dup{dp1 dp2}
}
| #Neg #RTerm{#VAR loc} = λnet #None
| #Neg #RTerm{#NUL loc} = λnet #None
| #Neg #RTerm{#LAM loc} = λnet #None
| #Neg #RTerm{#SUP loc} = λnet #None

HVM/recover-bag : (List HVM/RDex) -> (HVM HVM/CBag)
| #Nil = do HVM {
  ret #Nil
}
| #Cons{#Pair{neg pos} rest} = do HVM {
  ask neg  = (HVM/recover-term #Neg neg)
  ask pos  = (HVM/recover-term #Pos pos)
  ask rest = (HVM/recover-bag rest)
  ret #Cons{ #Pair{neg pos} rest }
}

HVM/recover-net : HVM/RNet -> (HVM HVM/CNet)
= λnet do HVM {
  ask rot = HVM/get-rrot
  ask bag = HVM/get-rbag
  ask rot = (HVM/recover-term #Pos rot)
  let val = (BinMap/values HVM/RDex bag)
  ask bag = (HVM/recover-bag val)
  ret #Net{ rot bag }
}

// Running
// -------

HVM/boot : HVM/CNet -> (HVM Unit)
= λnet do HVM {
  ask rot = (HVM/do-inject-net net)
  ask (HVM/init #E rot)
  ret #Unit
}

HVM/run : ∀(A: *) (HVM A) -> (Maybe A)
= λA λhvm match (hvm HVM/RNet/new) {
  #None: #None
  #Some: λ{ #Pair{net x}: #Some{x} }
}

// Showing
// -------

HVM/CTerm/to-string : ∀(p: HVM/CPol) (HVM/CTerm p) -> String
| #Pos #Var{uid}     = (String/join "" ["+" (U32/to-string (Bits/to-u32 uid))])
| #Pos #Sub{uid}     = #void
| #Pos #Nul          = "+*"
| #Pos #Era          = #void
| #Pos #Lam{var bod} = (String/join "" ["+(" (HVM/CTerm/to-string #Neg var) " " (HVM/CTerm/to-string #Pos bod) ")"])
| #Pos #App{arg ret} = #void
| #Pos #Sup{tm1 tm2} = (String/join "" ["+{" (HVM/CTerm/to-string #Pos tm1) " " (HVM/CTerm/to-string #Pos tm2) "}"])
| #Pos #Dup{dp1 dp2} = #void
| #Neg #Var{uid}     = #void
| #Neg #Sub{uid}     = (String/join "" ["-" (U32/to-string (Bits/to-u32 uid))])
| #Neg #Nul          = #void
| #Neg #Era          = "-*"
| #Neg #Lam{var bod} = #void
| #Neg #App{arg ret} = (String/join "" ["-(" (HVM/CTerm/to-string #Pos arg) " " (HVM/CTerm/to-string #Neg ret) ")"])
| #Neg #Sup{tm1 tm2} = #void
| #Neg #Dup{dp1 dp2} = (String/join "" ["-{" (HVM/CTerm/to-string #Neg dp1) " " (HVM/CTerm/to-string #Neg dp2) "}"])

HVM/CBag/to-string : HVM/CBag -> String
| #Nil                       = ""
| #Cons{#Pair{neg pos} rest} = (String/join "" ["\n& " (HVM/CTerm/to-string #Neg neg) " ~ " (HVM/CTerm/to-string #Pos pos) (HVM/CBag/to-string rest)])

HVM/CNet/to-string : HVM/CNet -> String
| #Net{rot bag} = (String/join "" [(HVM/CTerm/to-string #Pos rot) (HVM/CBag/to-string bag)])

HVM/RLoc/to-string : Bits -> String
| loc = (String/pad-left #4 '0' (U32/to-string (Bits/to-u32 loc)))

HVM/RTerm/to-string : HVM/RTerm -> String 
| #RTerm{#VAR loc} = (String/join "" ["VAR:" (HVM/RLoc/to-string loc)])
| #RTerm{#SUB loc} = (String/join "" ["SUB:" (HVM/RLoc/to-string loc)])
| #RTerm{#NUL loc} = (String/join "" ["NUL:" (HVM/RLoc/to-string loc)])
| #RTerm{#ERA loc} = (String/join "" ["ERA:" (HVM/RLoc/to-string loc)])
| #RTerm{#LAM loc} = (String/join "" ["LAM:" (HVM/RLoc/to-string loc)])
| #RTerm{#APP loc} = (String/join "" ["APP:" (HVM/RLoc/to-string loc)])
| #RTerm{#SUP loc} = (String/join "" ["SUP:" (HVM/RLoc/to-string loc)])
| #RTerm{#DUP loc} = (String/join "" ["DUP:" (HVM/RLoc/to-string loc)])

HVM/RMem/to-string : HVM/RMem -> String
| mem = (List/fold _ (BinMap/to-list _ mem) _ "" (λkv λtxt
  let #Pair{k v} = kv
  let addr       = (String/pad-left #4 '0' (U32/to-string (Bits/to-u32 k)))
  let term       = (HVM/RTerm/to-string v)
  (String/join "" [addr " → " term "\n" txt])
))

HVM/RDex/to-string : HVM/RDex -> String
| #Pair{p1 p2} = (String/join "" [(HVM/RTerm/to-string p1) " ~ " (HVM/RTerm/to-string p2)])

HVM/RBag/to-string : HVM/RBag -> String
| bag = (List/fold _ (BinMap/to-list _ bag) _ "" (λkv λtxt
  let #Pair{k v} = kv
  let addr       = (String/pad-left #4 '0' (U32/to-string (Bits/to-u32 k)))
  let dex        = (HVM/RDex/to-string v)
  (String/join "" [addr " → " dex "\n" txt])
))

// RNet/to-string

HVM/RNet/to-string : HVM/RNet -> String
| #RNet{bag_buf bag_len bag_pop mem_buf mem_len} = 
  (String/join "" ["MEM:\n" (HVM/RMem/to-string mem_buf) "BAG:\n" (HVM/RBag/to-string bag_buf)])

// Parser
// ------

HVM/parse-term : ∀(p: HVM/CPol) (Parser (HVM/CTerm p))
| #Pos = do Parser {
  ask Parser/skip-trivia
  ask text = Parser/get-input
  ask head = Parser/peek-one
  when (Maybe/eq-with _ U32/eq) head {
    #Some{'('} : do Parser {
      ask (Parser/consume "(")
      ask text = Parser/get-input
      ask var = (HVM/parse-term #Neg)
      ask bod = (HVM/parse-term #Pos)
      ask (Parser/consume ")")
      ret #Lam { var bod }
    }
    #Some{'{'} : do Parser {
      ask (Parser/consume "{")
      ask tm1 = (HVM/parse-term #Pos)
      ask tm2 = (HVM/parse-term #Pos)
      ask (Parser/consume "}")
      ret #Sup { tm1 tm2 }
    }
    #Some{'*'} : do Parser {
      ask (Parser/consume "*")
      ret #Nul
    }
    _ : do Parser {
      ask name = Parser/parse-name
      ret #Var { (String/to-bits name) }
    }
  }
}
| #Neg = do Parser {
  ask Parser/skip-trivia
  ask head = Parser/peek-one
  when (Maybe/eq-with _ U32/eq) head {
    #Some{'('} : do Parser {
      ask (Parser/consume "(")
      ask arg = (HVM/parse-term #Pos)
      ask ret = (HVM/parse-term #Neg)
      ask (Parser/consume ")")
      ret #App { arg ret }
    }
    #Some{'{'} : do Parser {
      ask (Parser/consume "{")
      ask dp1 = (HVM/parse-term #Neg)
      ask dp2 = (HVM/parse-term #Neg)
      ask (Parser/consume "}")
      ret #Dup { dp1 dp2 }
    }
    #Some{'*'} : do Parser {
      ask (Parser/consume "*")
      ret #Era
    }
    _ : do Parser {
      ask name = Parser/parse-name
      ret #Sub { (String/to-bits name) }
    }
  }
}

HVM/parse-bag : (Parser HVM/CBag)
= do Parser {
  ask Parser/skip-trivia
  ask head = Parser/peek-one
  when (Maybe/eq-with _ U32/eq) head {
    #Some{'&'} : do Parser {
      ask (Parser/consume "&")
      ask neg = (HVM/parse-term #Neg)
      ask Parser/skip-trivia
      ask (Parser/consume "~")
      ask pos = (HVM/parse-term #Pos)
      ask rest = HVM/parse-bag
      ret #Cons{ #Pair{neg pos} rest }
    }
    _ : do Parser {
      ret #Nil
    }
  }
}

HVM/parse-net : (Parser HVM/CNet)
= do Parser {
  ask rot = (HVM/parse-term #Pos)
  ask bag = HVM/parse-bag
  ret #Net{ rot bag }
}

HVM/do-parse-net : String -> HVM/CNet
= λcode (Maybe/run _ HVM/CNet/new (Parser/run _ HVM/parse-net code))

// Linking
// -------

// FIXME: not working on current flattener

//HVM/link : HVM/RTerm -> HVM/RTerm -> (HVM Unit)
//| #RTerm{#SUB l} b = do HVM { ask x = (HVM/swap l b) (HVM/link-sub l x) }
//| a #RTerm{#VAR l} = do HVM { ask x = (HVM/swap l a) (HVM/link-var l x) }
//| a b              = do HVM { ask (HVM/push-redex #Pair{a b}) ret #Unit }

//HVM/link-sub : Bits -> (Maybe HVM/RTerm) -> (HVM Unit)
//| l #Some{#RTerm{#SUB _}} = do HVM { ret #Unit }
//| l #Some{a}              = do HVM { ask b = (HVM/take l) (HVM/link a b) }
//| l #None                 = do HVM { ret #Unit }

//HVM/link-var : Bits -> (Maybe HVM/RTerm) -> (HVM Unit)
//| l #Some{#RTerm{#SUB _}} = do HVM { ret #Unit }
//| l #Some{b}              = do HVM { ask a = (HVM/take l) (HVM/link a b) }
//| l #None                 = do HVM { ret #Unit }

HVM/link : HVM/RTerm -> HVM/RTerm -> (HVM Unit)
| a b =
  //log #LINK{a b}
  match a {
    #RTerm{at al}: match (HVM/RTag/is-sub at) { 
      #True  : do HVM { ask x = (HVM/swap al #Some{b}) (HVM/link-sub al x) }
      #False : match b {
        #RTerm{bt bl}: match (HVM/RTag/is-var bt) {
          #True  : do HVM { ask x = (HVM/swap bl #Some{a}) (HVM/link-var bl x) }
          #False : do HVM { ask (HVM/push-redex #Pair{a b}) ret #Unit }
        }
      }
    }
  }

HVM/link-sub : Bits -> (Maybe HVM/RTerm) -> (HVM Unit)
| l #None    = do HVM { ret #Unit }
| l #Some{a} = match a {
  #RTerm{at al}: match (HVM/RTag/is-sub at) {
    #True  : do HVM { ret #Unit }
    #False : do HVM { ask b = (HVM/take l) (HVM/link a b) }
  }
}

HVM/link-var : Bits -> (Maybe HVM/RTerm) -> (HVM Unit)
| l #None    = do HVM { ret #Unit }
| l #Some{b} = match b {
  #RTerm{bt bl}: match (HVM/RTag/is-sub bt) {
    #True  : do HVM { ret #Unit }
    #False : do HVM { ask a = (HVM/take l) (HVM/link a b) }
  }
}

// Interaction
// -----------

HVM/interact : HVM/RTerm -> HVM/RTerm -> (HVM Unit)
| #RTerm{at al} #RTerm{bt bl} = (HVM/interact/go at al bt bl)

HVM/interact/go : HVM/RTag -> HVM/RLoc -> HVM/RTag -> HVM/RLoc -> (HVM Unit)
| #APP app #LAM lam =
  log "APP-LAM"
  do HVM {
    ask arg = (HVM/take (HVM/at #1 app))
    ask ret = (HVM/take (HVM/at #2 app))
    ask var = (HVM/take (HVM/at #1 lam))
    ask bod = (HVM/take (HVM/at #2 lam))
    ask (HVM/link var arg)
    ask (HVM/link ret bod)
    ret #Unit
  }
| #APP app #SUP sup =
  log "APP-SUP"
  do HVM {
    ask arg = (HVM/take (HVM/at #1 app))
    ask ret = (HVM/take (HVM/at #2 app))
    ask tm1 = (HVM/take (HVM/at #1 sup))
    ask tm2 = (HVM/take (HVM/at #2 sup))
    ask dp1 = (HVM/alloc-node #3)
    ask dp2 = (HVM/alloc-node #3)
    ask cn1 = (HVM/alloc-node #3)
    ask cn2 = (HVM/alloc-node #3)
    ask (HVM/set (HVM/at #1 dp1) (#RTerm{ #SUB (HVM/at #1 dp1) }))
    ask (HVM/set (HVM/at #2 dp1) (#RTerm{ #SUB (HVM/at #2 dp1) }))
    ask (HVM/set (HVM/at #1 dp2) (#RTerm{ #VAR (HVM/at #2 cn1) }))
    ask (HVM/set (HVM/at #2 dp2) (#RTerm{ #VAR (HVM/at #2 cn2) }))
    ask (HVM/set (HVM/at #1 cn1) (#RTerm{ #VAR (HVM/at #1 dp1) }))
    ask (HVM/set (HVM/at #2 cn1) (#RTerm{ #SUB (HVM/at #2 cn1) }))
    ask (HVM/set (HVM/at #1 cn2) (#RTerm{ #VAR (HVM/at #2 dp1) }))
    ask (HVM/set (HVM/at #2 cn2) (#RTerm{ #SUB (HVM/at #2 cn2) }))
    ask (HVM/link (#RTerm{ #DUP dp1 }) arg)
    ask (HVM/link ret (#RTerm{ #SUP dp2 }))
    ask (HVM/link (#RTerm{ #APP cn1 }) tm1)
    ask (HVM/link (#RTerm{ #APP cn2 }) tm2)
    ret #Unit
  }
| #APP app #NUL nul =
  log "APP-NUL"
  do HVM {
    ask arg = (HVM/take (HVM/at #1 app))
    ask ret = (HVM/take (HVM/at #2 app))
    ask (HVM/link (#RTerm{ #ERA #E }) arg)
    ask (HVM/link ret (#RTerm{ #NUL #E }))
    ret #Unit
  }
| #DUP dup #SUP sup =
  log "DUP-SUP"
  do HVM {
    ask dp1 = (HVM/take (HVM/at #1 dup))
    ask dp2 = (HVM/take (HVM/at #2 dup))
    ask tm1 = (HVM/take (HVM/at #1 sup))
    ask tm2 = (HVM/take (HVM/at #2 sup))
    ask (HVM/link dp1 tm1)
    ask (HVM/link dp2 tm2)
    ret #Unit
  }
| #DUP dup #LAM lam =
  log "DUP-LAM"
  do HVM {
    ask dp1 = (HVM/take (HVM/at #1 dup))
    ask dp2 = (HVM/take (HVM/at #2 dup))
    ask var = (HVM/take (HVM/at #1 lam))
    ask bod = (HVM/take (HVM/at #2 lam))
    ask co1 = (HVM/alloc-node #3)
    ask co2 = (HVM/alloc-node #3)
    ask du1 = (HVM/alloc-node #3)
    ask du2 = (HVM/alloc-node #3)
    ask (HVM/set (HVM/at #1 co1) (#RTerm{ #SUB (HVM/at #1 co1) }))
    ask (HVM/set (HVM/at #2 co1) (#RTerm{ #VAR (HVM/at #1 du2) }))
    ask (HVM/set (HVM/at #1 co2) (#RTerm{ #SUB (HVM/at #1 co2) }))
    ask (HVM/set (HVM/at #2 co2) (#RTerm{ #VAR (HVM/at #2 du2) }))
    ask (HVM/set (HVM/at #1 du1) (#RTerm{ #VAR (HVM/at #1 co1) }))
    ask (HVM/set (HVM/at #2 du1) (#RTerm{ #VAR (HVM/at #1 co2) }))
    ask (HVM/set (HVM/at #1 du2) (#RTerm{ #SUB (HVM/at #1 du2) }))
    ask (HVM/set (HVM/at #2 du2) (#RTerm{ #SUB (HVM/at #2 du2) }))
    ask (HVM/link dp1 (#RTerm{ #LAM co1 }))
    ask (HVM/link dp2 (#RTerm{ #LAM co2 }))
    ask (HVM/link var (#RTerm{ #SUP du1 }))
    ask (HVM/link (#RTerm{ #DUP du2 }) bod)
    ret #Unit
  }
| #DUP dup #NUL nul =
  log "DUP-NUL"
  do HVM {
    ask dp1 = (HVM/take (HVM/at #1 dup))
    ask dp2 = (HVM/take (HVM/at #2 dup))
    ask (HVM/link dp1 (#RTerm{ #NUL #E }))
    ask (HVM/link dp2 (#RTerm{ #NUL #E }))
    ret #Unit
  }
| #ERA era #LAM lam =
  log "ERA-LAM"
  do HVM {
    ask var = (HVM/take (HVM/at #1 lam))
    ask bod = (HVM/take (HVM/at #2 lam))
    ask (HVM/link var (#RTerm{ #NUL #E }))
    ask (HVM/link (#RTerm{ #ERA #E }) bod)
    ret #Unit
  }
| #ERA era #SUP sup =
  log "ERA-SUP"
  do HVM {
    ask tm1 = (HVM/take (HVM/at #1 sup))
    ask tm2 = (HVM/take (HVM/at #2 sup))
    ask (HVM/link (#RTerm{ #ERA #E }) tm1)
    ask (HVM/link (#RTerm{ #ERA #E }) tm2)
    ret #Unit
  }
| #ERA era #NUL nul =
  log "ERA-NUL"
  do HVM {
    ret #Unit
  }
| at al bt bl =
  //log #NOPE{at al bt bl}
  do HVM {
    ret #Unit
  }






// Evaluation
// ----------

HVM/eval-one : (HVM Bool)
= do HVM {
  ask redex = HVM/pop-redex
  match redex {
    #Some{ab}:
      let #Pair{a b} = ab
      do HVM {
        //log #RULE{a b}
        ask (HVM/interact a b)
        ret #True
      }
    #None: do HVM {
      ret #False
    }
  }
}

HVM/eval-strict : (HVM Unit)
= do HVM {
  ask changed = HVM/eval-one
  match changed {
    #True: HVM/eval-strict
    #False: do HVM {
      ret #Unit
    }
  }
}

// Main
// ----

main
: (Maybe String/View)
= (HVM/run _ do HVM {

  // Net Source
  //use src = "e & ((d d) e) ~ ({(b c) (a b)} (a c))"
  //use src = "y & ((((* (u u)) ((v (* v)) w)) w) ((x (* x)) y)) ~ (q (s t)) & (r (s t)) ~ ({(g h) {(f g) {(e f) {(d e) {(c d) {(b c) (a b)}}}}}} (a h)) & (q r) ~ ({(o p) {(n o) {(m n) {(l m) {(k l) {(j k) (i j)}}}}}} (i p))"
  // 67 interactions
  use src = "
    o
    & ((((* (k k)) ((l (* l)) m)) m) ((n (* n)) o)) ~ (g (i j))
    & (h (i j)) ~ ({(b c) (a b)} (a c))
    & (g h) ~ ({(e f) (d e)} (d f))
  "
  // 2367 interactions (takes ~2 mins)
  //use src = "
    //ib
    //& ((((* (eb eb)) ((fb (* fb)) gb)) gb) ((hb (* hb)) ib)) ~ (ab (cb db))
    //& (bb (cb db)) ~ ({(l m) {(k l) {(j k) {(i j) {(h i) {(g h) {(f g) {(e f) {(d e) {(c d) {(b c) (a b)}}}}}}}}}}} (a m))
    //& (ab bb) ~ ({(y z) {(x y) {(w x) {(v w) {(u v) {(t u) {(s t) {(r s) {(q r) {(p q) {(o p) (n o)}}}}}}}}}}} (n z))
  //"

  // Boots Net
  ask (HVM/boot (HVM/do-parse-net src))

  // Evaluation
  //ask HVM/eval-one
  //ask HVM/eval-one
  //ask HVM/eval-one
  //ask HVM/eval-one
  //ask HVM/eval-one
  ask HVM/eval-strict

  // Gets resulting net
  ask cnet = HVM/get-cnet
  ask rnet = HVM/get-rnet

  // Logs Net and Memory
  log "[CNET]"
  log (HVM/CNet/to-string cnet)
  log ""
  log "[RNET]"
  log (HVM/RNet/to-string rnet)

  // Returns result
  ret #View{"ok"}

})

//+3
//& -(+(-5 +5) -3) ~ +(-{-(+18 -15) -(+20 -18)} +(-20 +15))
//---------------------------------------------------------
//+3
//& -{-(+18 -15) -(+20 -18)} ~ +(-5 +5)
//& -3                       ~ +(-20 +15)
//---------------------------------------------------------
//+(-20 +15)
//& -(+18 -15) ~ +(-23 +32)
//& -(+20 -18) ~ +(-26 +33)
//& -{-32 -33} ~ +{+23 +26}
//---------------------------------------------------------
//+(-20 +32)
//& -(+20 -18) ~ +(-26 +33)
//& -{-32 -33} ~ +{+18 +26}
//---------------------------------------------------------
//+(-20 +32)
//& -{-32 -33} ~ +{+33 +20}
//---------------------------------------------------------
//+(-20 +20)
