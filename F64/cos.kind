// Cosine function using Taylor series expansion.
// - x: Angle in radians.
// = Cosine of x.
// This function approximates the cosine of the given angle using the Taylor series expansion.
// With 18 iterations, we achieve a precision of approximately 14 terms.
F64/cos : F64 -> F64
| x = 
  if (F64/is_zero x) {
    1.0
  } else {
  (F64/cos_go x 18.0)
  }

// Computes cosine using Taylor series.
// - x: Angle in radians.
// - iter: Remaining iterations.
// = Approximation of cos(x).
F64/cos_go : F64 -> F64 -> F64
| x iter = 
  if (F64/is_zero iter) {
    1.0
  } else {
    let next = (/ (* (F64/exp (F64/negate 1.0) iter) (F64/exp x (* 2.0 iter))) (F64/factorial (* 2.0 iter)))
    (+  next (F64/cos_go x (- iter 1.0))) 
  }
#test: (F64/cos 0.0)                == 1.0
#test: (F64/cos 0.5235987755982988) == 0.8660254037844386
#test: (F64/cos 0.7853981633974483) == 0.7071067811865475
#test: (F64/cos 1.0471975511965976) == 0.5000000000000001                  
#test: (F64/cos 1.5707963267948966) == 0.00000000000000004600891429570038
#test: (F64/cos 2.0943951023931953) == -0.4999999999999999                 
#test: (F64/cos 2.3561944901923450) == -0.7071067811865474
#test: (F64/cos 2.6179938779914944) == -0.8660254037844387 
#test: (F64/cos 3.1415926535897930) == -1.0              
#test: (F64/cos 3.6651914291880920) == -0.8660254037844384
#test: (F64/cos 3.9269908169872414) == -0.7071067811865482 
#test: (F64/cos 4.1887902047863905) == -0.5000000000000017              
#test: (F64/cos 4.7123889803846900) == 0.0000000000000013034398129340113          
#test: (F64/cos 5.2359877559829890) == 0.5000000000000016   
#test: (F64/cos 5.4977871437821380) == 0.7071067811865486 
#test: (F64/cos 5.7595865315812870) == 0.8660254037844417 
#test: (F64/cos 6.2831853071795860) == 1.0000000000000084              