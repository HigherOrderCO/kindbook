// Applies a function to the value inside a Maybe, if it exists.
// - A: The type of the input value.
// - B: The type of the output value.
// - f: The function to apply to the value if it exists.
// - m: The input Maybe value.
// = A new Maybe value with the function applied to the inner value, if it exists.
Maybe/map : ∀(A: *) ∀(B: *) (A -> B) -> (Maybe A) -> (Maybe B)
| A B f #None        = #None
| A B f #Some{value} = #Some{(f value)}

#test: (Maybe/map Nat Nat (Nat/add #1) #None) == #None
#test: (Maybe/map Nat Nat (Nat/add #1) (#Some{#5})) == #Some{#6}
#test: (Maybe/map Bool Nat (λx (Bool/if _ x #1 #0)) (#Some{#True})) == #Some{#1}
#test: (Maybe/map Bool Nat (λx (Bool/if _ x #1 #0)) (#Some{#False})) == #Some{#0}
#test: (Maybe/map Nat Bool (Nat/is-zero) (#Some{#0})) == #Some{#True}
#test: (Maybe/map Nat Bool (Nat/is-zero) (#Some{#1})) == #Some{#False}
