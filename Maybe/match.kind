// Elimination principle for Maybe.
// - A: The type of the value inside Maybe.
// - P: A type family indexed by Maybe A.
// - none: The case for None.
// - some: The case for Some.
// - m: The Maybe value to match against.
// = A value of type (P m), determined by the structure of m.
Maybe/match
: ∀(A: *)
  ∀(P: ∀(m: (Maybe A)) *)
  ∀(none: (P #None))
  ∀(some: ∀(x: A) (P (#Some{x})))
  ∀(m: (Maybe A))
  (P m)
= λA λP λnone λsome λ{
  #None: none
  #Some: λm.value (some m.value)
}