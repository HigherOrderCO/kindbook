// Elimination principle for Maybe.
// - A: The type of the value inside Maybe.
// - P: A type family indexed by Maybe A.
// - none: The case for None.
// - some: The case for Some.
// - m: The Maybe value to match against.
// = A value of type (P m), determined by the structure of m.
Maybe/match : ∀(A: *) ∀(P: (Maybe A) -> *) (P #None) -> (∀(x: A) (P (#Some{x}))) -> ∀(m: (Maybe A)) (P m)
| A P none some #None        = none
| A P none some #Some{value} = (some value)

#test: (Maybe/match U64 (λx Bool) #True (λy #False) #None) == #True
#test: (Maybe/match U64 (λx Bool) #False (λy #True) (#Some{42})) == #True
#test: (Maybe/match U64 (λx (Maybe U64)) #None (λy (#Some{(+ y 1)})) (#Some{41})) == (#Some{42})
