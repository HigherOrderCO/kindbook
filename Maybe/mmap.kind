// Applies a monadic function to a Maybe value.
// - M: Monad type constructor.
// - m: Monad instance for M.
// - A: Input type.
// - B: Output type.
// - ma: Input Maybe value.
// - f: Monadic function to apply.
// = Monadic Maybe value after applying f.
Maybe/mmap
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  ∀(B: *)
  (Maybe A)
  -> (A -> (M B))
  -> (M (Maybe B))
| M #Monad{pure bind} A B #None        f = (pure (Maybe B) #None)
| M #Monad{pure bind} A B #Some{value} f = 
  (bind B (Maybe B) (f value) λx
  (pure (Maybe B) (#Some{x})))

#test: (Maybe/mmap Maybe Maybe/Monad U64 U64 (#Some{3}) (λx #None)) == #None
#test: (Maybe/mmap Maybe Maybe/Monad U64 U64 #None (λx (Maybe/pure U64 x))) == #Some{#None}
#test: (Maybe/mmap Maybe Maybe/Monad U64 U64 (#Some{3}) (λx (Maybe/pure U64 (+ x 1)))) == #Some{#Some{4}}
#test: (Maybe/mmap Maybe Maybe/Monad U64 Bool (#Some{0}) (λx (Maybe/pure Bool (U64/to-bool (== x 0))))) == #Some{#Some{#True}}