// Converts a BinMap to a String representation.
// - A: Value type.
// - show: Show instance for A.
// - map: The BinMap to convert.
// = String representation of the BinMap.
BinMap/to-string : ∀(A: *) ∀(show: (Show A)) (BinMap A) -> String
| A show #Leaf = "_"
| A show #Node{#None lft rgt} = 
  let lft_str = (BinMap/to-string A show lft)
  let rgt_str = (BinMap/to-string A show rgt)
  (String/append "data[" (String/append lft_str (String/append " " (String/append rgt_str "]"))))
| A show #Node{#Some{val} lft rgt} = 
  let lft_str = (BinMap/to-string A show lft)
  let rgt_str = (BinMap/to-string A show rgt)
  (String/append "#" (String/append (Show/to-string A show val) (String/append "[" (String/append lft_str (String/append " " (String/append rgt_str "]"))))))

#test: (BinMap/to-string U64 U64/Show #Leaf) == "_"
#test: (BinMap/to-string U64 U64/Show #Node{#None #Leaf #Leaf}) == "data[_ _]"
#test: (BinMap/to-string U64 U64/Show #Node{#Some{42} #Leaf #Leaf}) == "#42[_ _]"
#test: (BinMap/to-string U64 U64/Show #Node{#Some{1} #Node{#None #Leaf #Leaf} #Node{#Some{2} #Leaf #Leaf}}) == "#1[data[_ _] #2[_ _]]"