// Inverts a BinMap
// Note: This function is not guaranteed to terminate for all inputs
BinMap/invert : ∀(A: *) (BinMap A) -> (BinMap A)
| A m = match (BinMap/invert/split A m) {
  #Leaf: #Leaf
  #Node{x l r}: #Node{x (BinMap/invert A l) (BinMap/invert A r)}
}

// Inverts and splits a BinMap
BinMap/invert/split : ∀(A: *) (BinMap A) -> (BinMap A)
| A #Leaf         = #Leaf
| A #Node{x l r}  = (BinMap/invert/split/go A x (BinMap/invert/split A l) (BinMap/invert/split A r))

// Helper function for inverting and splitting a BinMap
BinMap/invert/split/go : ∀(A: *) (Maybe A) -> (BinMap A) -> (BinMap A) -> (BinMap A)
| A x #Leaf           #Leaf           = #Node{x #Leaf #Leaf}
| A x #Leaf           #Node{bx bl br} = (BinMap/invert/split/go A x (#Node{#None #Leaf #Leaf}) (#Node{bx bl br}))
| A x #Node{ax al ar} #Leaf           = (BinMap/invert/split/go A x (#Node{ax al ar}) (#Node{#None #Leaf #Leaf}))
| A x #Node{ax al ar} #Node{bx bl br} = #Node{x #Node{ax al bl} #Node{bx ar br}}

#test: (BinMap/invert Bits (BinMap/empty Bits))
    == (BinMap/empty Bits)

#test: (BinMap/invert Bits (BinMap/set Bits (BinMap/empty Bits) #E (#O{#E})))
    == (BinMap/set Bits (BinMap/empty Bits) #E (#O{#E}))

#test: (BinMap/invert Bits (BinMap/invert Bits (BinMap/set Bits (BinMap/set Bits (BinMap/empty Bits) (#O{#E}) (#I{#E})) (#I{#E}) (#O{#E}))))
    == (BinMap/set Bits (BinMap/set Bits (BinMap/empty Bits) (#O{#E}) (#I{#E})) (#I{#E}) (#O{#E}))
