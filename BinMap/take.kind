use BinMap/ as BM/
use Bits/ as BS/
use Maybe/ as M/
use BinTree/ as BT/
use Pair/ as P/

// Retrieves and removes a value from the BinMap given a key.
// - A: The type of values stored in the BinMap.
// - m: The BinMap to search in and remove from.
// - k: The Bits key to look up and remove.
// = Maybe containing a pair of the new BinMap and the value if the key existed, None otherwise.
BM/take
: ∀(A: *)
  ∀(m: (BM/BinMap A))
  ∀(k: BS/Bits)
  (M/Maybe (P/Pair (BM/BinMap A) A))
= λA λ{
  #Leaf: λk #None{}
  #Node: λval λlft λrgt λ{
		#E: 
			use none = #None{}
			use some = λs #Some{#Pair{#Node{#None{} lft rgt} s}}
			(M/match A (λx (M/Maybe (P/Pair (BM/BinMap A) A))) none some val)
		#O: λb
			(M/map 
				(P/Pair (BM/BinMap A) A) 
				(P/Pair (BM/BinMap A) A) 
				(λx (#Pair{
					(#Node{val (P/Sigma/fst (BM/BinMap A) (λx A) x) rgt}) 
					(P/Sigma/snd (BM/BinMap A) (λx A) x)}))
				(BM/take A lft b))
		#I: λb (M/map 
				(P/Pair (BM/BinMap A) A) 
				(P/Pair (BM/BinMap A) A) 
				(λx (#Pair{
					(#Node{val lft (P/Sigma/fst (BM/BinMap A) (λx A) x)}) 
					(P/Sigma/snd (BM/BinMap A) (λx A) x)}))
				(BM/take A rgt b))
	}
}
