// Performs a left-biased union of two Maps.
// Values from the first BinMap take precedence over values from the second BinMap.
// - A: The type of values in the BinMaps.
// - m1: The 1st BinMap (takes priority on conflicts).
// - m2: The 2nd BinMap.
// = A new BinMap containing all key-value pairs from both input Maps,
//   with values from m1 taking precedence when keys conflict.
BinMap/union : ∀(A: *) (BinMap A) -> (BinMap A) -> (BinMap A)
| A m1 m2 = 
  (List/foldr (Pair Bits A) (BinMap/to-list A m1)
    (BinMap A)
    m2 
    {λ{#Pair{k v}: λacc (BinMap/set A acc k v)} : (Pair Bits A) -> (BinMap A) -> (BinMap A)}
  )
