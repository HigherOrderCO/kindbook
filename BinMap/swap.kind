// Swaps a value in the BinMap for a new value, returning the old value if it existed.
// - A: Value type.
// - m: BinMap to swap in.
// - k: Bits key to swap.
// - v: New value to insert (Maybe A).
// = Pair of new BinMap and Maybe old value.
BinMap/swap : âˆ€(A: *) (BinMap A) -> Bits -> (Maybe A) -> (Pair (BinMap A) (Maybe A))
| A #Leaf        #O{b} v = let #Pair{t old} = (BinMap/swap A #Leaf b v) #Pair{#Node{#None t #Leaf} old}
| A #Leaf        #I{b} v = let #Pair{t old} = (BinMap/swap A #Leaf b v) #Pair{#Node{#None #Leaf t} old}
| A #Leaf        #E    v = #Pair{#Node{v #Leaf #Leaf} #None}
| A #Node{x l r} #O{b} v = let #Pair{l old} = (BinMap/swap A l b v) #Pair{#Node{x l r} old}
| A #Node{x l r} #I{b} v = let #Pair{r old} = (BinMap/swap A r b v) #Pair{#Node{x l r} old}
| A #Node{x l r} #E    v = #Pair{#Node{v l r} x}

#test: (BinMap/swap U64 #Leaf #E #Some{42}) == #Pair{#Node{#Some{42} #Leaf #Leaf} #None}
#test: (BinMap/swap U64 (BinMap/set U64 #Leaf #E 10) #E #Some{20}) == #Pair{#Node{#Some{20} #Leaf #Leaf} #Some{10}}
#test: (BinMap/swap U64 (BinMap/set U64 #Leaf #E 10) #E #None) == #Pair{#Node{#None #Leaf #Leaf} #Some{10}}
