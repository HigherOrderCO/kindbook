// A queue that stores a list of elements to be dequeued
// and a list of elements that have been enqueued.
// When dequeueing, if `front` is empty then `back` is reversed
// and replaces `front`.
Queue
: ∀(A: *)
  *
= λA data[]{
  #MkQueue{ front:(List A) back:(List A) } : (Queue A)
}

// Accessor for the front field
Queue/front
: ∀(A: *)
  ∀(q: (Queue A))
  (List A)
= λA λ{
  #MkQueue: λq.front λq.back q.front
}

// Accessor for the back field
Queue/back
: ∀(A: *)
  ∀(q: (Queue A))
  (List A)
= λA λ{
  #MkQueue: λq.front λq.back q.back
}