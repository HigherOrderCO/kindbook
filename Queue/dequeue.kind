// Removes and returns the first element from a queue.
// - 1st: The type of elements in the queue.
// - 2nd: The queue to dequeue from.
// = A Maybe containing a Pair of the dequeued element and the remaining queue, or None if the queue is empty.
Queue/dequeue
: ∀(A: *)
  ∀(q: (Queue A))
  (Maybe (Pair A (Queue A)))
= λA λ{
  #Queue:  λ{
		#Nil: λback
			let revb = (List/reverse A back)
			use none = #None
			use some = λhead λtail #Some{#Pair{head #Queue{tail #Nil}}}
			(List/match A (λx (Maybe (Pair A (Queue A)))) revb none some)
		#Cons: λhead λtail λback #Some{#Pair{head #Queue{tail back}}}
	} 
}
// Test: Dequeue from an empty queue
TEST_0
: ∀(A: *) (Equal (Maybe (Pair A (Queue A))) (Queue/dequeue A (#Queue{#Nil #Nil})) (#None))
= λA #Refl

// Test: Dequeue from a queue with one element in front
TEST_1
: (Equal (Maybe (Pair U64 (Queue U64))) (Queue/dequeue U64 (#Queue{#Cons{1 #Nil} #Nil})) (#Some{#Pair{1 #Queue{#Nil #Nil}}}))
= #Refl

// Test: Dequeue from a queue with multiple elements in front
TEST_2
: (Equal (Maybe (Pair U64 (Queue U64))) (Queue/dequeue U64 (#Queue{#Cons{1 #Cons{2 #Cons{3 #Nil}}} #Nil})) (#Some{#Pair{1 #Queue{#Cons{2 #Cons{3 #Nil}} #Nil}}}))
= #Refl

// Test: Dequeue from a queue with elements only in back
TEST_3
: (Equal (Maybe (Pair U64 (Queue U64))) (Queue/dequeue U64 (#Queue{#Nil #Cons{3 #Cons{2 #Cons{1 #Nil}}}})) (#Some{#Pair{1 #Queue{#Cons{2 #Cons{3 #Nil}} #Nil}}}))
= #Refl

// Test: Dequeue from a queue with elements in both front and back
TEST_4
: (Equal (Maybe (Pair U64 (Queue U64))) (Queue/dequeue U64 (#Queue{#Cons{1 #Nil} #Cons{3 #Cons{2 #Nil}}})) (#Some{#Pair{1 #Queue{#Nil #Cons{3 #Cons{2 #Nil}}}}}))
= #Refl
