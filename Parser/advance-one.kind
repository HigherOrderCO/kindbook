// Advances the parser by one character, consuming it.
// - state: The current parser state.
// = A Reply containing the updated state and the consumed character (if any).
Parser/advance-one : (Parser (Maybe Char))
= Î»state
  let #State{input index} = state
  match (String/uncons input) {
    #None: 
      #Done{#Reply{#State{input index} #None}}
    #Some{pair}:
      let head = (Pair/get-fst _ _ pair)
      let tail = (Pair/get-snd _ _ pair)
      #Done{#Reply{#State{tail #Succ{index}} #Some{head}}}
  }
// Test: Advance one character in a non-empty string
TEST_0 
: (Equal 
  (Result (Parser/Reply (Maybe Char)) Parser/Error)
  (Parser/advance-one #State{"abc" #Zero}) 
  (#Done{#Reply{#State{"bc" #1} #Some{97}}}))
= #Refl

// Test: Advance one character in an empty string
TEST_1 
: (Equal 
  (Result (Parser/Reply (Maybe Char)) Parser/Error)
  (Parser/advance-one #State{"" #Zero})
  (#Done{#Reply{#State{"" #Zero} #None}}))
= #Refl

// Test: Advance one character in a string with special characters
TEST_2 
: (Equal 
  (Result (Parser/Reply (Maybe Char)) Parser/Error)
  (Parser/advance-one #State{"!@#" #Zero}) 
  (#Done{#Reply{#State{"@#" #1} #Some{33}}}))
= #Refl