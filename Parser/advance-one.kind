// Advances the parser by one character, consuming it.
// - state: The current parser state.
// = A Reply containing the updated state and the consumed character (if any).
Parser/advance-one : (Parser/Parser (Maybe Char))
= Î»state
  let input = (Parser/State/input state)
  let index = (Parser/State/index state)
  match (String/uncons input) {
    #None: 
      let reply = (Parser/Reply/new _ state #None)
      #Done{reply}
    #Some{pair}:
      let head = (Pair/get-fst _ _ pair)
      let tail = (Pair/get-snd _ _ pair)
      let new_state = (Parser/State/new tail (#Succ{index}))
      let reply = (Parser/Reply/new _ new_state (#Some{head}))
      #Done{reply}
  }
// Test: Advance one character in a non-empty string
TEST_0 
: (Equal 
  (Parser/Parser (Maybe Char))
  (Parser/advance-one (Parser/State/new "abc" #Zero)) 
  (#Done{(#MkReply{(Parser/State/new "bc" (#Succ{#Zero})) (#Some{97})})}))
= #Refl

// Test: Advance one character in an empty string
TEST_1 
: (Equal 
  (Parser/Parser (Maybe Char))
  (Parser/advance-one (Parser/State/new "" #Zero)) 
  (#Done{(#MkReply{(Parser/State/new "" #Zero) #None})}))
= #Refl

// Test: Advance one character in a string with special characters
TEST_2 
: (Equal 
  (Parser/Parser (Maybe Char))
  (Parser/advance-one (Parser/State/new "!@#" #Zero)) 
  (#Done{(#MkReply{(Parser/State/new "@#" (#Succ{#Zero})) (#Some{33})})}))
= #Refl