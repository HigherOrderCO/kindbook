// Represents the state of a parser.
// - input: The remaining input text to be consumed.
// - index: The current parsing index.
// = A record containing the current state of parsing.
Parser/State : * = data[]{
  #MkState{
    input: String
    index: Nat
  } : Parser/State
}

// Creates a new State with the given input and initial index of zero.
// - input: The input string to be parsed.
// = A new State with the given input and index set to zero.
Parser/new_parser_state
: ∀(input: String)
  Parser/State
= λinput #MkState{
  input: input
  index: #Zero{}
}

// Helper function to get the input from a State
Parser/State/input
: ∀(s: Parser/State)
  String
= λ{
  #MkState: λs.input λs.index s.input
}

// Helper function to get the index from a State
Parser/State/index
: ∀(s: Parser/State)
  Nat
= λ{
  #MkState: λs.input λs.index s.index
}

// Helper function to create a new State
Parser/State/new
: ∀(input: String)
  ∀(index: Nat)
  Parser/State
= λinput λindex #MkState{input index}

// Test: Creating a new parser state
TEST_0 
: (Equal 
    Parser/State 
    (Parser/new_parser_state "hello") 
    (Parser/State/new "hello" #Zero))
= #Refl

// Test: Accessing State fields
TEST_1 
: (Equal 
    (Pair/Pair String Nat)
    (#Pair{
        (Parser/State/input (Parser/State/new "world" #5))
        (Parser/State/index (Parser/State/new "world" #5))})
    (#Pair{"world" #5}))
= #Refl