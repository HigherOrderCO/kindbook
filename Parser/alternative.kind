// Combines two parsers, trying the second if the first fails.
// - A: The type of the value to be parsed.
// - p: The first parser to try.
// - q: The parser to try if the first fails.
// = A new parser that succeeds if either of the input parsers succeeds.
Parser/alternative : âˆ€(A: *) (Parser A) -> (Parser A) -> (Parser A)
| A p q state with (p state)
. | #Done{r} = #Done{r}
. | #Fail{_} = (q state)


#test: (Parser/run U64 (Parser/alternative U64 (Parser/pure U64 1) (Parser/pure U64 2)) "") == #Some{1}
#test: (Parser/run U64 (Parser/alternative U64 (Parser/fail U64 "Error") (Parser/pure U64 2)) "") == #Some{2}
#test: (Parser/run U64 (Parser/alternative U64 (Parser/fail U64 "Error 1") (Parser/fail U64 "Error 2")) "") == #None
