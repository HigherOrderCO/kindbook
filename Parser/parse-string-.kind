use Parser/ as PS/
use String/ as S/
use Result/ as R/
use Equal/ as E/

// Test: Parse a normal string
T0 
: (E/Equal
  (PS/Parser S/String)
  (PS/parse-string (PS/State/new "\"abc\"" #Zero))
  (#Done{#MkReply{#MkState{[] (U32/to-nat 5)} "abc"}}))
= #Refl

// Test: Parse a string with escape character
T1 
: (E/Equal
  (PS/Parser S/String)
  (PS/parse-string (PS/State/new "\"a\\nb\"" #Zero))
  (#Done{#MkReply{#MkState{[] (U32/to-nat 6)} "a\nb"}}))
= #Refl

// Test: Parse an empty string
T2 
: (E/Equal
  (PS/Parser S/String)
  (PS/parse-string (PS/State/new "\"\"" #Zero))
  (#Done{#MkReply{#MkState{[] (U32/to-nat 2)} []}}))
= #Refl

// Test: Parse an invalid string (unclosed quote)
T3 
: (E/Equal
  (PS/Parser S/String)
  (PS/parse-string (PS/State/new "\"abc" #Zero))
  (#Fail{#MkError{(U32/to-nat 4) "Unexpected end of input"}}))
= #Refl