// Helper function to accumulate parsed results.
// - A: The type of elements parsed by the given parser.
// - p: The parser to be repeatedly applied.
// - acc: The accumulator list of already parsed elements.
// = A parser that returns the final list of all parsed elements.
Parser/parse-many-go
: ∀(A: *)
  ∀(p: (Parser A))
  ∀(acc:( List A))
  (Parser (List A))
= λA λp λacc λstate
  match (p state) {
    #Done: λreply
      let #Reply{state value} = reply
      use new_acc = #Cons{value acc}
      (Parser/parse-many-go A p new_acc state)
    #Fail: λe
      #Done{
        #Reply{
          state: state
          value: (List/reverse A acc)
        }
      }
  }

// Parses as many occurrences of the given parser as possible.
// - A: The type of elements parsed by the given parser.
// - p: The parser to be repeatedly applied.
// = A parser that returns a list of all successfully parsed elements.
Parser/parse-many
: ∀(A: *)
  ∀(p: (Parser A))
  (Parser (List A))
= λA λp (Parser/parse-many-go A p #Nil)