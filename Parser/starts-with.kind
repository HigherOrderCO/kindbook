// Checks if the input starts with a given string.
// - prefix: The prefix string to check for.
// = A Parser that returns True if the input starts with the given string, False otherwise.
//   Does not consume any input.
Parser/starts-with
: ∀(prefix: String)
  (Parser/Parser Bool)
= λprefix λs
  let input = (Parser/State/input s)
  let result = (String/starts-with input prefix)
  #Done{
    #MkReply{
      state: s
      value: result
    }
  }
// Test: Starts with matching prefix
TEST_0 : (Equal
  (Result (Parser/Reply Bool) Parser/Error)
  (Parser/starts-with "hello" (Parser/State/new "hello world" #0))
  #Done{#MkReply{
    state: (Parser/State/new "hello world" #0)
    value: #True
  }}
) = #Refl

// // Test: Starts with non-matching prefix
// T1 : (Equal
//   (Result (Parser/Reply Bool) Parser/Error)
//   (Parser/starts-with "hello" (Parser/State/new "goodbye world" #0))
//   #Done{#MkReply{
//     state: (Parser/State/new "goodbye world" #0)
//     value: #False
//   }}
// ) = #Refl

// Test: Starts with empty string
TEST_2 : (Equal
  (Result (Parser/Reply Bool) Parser/Error)
  (Parser/starts-with "" (Parser/State/new "any string" #0))
  #Done{#MkReply{
    state: (Parser/State/new "any string" #0)
    value: #True
  }}
) = #Refl