use Parser/ as P/
use Maybe/ as M/
use Nat/ as N/
use Char/ as C/
use List/ as L/
use String/ as S/
use Result/ as R/

// Advances the parser by a specified number of characters and returns the consumed characters.
// - count: The number of characters to advance.
// = A Parser that returns a Maybe String containing the consumed characters.
P/advance-many
: ∀(count: N/Nat)
  (P/Parser (M/Maybe S/String))
= λcount λstate
  let input     = (P/State/input state)
  let chars     = input
  let consumed  = (L/take C/Char count chars)
  let new-index = (N/add (P/State/index state) count)
  let new-input = (S/drop count chars)
  // #Done{#MkReply{#MkState{new-input new-index} #Some{consumed}}}
  ?a

