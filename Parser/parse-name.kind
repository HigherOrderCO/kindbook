// Checks if a character is valid for a name.
// - c: The character to check.
// = A boolean indicating whether the character is valid for a name (alphanumeric, underscore, hyphen, or dot).
Pair/is-name-char : Char/Char -> Bool/Bool
= λc
  (Bool/or (Char/is-alpha c)
  (Bool/or (Char/is-digit c)
  (Bool/or (Char/eq c 95) // '_'
  (Bool/or (Char/eq c 45) // '-'
        (Char/eq c 46))))) // '.'

// Parses a name from the input.
// = A Parser that returns a String containing the parsed name, or fails if no valid name is found.
Pair/parse-name : (Pair/Parser String/String)
= λs
  let name = (Pair/take-while Pair/is-name-char s)
  match name {
    #Done: λr
      let value = (Pair/Reply/value String/String r)
      match value {
        #Nil: (Pair/fail _ "Expected a name" s)
        #Cons: λhead λtail #Done{r}
      }
    #Fail: λe #Fail{e}
  }
