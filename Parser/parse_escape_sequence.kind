// Parses an escape sequence.
// = Parsed escaped character.
Parser/parse_escape_sequence : (Parser Char)
= do Parser {
  ask mc = (Parser/advance_one)
  match mc {
    #None: (Parser/fail Char "unexpected_eof")
    #Some{c}: when Char/eq c {
      'n'  : (Parser/pure Char '\n')
      'r'  : (Parser/pure Char '\r')
      't'  : (Parser/pure Char '\t')
      '\\' : (Parser/pure Char '\\')
      '\'' : (Parser/pure Char '\'')
      '\"' : (Parser/pure Char '\"')
      'u'  : Parser/parse_unicode_escape
    } else {
      (Parser/fail Char (String/append "invalid_escape_char:" (String/from_char c)))
    }
  }
}

#test: (Parser/run Char Parser/parse_escape_sequence "n") == #Some{'\n'}
#test: (Parser/run Char Parser/parse_escape_sequence "t") == #Some{'\t'}
#test: (Parser/run Char Parser/parse_escape_sequence "\\") == #Some{'\\'}
#test: (Parser/run Char Parser/parse_escape_sequence "\"") == #Some{'\"'}
#test: (Parser/run Char Parser/parse_escape_sequence "x") == #None
#test: (Parser/run Char Parser/parse_escape_sequence "") == #None
