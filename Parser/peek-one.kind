use Parser/ as PS/
use Maybe/ as M/
use Result/ as R/
use String/ as S/

// Peeks at the next character in the input without consuming it.
// - s: The current parser state.
// = A Reply containing the current state and the next character (if any).
PS/peek-one : (PS/Parser (M/Maybe U32))
= Î»s
  let next_char = (S/head (PS/State/input s))
  #Done{
    #MkReply{
      state: s
      value: next_char
    }
  }

//TEST//

use Parser/ as PS/
use Result/ as R/
use Maybe/ as M/
use Equal/ as E/
use String/ as S/

// Test: Peek one character from a non-empty string
T0
: (E/Equal
    (R/Result (PS/Reply (M/Maybe U32)) PS/Error)
    (PS/peek-one (PS/State/new "abc" #Zero))
    (#Done{
      #MkReply{
        state: (PS/State/new "abc" #Zero)
        value: (#Some{'a'})
      }
    })
  )
= #Refl

// Test: Peek one character from an empty string
T1
: (E/Equal
    (R/Result (PS/Reply (M/Maybe U32)) PS/Error)
    (PS/peek-one (PS/State/new (S/from-list []) #Zero))
    (#Done{
      #MkReply{
        state: (PS/State/new (S/from-list []) #Zero)
        value: #None
      }
    })
  )
= #Refl

// Test: Peek one character from a string with special characters
T2
: (E/Equal
    (R/Result (PS/Reply (M/Maybe U32)) PS/Error)
    (PS/peek-one (PS/State/new "!@#" #Zero))
    (#Done{
      #MkReply{
        state: (PS/State/new "!@#" #Zero)
        value: (#Some{'!'})
      }
    })
  )
= #Refl