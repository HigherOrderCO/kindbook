// Binds two parsers together
// - A: The type of the first parser's result
// - B: The type of the second parser's result
// - p: The first parser
// - f: A function that takes the result of the first parser and returns a new parser
// = A new parser that combines the results of both parsers
Parser/Monad/bind
: ∀(A: *)
  ∀(B: *)
  ∀(p: (Parser A))
  ∀(f: ∀(a: A) (Parser B))
  (Parser B)
= λA λB λp λf λs
  match (p s) {
    #Done: λr
      let #Reply{state value} = r
      (f value state)
    #Fail: λe #Fail{e}
  }

// Sequencing of parsers, discarding the result of the first parser
// - A: The type of the first parser's result (discarded)
// - B: The type of the second parser's result
// - p: The first parser (result discarded)
// - q: The second parser
// = A new parser that runs both parsers in sequence, returning the result of the second
Parser/Monad/seq
: ∀(A: *)
  ∀(B: *)
  ∀(p: (Parser A))
  ∀(q: (Parser B))
  (Parser B)
= λA λB λp λq
  (Parser/Monad/bind A B p (λx q))
