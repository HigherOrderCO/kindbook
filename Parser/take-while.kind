// Consumes characters from the input as long as they satisfy the given predicate.
// - pred: Function that takes a Char and returns a Bool, used as the predicate.
// = Parser that returns a String containing the consumed characters.
Parser/take-while : (Char -> Bool) -> (Parser String)
| pred = Î»state
  let #State{inp idx} = state
  let consumed        = (List/take-while Char pred inp)
  let #Pair{cs count} = (String/length-got consumed)
  let new-idx         = (Nat/add idx count)
  let new-inp         = (String/drop count inp)
  #Done{#Reply{#State{new-inp new-idx} cs}}

#test: (Parser/take-while Char/is-alpha (#State{"abcDEF123" #0})) == #Done{#Reply{#State{"123" #6} "abcDEF"}}
#test: (Parser/take-while Char/is-alpha (#State{"" #0})) == #Done{#Reply{#State{"" #0} ""}}
#test: (Parser/take-while Char/is-alpha (#State{"k123abc" #0})) == #Done{#Reply{#State{"123abc" #1} "k"}}
