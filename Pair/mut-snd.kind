// Applies a function to the second element of a pair.
// This function creates a new pair with the first element unchanged and the second element transformed.
// 1st: The type of the first element in the pair.
// 2nd: The type of the second element in the input pair.
// 3rd: The type of the second element in the output pair.
// 4th: Function to apply to the second element.
// 5th: Input pair.
// = A new pair with the first element unchanged and the second element transformed.
Pair/mut-snd
: ∀(A: *)
  ∀(B: *)
  ∀(C: *)
  ∀(f: ∀(b: B) C)
  ∀(pair: (Pair/Pair A B))
  (Pair/Pair A C)
= λA λB λC λf λpair
  let x = (Pair/Sigma/fst _ _ pair)
  let y = (Pair/Sigma/snd _ _ pair)
  #Pair{ x (f y) }