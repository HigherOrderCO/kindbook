use Pair/ as P/

// Retrieves the second component of a dependent pair.
// - 1st: The type of the first component.
// - 2nd: The type family for the second component.
// - 3rd: The dependent pair.
// = The second component of the pair.
P/get-snd
: ∀(A: *)
  ∀(B: ∀(a: A) *)
  ∀(pair: (P/Sigma A B))
  (B (P/Sigma/fst A B pair))
= λA λB λ{
  #Pair: λpair.fst λpair.snd pair.snd
}
