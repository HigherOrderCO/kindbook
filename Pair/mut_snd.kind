// Mutates the second component of a pair.
// - A: First type.
// - B: Second type.
// - C: New second type.
// - f: Function to apply to second component.
// - p: Input pair.
// = New pair with second component transformed.
Pair/mut_snd : ∀(A: *) ∀(B: *) ∀(C: *) (B -> C) -> (Pair A B) -> (Pair A C)
| A B C f #Pair{fst snd} = #Pair{fst (f snd)}

#test: (Pair/mut_snd Nat Nat Nat (λx #Succ{x}) #Pair{#2 #3}) == #Pair{#2 #4}
#test: (Pair/mut_snd String Bool Bool (λx x) #Pair{"test" #False}) == #Pair{"test" #False}
#test: (Pair/mut_snd Nat Bool String Bool/to_string #Pair{#3 #True}) == #Pair{#3 "True"}