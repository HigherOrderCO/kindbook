// Retrieves the first component of a dependent pair.
// - A: The type of the first component.
// - B: The type family for the second component.
// - p: The dependent pair.
// = The first component of the pair.
Pair/get-fst : ∀(A: *) ∀(B: ∀(a: A) *) ∀(pair: (Pair/Sigma A B)) A
| A B #Pair{fst snd} = fst

// Test: Get first component of a simple pair
TEST_0
: (Equal/Equal Nat/Nat (Pair/get-fst Nat/Nat (λx Nat/Nat) (#Pair{#5 #10})) #5)
= #Refl

// Test: Get first component of a dependent pair
TEST_1
: (Equal/Equal (Pair/Pair Nat/Nat Nat/Nat) (Pair/get-fst (Pair/Sigma Nat/Nat (λx Nat/Nat)) (λx String/String) (#Pair{#Pair{#3 #4} "pair"})) #Pair{#3 #4})
= #Refl

// Test: Get first component of a pair with different types
TEST_2
: (Equal/Equal String/String (Pair/get-fst String/String (λx Nat/Nat) (#Pair{"hello" #42})) "hello")
= #Refl
