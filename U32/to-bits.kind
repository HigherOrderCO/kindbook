// Converts a U32 value to its binary representation as Bits.
// - n: The U32 value to convert.
// = The binary representation of the input U32 value as Bits.
U32/to-bits : U32 -> Bits
= λ{
  0: #E{}
  _: λ{
    0: #I{#E{}}
    _{pred}:
      let quotient = (U32/div (+ 2 pred) 2)
      let remainder = (U32/mod (+ 2 pred) 2)
      if (U32/to-bool remainder) {
        #I{(U32/to-bits quotient)}
      } else {
        #O{(U32/to-bits quotient)}
      }
  }
}

#test: (U32/to-bits 0) == #E
#test: (U32/to-bits 1) == #I{#E}
#test: (U32/to-bits 5) == #I{#O{#I{#E}}}
#test: (U32/to-bits 8) == #O{#O{#O{#I{#E}}}}
