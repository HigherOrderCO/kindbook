// Represents the Monoid trait for a type A
Trait/Monoid
: ∀(A: *)
  *
= λA data[]{
  #Monoid{
    memp: A
    mapp: ∀(x: A) ∀(y: A) A
  } : (Trait/Monoid A)
}

// Accessor for the memp field
Trait/Monoid/memp
: ∀(A: *)
  ∀(m: (Trait/Monoid A))
  A
= λA λ{
  #Monoid: λm.memp λm.mapp m.memp
}

// Accessor for the mapp field
Trait/Monoid/mapp
: ∀(A: *)
  ∀(m: (Trait/Monoid A))
  ∀(x: A)
  ∀(y: A)
  A
= λA λ{
  #Monoid: λm.memp λm.mapp λx λy (m.mapp x y)
}

// Concatenates all elements in a list using the monoid operation
Trait/Monoid/concat
: ∀(A: *)
  ∀(m: (Trait/Monoid A))
  ∀(xs: (List A))
  A
= λA λm λxs
  (List/foldr _ _ (Trait/Monoid/mapp _ m) (Trait/Monoid/memp _ m) xs)
