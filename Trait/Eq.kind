// Represents the Eq trait for a type A
Trait/Eq
: ∀(A: *)
  *
= λA data[]{
  #Eq{
    eq: ∀(x: A) ∀(y: A) Bool/Bool
    neq: ∀(x: A) ∀(y: A) Bool/Bool
  } : (Trait/Eq A)
}

// Accessor for the eq field
Trait/Eq/eq
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(x: A)
  ∀(y: A)
  Bool/Bool
= λA λ{
  #Eq: λe.eq λe.neq λx λy (e.eq x y)
}

// Accessor for the neq field
Trait/Eq/neq
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(x: A)
  ∀(y: A)
  Bool/Bool
= λA λ{
  #Eq: λe.eq λe.neq λx λy (e.neq x y)
}

// Derives an Eq instance from an equality function
Trait/Eq/derive
: ∀(A: *)
  ∀(eq: ∀(x: A) ∀(y: A) Bool/Bool)
  (Trait/Eq A)
= λA λeq #Eq{
  eq: eq
  neq: λx λy (Bool/not (eq x y))
}
