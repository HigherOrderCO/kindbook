
// Joins a list of strings with a separator.
// - sep: Separator string.
// - xs: List of strings to join.
// = Single string with all inputs concatenated, separated by sep.
String/join : String -> (List String) -> String
| sep xs = (List/fold String xs String "" (String/join/go sep))

String/join/go : String -> String -> String -> String
| sep s #Nil        = s
| sep s #Cons{x xs} = (String/append (String/append s sep) #Cons{x xs})

// NOTE: this is much slower. why?
//| sep s acc = if (String/is-empty acc) { s } else { (String/append (String/append s sep) acc) }

#test: (String/join "," ["a" "b" "c"]) == "a,b,c"
#test: (String/join "" ["hello" "world"]) == "helloworld"
#test: (String/join " " ["one"]) == "one"
#test: (String/join "-" []) == ""

