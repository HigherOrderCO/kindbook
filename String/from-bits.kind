use String/ as S/
use Bits/ as BS/
use List/ as L/
use Nat/ as N/

// Converts a Bits value to a String by grouping bits into chunks of 21,
// - 1st: The input Bits value to convert.
// = A String representation of the input Bits.
S/from-bits
: ∀(bits: BS/Bits)
  S/String
= λbits
  let chunks = (BS/split-chunks #21 bits)
  let chars = (L/map BS/Bits U32 BS/to-char chunks)
  chars
  
//TEST//

use String/ as S/
use Bits/ as BS/
use Char/ as C/
use Nat/ as N/
use Equal/ as E/

// Test: Empty bits should result in an empty string
T0
: (E/Equal S/String (S/from-bits #E{}) "")
= #Refl

// Test: A single character (ASCII 'A')
T1
: (E/Equal S/String (S/from-bits (N/to-bits #65)) "A")
= #Refl

// Test: Multiple characters (ASCII 'Hello')
T2
: (E/Equal S/String (S/from-bits (S/to-bits "Hello")) "Hello")
= #Refl

// Test: Non-ASCII character (Unicode '€' symbol)
T3
: (E/Equal S/String (S/from-bits (N/to-bits #8364)) "€")
= #Refl

// Test: Mixed ASCII and non-ASCII characters
T4
: (E/Equal S/String (S/from-bits (S/to-bits "Hello€")) "Hello€")
= #Refl
