// Converts a string to a nat in the given base.
// - base: The base to use for conversion.
// - str: The string to convert.
// = A Maybe Nat with the converted number if successful, None if conversion fails.
String/to-nat-base : Nat -> String -> (Maybe Nat)
| base #Nil         = #None
| base #Cons{hd tl} = (String/to-nat-base/go base #Cons{hd tl} #0)

// Helper function for String/to-nat-base
// - base: The base to use for conversion.
// - chars: The list of characters to convert.
// - acc: The accumulator for the result.
// = A Maybe Nat with the converted number if successful, None if conversion fails.
String/to-nat-base/go : Nat -> String -> Nat -> (Maybe Nat)
| base #Nil         acc = #Some{acc}
| base #Cons{hd tl} acc =
  let digit = (Char/to-digit base hd)
  (Maybe/fold Nat (Maybe Nat) #None
    (Î»value (String/to-nat-base/go base tl (Nat/add (Nat/mul acc base) value)))
    digit)

//#test: (String/to-nat-base #10 "123") == #Some{#123}
//#test: (String/to-nat-base #16 "FF") == #Some{#255}
//#test: (String/to-nat-base #2 "1010") == #Some{#10}
//#test: (String/to-nat-base #8 "777") == #Some{#511}
//#test: (String/to-nat-base #10 "") == #None
//#test: (String/to-nat-base #16 "GG") == #None
