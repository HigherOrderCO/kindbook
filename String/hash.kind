// Computes a hash value for a given string using FxHash64 algorithm.
// - 1st: The input string to be hashed.
// = A Bits value representing the computed hash of the input string.
String/hash : String -> Bits
| str = (U64/to-bits (List/foldr _ _ fxhash-step 0 str))

// Performs a single step of the FxHash64 algorithm.
// - char: The character to be incorporated into the hash.
// - hash: The current hash value.
// = The updated hash value after processing the character.
fxhash-step : U64 -> U64 -> U64
| char hash =
  let seed = 5871781006564002453 // 0x517cc1b727220a95u64
  let hash = (U64/lrot hash 5)
  let hash = (^ hash char)
  let hash = (* hash seed)
  hash


// Test empty string
#test : (String/hash "") == (U64/to-bits 0)

// Test single character strings
#test : (Bits/eq (String/hash "a") (String/hash "")) == #False
#test : (Bits/eq (String/hash "a") (String/hash "z")) == #False

// Test short strings
#test : (Bits/eq (String/hash "hello") (String/hash "world")) == #False

// Test case sensitivity
#test : (Bits/eq (String/hash "Hello") (String/hash "hello")) == #False

// Test different strings with same length
#test : (Bits/eq (String/hash "test1") (String/hash "test2")) == #False

// Test strings with repeated characters
#test : (Bits/eq (String/hash "aaaa") (String/hash "aaa") ) == #False
