use Char/ as C/
use Bool/ as B/

// Checks if the character is a valid binary digit (0 or 1).
// 1st: The character to check.
// = True if the character is a binary digit, False otherwise.
C/is-binary-digit
: ∀(c: C/Char)
  B/Bool
= λc
  let is_zero = (C/eq c '0')
  let is_one = (C/eq c '1')
  (B/or is_zero is_one)
//TEST//

use Char/ as C/
use Bool/ as B/
use Equal/ as E/

// Tests for is-binary-digit function

// Test: '0' is a binary digit.
T0
: (E/Equal B/Bool (C/is-binary-digit '0') #True{}) 
= #Refl{}

// Test: '1' is a binary digit.
T1
: (E/Equal B/Bool (C/is-binary-digit '1') #True{}) 
= #Refl{}

// Test: '2' is not a binary digit.
T2
: (E/Equal B/Bool (C/is-binary-digit '2') #False{}) 
= #Refl{}

// Test: 'a' is not a binary digit.
T3
: (E/Equal B/Bool (C/is-binary-digit 'a') #False{}) 
= #Refl{}