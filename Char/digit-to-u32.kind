use Char/ as C/
use U32/ as U32/
use Maybe/ as M/

// Converts a digit character to its corresponding U32 number.
// 1st: The input character.
// = Some n if 1st is a digit, where n is the corresponding U32 number, None otherwise.
C/digit-to-u32
: ∀(c: C/Char)
  (M/Maybe U32)
= λc
  let n = (- c 48)
  (U32/if (M/Maybe U32)
    (& (>= n 0) (<= n 9))
    (#Some{n})
    #None{}
  )
//TEST//

use Char/ as C/
use Maybe/ as M/
use Equal/ as E/

// Test: '0' converts to Some 0.
T0
: (E/Equal (M/Maybe U32) (C/digit-to-u32 48) (#Some{0}))
= #Refl{}

// Test: '5' converts to Some 5.
T1
: (E/Equal (M/Maybe U32) (C/digit-to-u32 53) (#Some{5}))
= #Refl{}

// Test: '9' converts to Some 9.
T2
: (E/Equal (M/Maybe U32) (C/digit-to-u32 57) (#Some{9}))
= #Refl{}

// Test: 'a' converts to None.
T3
: (E/Equal (M/Maybe U32) (C/digit-to-u32 97) #None{})
= #Refl{}

// Test: '!' converts to None.
T4
: (E/Equal (M/Maybe U32) (C/digit-to-u32 33) #None{})
= #Refl{}

// Test: ' ' (space) converts to None.
T5
: (E/Equal (M/Maybe U32) (C/digit-to-u32 32) #None{})
= #Refl{}