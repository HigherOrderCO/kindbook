// Converts a character to its numeric value in the given base.
// - base: The base (2 for binary, 8 for octal, 10 for decimal, 16 for hexadecimal).
// - code: The character to convert.
// = Some n if valid digit in the given base, None otherwise.
Char/to-digit : Nat -> Char -> (Maybe Nat)
| base code =
  let is_base_2  = (Nat/eq base #2)
  let is_base_8  = (Nat/eq base #8)
  let is_base_10 = (Nat/eq base #10)
  let is_base_16 = (Nat/eq base #16)
  
  let is_binary  = (Bool/and is_base_2  (Char/is-binary-digit code))
  let is_octal   = (Bool/and is_base_8  (Char/is-octal-digit code))
  let is_decimal = (Bool/and is_base_10 (Char/is-digit code))
  let is_hex     = (Bool/and is_base_16 (Char/is-hex-digit code))
  
  if is_binary {
    (Char/digit-to-nat code)
  } else if is_octal {
    (Char/digit-to-nat code)
  } else if is_decimal {
    (Char/digit-to-nat code)
  } else if is_hex {
    (Char/hex-to-nat code)
  } else {
    (Maybe/none Nat)
  }

#test: (Char/to-digit #2  '0') == (Maybe/some Nat #0)
#test: (Char/to-digit #2  '1') == (Maybe/some Nat #1)
#test: (Char/to-digit #2  '2') == (Maybe/none Nat)
#test: (Char/to-digit #8  '7') == (Maybe/some Nat #7)
#test: (Char/to-digit #8  '8') == (Maybe/none Nat)
#test: (Char/to-digit #10 '9') == (Maybe/some Nat #9)
#test: (Char/to-digit #10 'a') == (Maybe/none Nat)
#test: (Char/to-digit #16 'f') == (Maybe/some Nat #15)
#test: (Char/to-digit #16 'g') == (Maybe/none Nat)
