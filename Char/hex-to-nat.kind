// Converts a hexadecimal character to its corresponding natural number.
// 1st: The input hexadecimal character
// = Some n if 1st is a valid hexadecimal digit, where n is the corresponding natural number, None otherwise.
Char/hex-to-nat
: ∀(code: Char)
  (Maybe Nat)
= λcode
  let is_hex = (Char/is-hex-digit code)
  let case_0_9 = (- code 48)
  let case_A_F = (- code 55)
  let case_a_f = (- code 87)
  let value =
    (U32/if U32
      (< code 58)
      case_0_9
      (U32/if U32
        (< code 97)
        case_A_F
        case_a_f))
  (Bool/if (Maybe Nat)
    is_hex
    #Some{(U32/to-nat value)}
    #None{})
// Test: Convert '0' to 0.
TEST_0
: (Equal (Maybe Nat) (Char/hex-to-nat '0') #Some{#Zero{}})
= #Refl{}

// Test: Convert 'A' to 10.
TEST_1
: (Equal (Maybe Nat) (Char/hex-to-nat 'A') #Some{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}}})
= #Refl{}

// Test: Convert 'f' to 15.
TEST_2
: (Equal (Maybe Nat) (Char/hex-to-nat 'f') #Some{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}}}}}}}})
= #Refl{}

// Test: Invalid hexadecimal character.
TEST_3
: (Equal (Maybe Nat) (Char/hex-to-nat 'G') #None{})
= #Refl{}