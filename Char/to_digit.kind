// Converts a character to its numeric value in the given base.
// - code: The character to convert.
// - base: The base (2 for binary, 8 for octal, 10 for decimal, 16 for hexadecimal).
// = Some n if valid digit in the given base, None otherwise.
Char/to_digit : Char -> Nat -> (Maybe Nat)
| code base =
  let is_base_2  = (Nat/eq base #2)
  let is_base_8  = (Nat/eq base #8)
  let is_base_10 = (Nat/eq base #10)
  let is_base_16 = (Nat/eq base #16)
  
  let is_binary  = (Bool/and is_base_2  (Char/is_binary_digit code))
  let is_octal   = (Bool/and is_base_8  (Char/is_octal_digit code))
  let is_decimal = (Bool/and is_base_10 (Char/is_digit code))
  let is_hex     = (Bool/and is_base_16 (Char/is_hex_digit code))
  
  if is_binary {
    (Char/digit_to_nat code)
  } else if is_octal {
    (Char/digit_to_nat code)
  } else if is_decimal {
    (Char/digit_to_nat code)
  } else if is_hex {
    (Char/hex_to_nat code)
  } else {
    #None
  }

#test: (Char/to_digit '0' #2) == #Some{#0}
#test: (Char/to_digit '1' #2) == #Some{#1}
#test: (Char/to_digit '2' #2) == #None
#test: (Char/to_digit '7' #8) == #Some{#7}
#test: (Char/to_digit '8' #8) == #None
#test: (Char/to_digit '9' #10) == #Some{#9}
#test: (Char/to_digit 'a' #10) == #None
#test: (Char/to_digit 'f' #16) == #Some{#15}
#test: (Char/to_digit 'g' #16) == #None
