// Converts a digit character to its U32 value.
// - c: The digit character.
// = The U32 value of the digit, or 10 if not a digit.
Char/to-digit-u32 : U32 -> Char -> (Maybe U32)
| base code =
  let is_base_2  = (U32/eq base 2)
  let is_base_8  = (U32/eq base 8)
  let is_base_10 = (U32/eq base 10)
  let is_base_16 = (U32/eq base 16)
  
  let is_binary  = (Bool/and is_base_2  (Char/is-binary-digit code))
  let is_octal   = (Bool/and is_base_8  (Char/is-octal-digit code))
  let is_decimal = (Bool/and is_base_10 (Char/is-digit code))
  let is_hex     = (Bool/and is_base_16 (Char/is-hex-digit code))
  
  if is_binary {
    (Char/digit-to-u32 code)
  } else if is_octal {
    (Char/digit-to-u32 code)
  } else if is_decimal {
    (Char/digit-to-u32 code)
  } else if is_hex {
    (Char/hex-to-u32 code)
  } else {
    #None
  }

#test: (Char/to-digit-u32 2  '0') == #Some{0}
#test: (Char/to-digit-u32 2  '1') == #Some{1}
#test: (Char/to-digit-u32 2  '2') == #None
#test: (Char/to-digit-u32 8  '7') == #Some{7}
#test: (Char/to-digit-u32 8  '8') == #None
#test: (Char/to-digit-u32 10 '9') == #Some{9}
#test: (Char/to-digit-u32 10 'a') == #None
#test: (Char/to-digit-u32 16 'f') == #Some{15}
#test: (Char/to-digit-u32 16 'g') == #None