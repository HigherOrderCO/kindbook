// Checks if all values in a binary tree are equal.
// - 1st: The type of elements in the tree.
// - 2nd: An equality function for type.
// - 3rd: The binary tree to check.
// = True if all values in the tree are equal, False otherwise.
BinTree/all-equal
: ∀(A: *)
  ∀(e: (Trait/Eq A))
  ∀(t: (BinTree/BinTree A))
  Bool
= λA λe λ{
  #Leaf: #True
  #Node: λx λl λr
    (BinTree/fold A Bool
      (λy λle λre
        (Bool/and
          (Bool/and
            (Trait/Eq/eq A e x y)
            le)
          re))
      #True
      (#Node{x l r}))
}

// Test: Empty tree is considered all equal
TEST_0
: (Equal
    Bool
    (BinTree/all-equal Nat NT/Eq (#Leaf))
    #True)
= #Refl

// Test: Single node tree is all equal
TEST_1
: (Equal
    Bool
    (BinTree/all-equal
      Nat
      NT/Eq
      (#Node{ #5 #Leaf #Leaf}))
    #True)
= #Refl

// Test: Tree with all equal values
TEST_2
: (Equal
    Bool
    (BinTree/all-equal
      Nat
      NT/Eq
      (#Node{#3
        (#Node{#3 #Leaf #Leaf})
        (#Node{#3 #Leaf #Leaf})}))
    #True)
= #Refl

// Test: Tree with different values
TEST_3
: (Equal
    Bool
    (BinTree/all-equal
      Nat
      NT/Eq
      (#Node{#3
        (#Node{#3 #Leaf #Leaf})
        (#Node{#4 #Leaf #Leaf})}))
    #False)
= #Refl

// Test: Larger tree with all equal values
TEST_4
: (Equal
    Bool
    (BinTree/all-equal
      Nat
      NT/Eq
      (#Node{#7
        (#Node{#7
          (#Node{#7 #Leaf #Leaf})
          (#Node{#7 #Leaf #Leaf})})
        (#Node{#7
          (#Node{#7 #Leaf #Leaf})
          (#Node{#7 #Leaf #Leaf})})}))
    #True)
= #Refl

// Test: Larger tree with one different value
TEST_5
: (Equal
    Bool
    (BinTree/all-equal
      Nat
      NT/Eq
      (#Node{#7
        (#Node{#7
          (#Node{#7 #Leaf #Leaf})
          (#Node{#7 #Leaf #Leaf})})
        (#Node{#7
          (#Node{#7 #Leaf #Leaf})
          (#Node{#8 #Leaf #Leaf})})}))
    #False)
= #Refl
