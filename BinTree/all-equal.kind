use BinTree/ as BT/
use Bool/ as B/
use Trait/ as T/

// Checks if all values in a binary tree are equal.
// - 1st: The type of elements in the tree.
// - 2nd: An equality function for type.
// - 3rd: The binary tree to check.
// = True if all values in the tree are equal, False otherwise.
BT/all-equal
: ∀(A: *)
  ∀(e: (T/Eq A))
  ∀(t: (BT/BinTree A))
  B/Bool
= λA λe λ{
  #Leaf: #True{}
  #Node: λx λl λr
    (BT/fold A B/Bool
      (λy λle λre
        (B/and
          (B/and
            (T/Eq/eq A e x y)
            le)
          re))
      #True{}
      (#Node{x l r}))
}

//TEST//

use BinTree/ as BT/
use Bool/ as B/
use Equal/ as E/
use Nat/ as N/
use Nat/Trait/ as NT/

// Test: Empty tree is considered all equal
T0
: (E/Equal
    B/Bool
    (BT/all-equal N/Nat NT/Eq (#Leaf{}))
    #True{})
= #Refl{}

// Test: Single node tree is all equal
T1
: (E/Equal
    B/Bool
    (BT/all-equal
      N/Nat
      NT/Eq
      (#Node{ #Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}}))
    #True{})
= #Refl{}

// Test: Tree with all equal values
T2
: (E/Equal
    B/Bool
    (BT/all-equal
      N/Nat
      NT/Eq
      (#Node{#Succ{#Succ{#Succ{#Zero{}}}}
        (#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})
        (#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})}))
    #True{})
= #Refl{}

// Test: Tree with different values
T3
: (E/Equal
    B/Bool
    (BT/all-equal
      N/Nat
      NT/Eq
      (#Node{#Succ{#Succ{#Succ{#Zero{}}}}
        (#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})
        (#Node{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}} #Leaf{} #Leaf{}})}))
    #False{})
= #Refl{}

// Test: Larger tree with all equal values
T4
: (E/Equal
    B/Bool
    (BT/all-equal
      N/Nat
      NT/Eq
      (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
        (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})})
        (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})})}))
    #True{})
= #Refl{}

// Test: Larger tree with one different value
T5
: (E/Equal
    B/Bool
    (BT/all-equal
      N/Nat
      NT/Eq
      (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
        (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})})
        (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}} #Leaf{} #Leaf{}})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}} #Leaf{} #Leaf{}})})}))
    #False{})
= #Refl{}
