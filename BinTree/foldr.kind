use BinTree/ as BT/

// Performs a right-associative fold over a binary tree.
// - 1st: The type of values in the tree.
// - 2nd: The type of the accumulator and result.
// - 3rd: The folding function.
// - 4th: The initial value of the accumulator.
// - 5th: The input binary tree.
// = The result of folding the tree from right to left.
BT/foldr
: ∀(A: *)
  ∀(B: *)
  ∀(f: ∀(x: A) ∀(acc: B) B)
  ∀(z: B)
  ∀(t: (BT/BinTree A))
  B
= λA λB λf λz λ{
  #Leaf: z
  #Node: λt.val λt.lft λt.rgt
    (f t.val (BT/foldr A B f (BT/foldr A B f z t.rgt) t.lft))
}

//TEST//

use BinTree/ as BT/
use Nat/ as N/
use Equal/ as E/

// Test: Empty tree
T0 
: (E/Equal N/Nat (BT/foldr _ _ N/add #Zero{} #Leaf{}) #Zero{})
= #Refl{}

// Test: Single node tree
T1 
: (E/Equal 
		N/Nat 
		(BT/foldr _ _ 
			N/add 
			#Zero{} 
			(#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}})) 
		#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}})
= #Refl{}

// Test: Tree with multiple nodes
T2 
: (E/Equal 
		N/Nat 
		(BT/foldr _ _ 
			N/add 
			#Zero{} 
			(#Node{#Succ{#Zero{}} 
				(#Node{#Succ{#Succ{#Zero{}}} #Leaf{} #Leaf{}}) 
				(#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})})) 
		#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}})
= #Refl{}

// Test: Using multiplication instead of addition
T3 
: (E/Equal
	 	N/Nat 
		(BT/foldr _ _ 
			N/mul 
			#Succ{#Zero{}} 
			(#Node{#Succ{#Succ{#Zero{}}} 
				(#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}}) 
				(#Node{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}} #Leaf{} #Leaf{}})})) 
		#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}}}}}}}}}}}}}}}})
= #Refl{}

// Test: Using a more complex tree structure
T4 
: (E/Equal 
		N/Nat 
		(BT/foldr _ _ 
			N/add 
			#Zero{} 
			(#Node{#Succ{#Zero{}} 
				(#Node{#Succ{#Succ{#Zero{}}} 
					(#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}}) 
					#Leaf{}}) 
				(#Node{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}} 
					#Leaf{} 
					(#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}})})})) 
		#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}}}}}}})
= #Refl{}

// Test: Right-associative nature of foldr
T5 
: (E/Equal 
		N/Nat 
		(BT/foldr _ _ 
			N/sub 
			#Zero{} 
			(#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}}}} 
				(#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}}) 
				(#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})})) 
		#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}}})
= #Refl{}

// Test: Using foldr to count nodes
T6 
: (E/Equal 
		N/Nat 
		(BT/foldr _ _ 
			(λx λacc #Succ{acc}) 
			#Zero{} 
			(#Node{#Succ{#Zero{}} 
				(#Node{#Succ{#Succ{#Zero{}}} #Leaf{} #Leaf{}}) 
				(#Node{#Succ{#Succ{#Succ{#Zero{}}}} 
					#Leaf{} 
					(#Node{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}} #Leaf{} #Leaf{}})})})) 
			#Succ{#Succ{#Succ{#Succ{#Zero{}}}}})
= #Refl{}
