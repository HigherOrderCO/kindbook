// Creates a leaf node (empty tree).
// - 1st: The type of values stored in the tree.
// = An empty tree (leaf node).
BinTree/leaf
: ∀(A: *)
  (BinTree/BinTree A)
= λA #Leaf{}

// Test: leaf creates an empty tree
TEST_0
: (Equal/Equal (BinTree/BinTree Nat/Nat) (BinTree/leaf Nat/Nat) #Leaf{})
= #Refl{}

// Test: leaf is polymorphic
TEST_1
: (Equal/Equal (BinTree/BinTree Nat/Nat) (BinTree/leaf Nat/Nat) #Leaf{})
= #Refl{}

// Test: leaf {String} is equivalent to Leaf
TEST_2
: (Equal/Equal (BinTree/BinTree String/String) (BinTree/leaf String/String) #Leaf{})
= #Refl{}
