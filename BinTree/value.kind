// Gets the value of a binary tree node.
// - 1st: The type of values stored in the tree.
// - 2nd: The input tree.
// = The value of the node, or None if the tree is a leaf.
BinTree/value
: ∀(A: *)
  ∀(tree: (BinTree/BinTree A))
  (Maybe/Maybe A)
= λA λ{
  #Leaf: #None{}
  #Node: λval λlft λrgt #Some{val}
}

// Test: value of a leaf node is None
TEST_0
: (Equal/Equal
    (Maybe/Maybe Nat/Nat)
    (BinTree/value Nat/Nat #Leaf{})
    (#None{}))
= #Refl{}

// Test: value of a node with content 5 is (Some 5)
TEST_1
: (Equal/Equal
    (Maybe/Maybe Nat/Nat)
    (BinTree/value Nat/Nat (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}}))
    (#Some{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}}}))
= #Refl{}

// Test: value of a complex tree returns the root node's value
TEST_2
: (Equal/Equal
    (Maybe/Maybe Nat/Nat)
    (BinTree/value Nat/Nat (#Node{
      #Succ{#Zero{}}
      (#Node{#Succ{#Succ{#Zero{}}} #Leaf{} #Leaf{}})
      (#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})
    }))
    (#Some{#Succ{#Zero{}}}))
= #Refl{}
