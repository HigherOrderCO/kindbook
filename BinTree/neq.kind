// Checks if two binary trees are not equal.
// - A: The type of elements in the tree.
// - e: An equality function for type A.
// - a: The first tree to compare.
// - b: The second tree to compare.
// = True if the trees are not equal, False otherwise.
BinTree/neq : ∀(A: *) ∀(e: (IsEqual A)) (BinTree A) -> (BinTree A) -> Bool
| A e a b = (Bool/not (BinTree/eq A e a b))

#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 #Leaf #Leaf}) (#Node{#2 #Leaf #Leaf})) == #True
#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 (#Node{#2 #Leaf #Leaf}) #Leaf}) (#Node{#1 (#Node{#2 #Leaf #Leaf}) #Leaf})) == #False
#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 (#Node{#2 #Leaf #Leaf}) #Leaf}) (#Node{#1 #Leaf (#Node{#2 #Leaf #Leaf})})) == #True
#test: (BinTree/neq Nat Nat/IsEqual #Leaf (#Node{#1 #Leaf #Leaf})) == #True
#test: (BinTree/neq Nat Nat/IsEqual #Leaf #Leaf) == #False
#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})}) (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#4 #Leaf #Leaf})})) == #True
#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})}) (#Node{#4 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})})) == #True
#test: (BinTree/neq Nat Nat/IsEqual (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})}) #Leaf) == #True
