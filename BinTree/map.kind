// Applies a function to each element of a binary tree.
// - A: The type of elements in the input tree.
// - B: The type of elements in the output tree.
// - f: The function to be applied to each element.
// - t: The binary tree to map over.
// = A new binary tree with the function applied to all elements.
BinTree/map : ∀(A: *) ∀(B: *) (A -> B) -> (BinTree A) -> (BinTree B)
| A B f #Leaf              = #Leaf
| A B f #Node{val lft rgt} = #Node{(f val) (BinTree/map A B f lft) (BinTree/map A B f rgt)}

#test: (BinTree/map Nat Nat (Function/id Nat) #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}) == #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}
#test: (BinTree/map Nat Nat (Nat/add #1) #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}) == #Node{#2 #Node{#3 #Leaf #Leaf} #Node{#4 #Leaf #Leaf}}
#test: (BinTree/map Nat Nat (Nat/add #1) #Leaf) == #Leaf
#test: (BinTree/map Nat Nat (Nat/add #2) (BinTree/map Nat Nat (Nat/add #1) #Node{#1 #Node{#2 #Leaf #Leaf} #Leaf})) == #Node{#4 #Node{#5 #Leaf #Leaf} #Leaf}
#test: (BinTree/map Nat Nat (λx #Zero) #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}) == #Node{#Zero #Node{#Zero #Leaf #Leaf} #Node{#Zero #Leaf #Leaf}}
#test: (BinTree/map Nat Nat (Nat/mul #2) #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}) == #Node{#2 #Node{#4 #Leaf #Leaf} #Node{#6 #Leaf #Leaf}}
#test: (BinTree/map Bool Bool Bool/not #Node{#True #Node{#False #Leaf #Leaf} #Node{#True #Leaf #Leaf}}) == #Node{#False #Node{#True #Leaf #Leaf} #Node{#False #Leaf #Leaf}}
#test: (BinTree/map Nat Nat (λx (Nat/add #1 (Nat/mul #2 x))) #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Leaf #Leaf}}) == #Node{#3 #Node{#5 #Leaf #Leaf} #Node{#7 #Leaf #Leaf}}
