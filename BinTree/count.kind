use BinTree/ as BT/
use Bool/ as B/
use Nat/ as N/
use Trait/ as T/

// Counts the occurrences of a given value in a binary tree.
// - A: The type of elements in the tree.
// - e: An equality instance for type A.
// - x: The value to count.
// - t: The binary tree to search.
// = The number of occurrences of the given value in the tree.
BT/count : âˆ€(A: *) (T/Eq A) -> A -> (BT/BinTree A) -> N/Nat
| A e x #Leaf = #Zero
| A e x #Node{val lft rgt} =
  let is_equal  = (T/Eq/eq A e x val)
  let count_val = (B/if N/Nat is_equal #Succ{#Zero} #Zero)
  let count_lft = (BT/count A e x lft)
  let count_rgt = (BT/count A e x rgt)
  (N/add count_val (N/add count_lft count_rgt))
