// Counts the occurrences of a given value in a binary tree.
// - A: The type of elements in the tree.
// - e: An equality instance for type A.
// - x: The value to count.
// - t: The binary tree to search.
// = The number of occurrences of the given value in the tree.
BinTree/count : âˆ€(A: *) (Trait/Eq A) -> A -> (BinTree/BinTree A) -> Nat
| A e x #Leaf = #Zero
| A e x #Node{val lft rgt} =
  let is_equal  = (Trait/Eq/eq A e x val)
  let count_val = (Bool/if Nat is_equal #1 #Zero)
  let count_lft = (BinTree/count A e x lft)
  let count_rgt = (BinTree/count A e x rgt)
  (Nat/add count_val (Nat/add count_lft count_rgt))

// Test: Count in an empty tree
TEST_0
: (Equal 
		Nat 
		(BinTree/count 
			Nat 
			NT/Eq 
			(#5) 
			#Leaf) 
		#Zero)
= #Refl

// Test: Count in a tree with one matching element
TEST_1
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#5)
      (#Node{
        (#5)
        #Leaf
        #Leaf
      })
    )
    (#1)
  )
= #Refl

// Test: Count in a tree with multiple matching elements
TEST_2
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#5)
      (#Node{
        (#5)
        (#Node{
          (#5)
          #Leaf
          #Leaf
        })
        (#Node{
          (#3)
          #Leaf
          (#Node{
            (#5)
            #Leaf
            #Leaf
          })
        })
      })
    )
    (#3)
  )
= #Refl

// Test: Count in a tree with no matching elements
TEST_3
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#7)
      (#Node{
        (#5)
        (#Node{
          (#3)
          #Leaf
          #Leaf
        })
        (#Node{
          (#1)
          #Leaf
          (#Node{
            (#9)
            #Leaf
            #Leaf
          })
        })
      })
    )
    #Zero
  )
= #Refl

// Test: Count in a balanced tree with mixed elements
TEST_4
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#2)
      (#Node{
        (#1)
        (#Node{
          (#2)
          #Leaf
          #Leaf
        })
        (#Node{
          (#3)
          (#Node{
            (#2)
            #Leaf
            #Leaf
          })
          (#Node{
            (#4)
            #Leaf
            #Leaf
          })
        })
      })
    )
    (#2)
  )
= #Refl

// Test: Count in a left-heavy tree
TEST_5
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#1)
      (#Node{
        (#1)
        (#Node{
          (#1)
          (#Node{
            (#1)
            #Leaf
            #Leaf
          })
          #Leaf
        })
        #Leaf
      })
    )
    (#3))
= #Refl

// Test: Count in a right-heavy tree
TEST_6
: (Equal
    Nat
    (BinTree/count
      Nat
      NT/Eq
      (#3)
      (#Node{
        (#1)
        #Leaf
        (#Node{
          (#2)
          #Leaf
          (#Node{
            (#3)
            #Leaf
            (#Node{
              (#3)
              #Leaf
              #Leaf
            })
          })
        })
      })
    )
    (#2)
  )
= #Refl
