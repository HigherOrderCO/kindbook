// Applies a monadic function to each element of a binary tree.
// - M: Monad type constructor.
// - m: Monad instance for M.
// - A: Input type.
// - B: Output type.
// - f: Function to apply.
// - t: Input tree.
// = Monadic tree of results.
BinTree/mmap
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  ∀(B: *)
  ∀(f: A -> (M B))
  (BinTree A) -> (M (BinTree B))
| M #Monad{pure bind} A B f #Leaf = (pure (BinTree B) #Leaf)
| M #Monad{pure bind} A B f #Node{val lft rgt} =
  (bind B (BinTree B) (f val) λx
  (bind (BinTree B) (BinTree B) (BinTree/mmap M #Monad{pure bind} A B f lft) λl
  (bind (BinTree B) (BinTree B) (BinTree/mmap M #Monad{pure bind} A B f rgt) λr
  (pure (BinTree B) (#Node{x l r})))))

#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 (λx (Maybe/pure U64 x)) #Leaf) == #Some{#Leaf}
#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 (λx (Maybe/pure U64 x)) #Node{1 #Leaf #Leaf}) == #Some{#Node{1 #Leaf #Leaf}}
#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 (λx #None) #Node{1 #Leaf #Leaf}) == #None