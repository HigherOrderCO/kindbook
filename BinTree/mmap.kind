// Applies a monadic function to each element of a binary tree.
// - M: Monad type constructor.
// - m: Monad instance for M.
// - A: Input type.
// - B: Output type.
// - t: Input tree.
// - f: Function to apply.
// = Monadic tree of results.
BinTree/mmap
: ∀(M: ∀(A: *) *)
  ∀(m: (Monad M))
  ∀(A: *)
  ∀(B: *)
  (BinTree A) 
  -> (A -> (M B))
  -> (M (BinTree B))
| M #Monad{pure bind} A B #Leaf              f = (pure (BinTree B) #Leaf)
| M #Monad{pure bind} A B #Node{val lft rgt} f =
  (bind B (BinTree B) (f val) λx
  (bind (BinTree B) (BinTree B) (BinTree/mmap M #Monad{pure bind} A B lft f) λl
  (bind (BinTree B) (BinTree B) (BinTree/mmap M #Monad{pure bind} A B rgt f) λr
  (pure (BinTree B) (#Node{x l r})))))

#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 #Leaf (λx (Maybe/pure U64 x))) == #Some{#Leaf}
#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 #Node{1 #Leaf #Leaf} (λx #None)) == #None
#test: (BinTree/mmap Maybe Maybe/Monad U64 U64 #Node{1 #Leaf #Leaf} (λx (Maybe/pure U64 x))) == #Some{#Node{1 #Leaf #Leaf}}