use BinTree/ as BT/

// Creates a binary tree node with a value and left and right subtrees.
// - 1st: The type of values stored in the tree.
// - 2nd: The value stored in this node.
// - 3rd: The left subtree.
// - 4th: The right subtree.
// = A new binary tree node.
BT/node
: ∀(A: *)
  ∀(value: A)
  ∀(left: (BT/BinTree A))
  ∀(right: (BT/BinTree A))
  (BT/BinTree A)
= λA λvalue λleft λright
  #Node{value left right}
	
//TEST//

use BinTree/ as BT/
use Equal/ as E/
use Nat/ as N/

// Test: Create a simple node with two leaf children
T0
: (E/Equal
    (BT/BinTree N/Nat)
    (BT/node N/Nat #Succ{#Zero{}} (BT/leaf N/Nat) (BT/leaf N/Nat))
    #Node{#Succ{#Zero{}} #Leaf{} #Leaf{}}
  )
= #Refl{}

// Test: Create a node with a left child
T1
: (E/Equal
    (BT/BinTree N/Nat)
    (BT/node N/Nat #Succ{#Succ{#Zero{}}}
      (BT/node N/Nat #Succ{#Zero{}} (BT/leaf N/Nat) (BT/leaf N/Nat))
      (BT/leaf N/Nat))
    #Node{#Succ{#Succ{#Zero{}}} #Node{#Succ{#Zero{}} #Leaf{} #Leaf{}} #Leaf{}}
  )
= #Refl{}

// Test: Create a node with a right child
T2
: (E/Equal
    (BT/BinTree N/Nat)
    (BT/node N/Nat #Succ{#Succ{#Succ{#Zero{}}}}
      (BT/leaf N/Nat)
      (BT/node N/Nat #Succ{#Succ{#Succ{#Succ{#Zero{}}}}} (BT/leaf N/Nat) (BT/leaf N/Nat)))
    #Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Node{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}} #Leaf{} #Leaf{}}}
  )
= #Refl{}

// Test: Create a balanced tree with three levels
T3
: (E/Equal
    (BT/BinTree N/Nat)
    (BT/node N/Nat #Succ{#Zero{}}
      (BT/node N/Nat #Succ{#Succ{#Zero{}}} (BT/leaf N/Nat) (BT/leaf N/Nat))
      (BT/node N/Nat #Succ{#Succ{#Succ{#Zero{}}}} (BT/leaf N/Nat) (BT/leaf N/Nat)))
    #Node{#Succ{#Zero{}}
      #Node{#Succ{#Succ{#Zero{}}} #Leaf{} #Leaf{}}
      #Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}}}
  )
= #Refl{}
