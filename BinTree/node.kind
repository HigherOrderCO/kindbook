// Creates a binary tree node with a value and left and right subtrees.
// - A: The type of values stored in the tree.
// - val: The value stored in this node.
// - lft: The left subtree.
// - rgt: The right subtree.
// = A new binary tree node.
BinTree/node : âˆ€(A: *) A -> (BinTree A) -> (BinTree A) -> (BinTree A)
| A val lft rgt = #Node{val lft rgt}

#test: (BinTree/node Nat #1 #Leaf #Leaf) == #Node{#1 #Leaf #Leaf}
#test: (BinTree/node Bool #True (BinTree/node Bool #False #Leaf #Leaf) #Leaf) == #Node{#True #Node{#False #Leaf #Leaf} #Leaf}
