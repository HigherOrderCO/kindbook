// Gets the right subtree of a binary tree node.
// - A: The type of values stored in the tree.
// - tree: The input tree.
// = The right subtree, or None if the tree is a leaf.
BinTree/right : âˆ€(A: *) (BinTree A) -> (Maybe (BinTree A))
| A #Leaf              = #None
| A #Node{val lft rgt} = #Some{rgt}

#test: (BinTree/right Nat #Leaf) == #None
#test: (BinTree/right Nat #Node{#1 #Leaf #Node{#3 #Leaf #Leaf}}) == #Some{#Node{#3 #Leaf #Leaf}}
#test: (BinTree/right Nat #Node{#1 #Node{#2 #Leaf #Leaf} #Leaf}) == #Some{#Leaf}
#test: (BinTree/right Nat #Node{#1 #Node{#2 #Leaf #Leaf} #Node{#3 #Node{#4 #Leaf #Leaf} #Node{#5 #Leaf #Leaf}}}) == #Some{#Node{#3 #Node{#4 #Leaf #Leaf} #Node{#5 #Leaf #Leaf}}}
#test: (BinTree/right Nat #Node{#1 #Leaf #Leaf}) == #Some{#Leaf}
