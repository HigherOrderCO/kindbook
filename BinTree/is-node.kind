// Checks if a binary tree is a node (non-empty).
// - 1st: The type of elements in the tree.
// - 2nd: The input binary tree.
// = True if the tree is a node, False otherwise.
BinTree/is-node
: ∀(A: *)
  ∀(t: (BinTree/BinTree A))
  Bool/Bool
= λA λ{
  #Leaf: #False{}
  #Node: λt.val λt.lft λt.rgt #True{}
}

// Test: is-node on a leaf
TEST_0
: (Equal/Equal Bool/Bool (BinTree/is-node Nat/Nat #Leaf{}) #False{})
= #Refl{}

// Test: is-node on a simple node
TEST_1
: (Equal/Equal
    Bool/Bool
    (BinTree/is-node Nat/Nat (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero{}}}}}} #Leaf{} #Leaf{}}))
    #True{})
= #Refl{}

// Test: is-node on a more complex tree
TEST_2
: (Equal/Equal
    Bool/Bool
    (BinTree/is-node Nat/Nat
      (#Node{
        #Succ{#Zero{}}
        (#Node{#Succ{#Succ{#Zero{}}} #Leaf{} #Leaf{}})
        (#Node{#Succ{#Succ{#Succ{#Zero{}}}} #Leaf{} #Leaf{}})
      }))
    #True{})
= #Refl{}
