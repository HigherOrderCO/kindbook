// Checks if a binary tree is a node (non-empty).
// - A: The type of elements in the tree.
// - t: The input binary tree.
// = True if the tree is a node, False otherwise.
BinTree/is-node : âˆ€(A: *) (BinTree A) -> Bool
| A #Leaf              = #False
| A #Node{val lft rgt} = #True

#test: (BinTree/is-node Nat #Leaf) == #False
#test: (BinTree/is-node Nat (#Node{#5 #Leaf #Leaf})) == #True
#test: (BinTree/is-node Nat (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})})) == #True
