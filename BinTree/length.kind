// Calculates the number of nodes in a binary tree.
// - A: The type of elements stored in the tree.
// - t: The binary tree to count.
// = The total number of nodes in the tree.
BinTree/length : âˆ€(A: *) (BinTree A) -> Nat
| A #Leaf              = #Zero
| A #Node{val lft rgt} = #Succ{(Nat/add (BinTree/length A lft) (BinTree/length A rgt))}

#test: (BinTree/length Nat #Leaf) == #Zero
#test: (BinTree/length Nat #Node{#1 #Leaf #Leaf}) == #1
#test: (BinTree/length Nat #Node{#1 #Node{#2 #Leaf #Leaf} #Leaf}) == #2
#test: (BinTree/length Nat #Node{#1 #Node{#2 #Node{#4 #Leaf #Leaf} #Node{#5 #Leaf #Leaf}} #Node{#3 #Node{#6 #Leaf #Leaf} #Node{#7 #Leaf #Leaf}}}) == #7
