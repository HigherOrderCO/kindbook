// Calculates the number of nodes in a binary tree.
// - 1st: The type of elements stored in the tree.
// - 2nd: The binary tree to count.
// = The total number of nodes in the tree.
BinTree/length
: ∀(A: *)
  ∀(t: (BinTree/BinTree A))
  Nat
= λA λ{
  #Leaf: #Zero
  #Node: λt.val λt.lft λt.rgt
    #Succ{(Nat/add (BinTree/length A t.lft) (BinTree/length A t.rgt))}
}
// Test: Length of an empty tree is zero
TEST_0
: (Equal Nat (BinTree/length _ #Leaf) #Zero)
= #Refl

// Test: Length of a single node tree is one
TEST_1
: (Equal Nat (BinTree/length _ (#Node{#Succ{#Zero} #Leaf #Leaf})) #Succ{#Zero})
= #Refl

// Test: Length of a tree with three nodes
TEST_2
: (Equal
    Nat
    (BinTree/length _
      (#Node{
        #Succ{#Zero}
        (#Node{#Succ{#Succ{#Zero}} #Leaf #Leaf})
        #Leaf
      })
    )
    #Succ{#Succ{#Zero}}
  )
= #Refl

// Test: Length of a balanced tree with seven nodes
TEST_3
: (Equal
    Nat
    (BinTree/length _
      (#Node{
        #Succ{#Zero}
        (#Node{
          #Succ{#Succ{#Zero}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Zero}}}} #Leaf #Leaf})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}} #Leaf #Leaf})
        })
        (#Node{
          #Succ{#Succ{#Succ{#Zero}}}
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}}} #Leaf #Leaf})
          (#Node{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}}}} #Leaf #Leaf})
        })
      })
    )
    #Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Succ{#Zero}}}}}}}
  )
= #Refl
