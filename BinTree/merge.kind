// Merges two trees using combining functions.
// - A: Type of elements in the first tree.
// - B: Type of elements in the second tree.
// - C: Type of elements in the resulting tree.
// - f: Function for when only the first tree has a value.
// - g: Function for when only the second tree has a value.
// - h: Function to combine values when both trees have a value.
// - a: The first input tree.
// - b: The second input tree.
// = A new tree with combined values based on input trees.
BinTree/merge
: ∀(A: *)
  ∀(B: *)
  ∀(C: *)
  ∀(f: A -> C)
  ∀(g: B -> C)
  ∀(h: A -> B -> C)
  ∀(a: (BinTree A))
  ∀(b: (BinTree B))
  (BinTree C)
| A B C f g h #Leaf #Leaf =
  #Leaf
| A B C f g h #Leaf #Node{bx bl br} =
  let cl = (BinTree/merge A B C f g h #Leaf bl)
  let cr = (BinTree/merge A B C f g h #Leaf br)
  #Node{(g bx) cl cr}
| A B C f g h #Node{ax al ar} #Leaf =
  let cl = (BinTree/merge A B C f g h al #Leaf)
  let cr = (BinTree/merge A B C f g h ar #Leaf)
  #Node{(f ax) cl cr}
| A B C f g h #Node{ax al ar} #Node{bx bl br} =
  let cl = (BinTree/merge A B C f g h al bl)
  let cr = (BinTree/merge A B C f g h ar br)
  #Node{(h ax bx) cl cr}
