// Checks if a binary tree is a leaf (empty).
// - A: The type of elements in the tree.
// - t: The input binary tree.
// = True if the tree is a leaf, False otherwise.
BinTree/is_leaf : âˆ€(A: *) (BinTree A) -> Bool
| A #Leaf              = #True
| A #Node{val lft rgt} = #False

#test: (BinTree/is_leaf Nat #Leaf) == #True
#test: (BinTree/is_leaf Nat (#Node{#5 #Leaf #Leaf})) == #False
#test: (BinTree/is_leaf Nat (#Node{#1 (#Node{#2 #Leaf #Leaf}) (#Node{#3 #Leaf #Leaf})})) == #False
#test: (BinTree/is_leaf Nat (#Node{#1 (#Node{#2 #Leaf #Leaf}) #Leaf})) == #False
#test: (BinTree/is_leaf Nat (#Node{#1 #Leaf (#Node{#3 #Leaf #Leaf})})) == #False
