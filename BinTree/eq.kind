// Checks if two binary trees are equal.
// - A: The type of elements in the tree.
// - e: An equality function for type A.
// - a: The first tree to compare.
// - b: The second tree to compare.
// = True if the trees are equal, False otherwise.
BinTree/eq : ∀(A: *) ∀(e: (IsEqual A)) (BinTree A) -> (BinTree A) -> Bool
| A e #Leaf           #Leaf           = #True
| A e #Leaf           #Node{bv bl br} = #False
| A e #Node{av al ar} #Leaf           = #False
| A e #Node{av al ar} #Node{bv bl br} =
  let eq_val = (IsEqual/eq A e av bv)
  let eq_lft = (BinTree/eq A e al bl)
  let eq_rgt = (BinTree/eq A e ar br)
  (Bool/and eq_val (Bool/and eq_lft eq_rgt))

#test:
  use e = Nat/IsEqual
  use a = (BinTree/leaf Nat)
  use b = (BinTree/leaf Nat)
  (BinTree/eq Nat e a b) == #True

#test:
  use e = Nat/IsEqual
  use a = (BinTree/leaf Nat)
  use b = (BinTree/node Nat #1 (BinTree/leaf Nat) (BinTree/leaf Nat))
  (BinTree/eq Nat e a b) == #False

#test:
  use e = Nat/IsEqual
  use a = (BinTree/node Nat #1 (BinTree/leaf Nat) (BinTree/leaf Nat))
  use b = (BinTree/node Nat #1 (BinTree/leaf Nat) (BinTree/leaf Nat))
  (BinTree/eq Nat e a b) == #True

#test:
  use e = Nat/IsEqual
  use a = (BinTree/node Nat #1 (BinTree/leaf Nat) (BinTree/leaf Nat))
  use b = (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
  (BinTree/eq Nat e a b) == #False

#test:
  use e = Nat/IsEqual
  use a = (BinTree/node Nat #1 
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
    (BinTree/node Nat #3 (BinTree/leaf Nat) (BinTree/leaf Nat)))
  use b = (BinTree/node Nat #1 
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
    (BinTree/node Nat #3 (BinTree/leaf Nat) (BinTree/leaf Nat)))
  (BinTree/eq Nat e a b) == #True

#test:
  use e = Nat/IsEqual
  use a = (BinTree/node Nat #1 
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
    (BinTree/node Nat #3 (BinTree/leaf Nat) (BinTree/leaf Nat)))
  use b = (BinTree/node Nat #1 
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
    (BinTree/node Nat #4 (BinTree/leaf Nat) (BinTree/leaf Nat)))
  (BinTree/eq Nat e a b) == #False

#test:
  use e = Nat/IsEqual
  use a = (BinTree/node Nat #1 
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat))
    (BinTree/leaf Nat))
  use b = (BinTree/node Nat #1 
    (BinTree/leaf Nat)
    (BinTree/node Nat #2 (BinTree/leaf Nat) (BinTree/leaf Nat)))
  (BinTree/eq Nat e a b) == #False
