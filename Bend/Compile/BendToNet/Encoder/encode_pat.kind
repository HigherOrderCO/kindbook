use Bend/Compile/BendToNet/Encoder as Enc

// Encodes a pattern into the Encoder
// - enc: The current Encoder state
// - pat: The Pattern to be encoded
// - up : The upstream Port to connect the pattern to
// = The Encoder with the nodes from the compiled pattern or None on error
Enc/encode_pat : Enc -> Bend/Fun/Pattern -> Bend/Net/Port -> (Maybe Enc)
| enc #Var{ #None }         up =
  let #Pair{node enc} = (Enc/new_node #Era enc)
  (Enc/link enc up #Port{node 0})
| enc #Var{ #Some{name} }   up = (Enc/link_var enc name up)
| enc #Chn{ name }          up = (Enc/link_var enc (String/append "$" name) up)
| enc #Fan{ kind pats }     up = (enc_children enc (Bend/Net/NodeKind/from_fan_kind kind) up pats)
| enc #Ctr{ _ _ }           up = #None
| enc #Num{ _ }             up = #None
| enc #Lst{ _ }             up = #None
| enc #Str{ _ }             up = #None

// Recursively encodes child patterns of a Fan pattern
// - enc: The current Encoder state
// - kind: The NodeKind of the Fan
// - up: The upstream Port to connect to
// - pats: The list of child Patterns
// = The Encoder with the nodes from the compiled children or None on error
enc_children : Enc -> Bend/Net/NodeKind -> Bend/Net/Port -> (List Bend/Fun/Pattern) -> (Maybe Enc)
| enc kind up #Nil              = #None
| enc kind up #Cons{ pat #Nil } = (Enc/encode_pat enc pat up)
| enc kind up #Cons{ pat pats } = do Maybe {
  let #Pair{node enc} = (Enc/new_node kind enc)
  ask enc             = (Enc/link enc up #Port{node 0})
  ask enc             = (Enc/encode_pat enc pat #Port{node 1})
  (enc_children enc kind #Port{node 2} pats)
}
