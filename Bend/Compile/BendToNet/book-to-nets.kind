use Bend/Compile/BendToNet/Encoder as Enc

// Converts all definitions in a book to a list of flat nets
// - book: The Book containing function definitions
// = A List of Nets with the compiled definitions or an error message
Bend/Compile/BendToNet/book-to-nets : Bend/Fun/Book -> (Bend (List Bend/Net))
| #Book{defs _ _} = do Bend {
  let defs = (BinMap/values defs)
  (List/mmap _ Bend/Monad _ _ def-to-net defs)
}

def-to-net : Bend/Fun/FnDef -> (Bend Bend/Net)
| #FnDef{nam typ chk rul src} = do Bend {
  ask #Rule{_ bod}    = (Maybe/to-result _ _ (List/head _ rul) "def-to-net: no rules")
  ask #Encoder{net _} = (Enc/encode-term (Enc/new nam) bod Bend/Net/net-root)
  #Done{net}
}
