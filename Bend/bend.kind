// Bend/bend.kind

Bend.gen_bend (book: Bend.Fun.Book.Book): String
  Bend.Fun.Book.show(book)

Bend.gen_core (book: Bend.Fun.Book.Book): String
  Result.fold(
    (book: Bend.Fun.Book.Book) => Bend.Fun.Book.show(book),
    (err: String) => String.concat("Compile error: ", err),
    Bend.Run.to_bend_core(book)
  )

Bend.gen_hvm (book: Bend.Fun.Book.Book): String
  Result.fold(
    (book: Bend.Hvm.Book.Book) => Bend.Hvm.Book.Trait.Show.show(book),
    (err: String) => String.concat("Compile error: ", err),
    do Result {
      book = Bend.Run.to_bend_core(book)
      Bend.Run.to_hvm(book)
    }
  )

Bend.usage: String
  "Usage: bend [gen-bend|gen-core|gen-hvm] <file>"

Bend.main: IO(Unit)
  do IO {
    args = IO.get_args
    match List args {
      cons(cmd, cons(file, nil)):
        cmd = Bend.Cli.Command.from_string(cmd)
        book = Bend.Load.load_book(file)
        match Pair cmd book {
          pair(Maybe.some(Bend.Cli.Command.Command.GenBend), Result.done(book)):
            IO.print(String.concat("Generating bend:\n", Bend.gen_bend(book)))
          pair(Maybe.some(Bend.Cli.Command.Command.GenCore), Result.done(book)):
            IO.print(String.concat("Generating bend-core:\n", Bend.gen_core(book)))
          pair(Maybe.some(Bend.Cli.Command.Command.GenHvm), Result.done(book)):
            IO.print(String.concat("Generating hvm:\n", Bend.gen_hvm(book)))
          pair(Maybe.none, _):
            IO.print(Bend.usage)
          pair(_, Result.fail(err)):
            IO.print(String.concat("Compile error: ", err))
        }
      _:
        IO.print(Bend.usage)
    }
  }
