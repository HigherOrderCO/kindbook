use Bend/Parser/Fun/parse_pattern as .
use Bend/Fun/Pattern as Pattern
use Bend/Fun/FanKind as FanKind
use Bend/Parser as BP

// Parses a Fun syntax variable binding / pattern matching pattern.
// = The parsed pattern.
BP/Fun/parse_pattern : (BP Pattern)
| = do BP {
  let starts_with_num = do BP {
    ask x = (BP/peek_one)
    ret (Maybe/fold _ x Bool #False Char/is_digit)
  }
  let starts_with_nam = do BP {
    ask x = (BP/peek_one)
    ret (Maybe/fold _ x Bool #False BP/is_name_char)
  }
  ask BP/skp
  (BP/first_with_guard _ [
    ((BP/starts_with "(") , ./parse_pat_ctr_or_tup)
    ((BP/starts_with "$") , ./parse_pat_chn)
    ((BP/starts_with "'") , ./parse_pat_char)
    ((BP/starts_with "[") , ./parse_pat_lst)
    ((BP/starts_with "\""), ./parse_pat_str)
    ((BP/starts_with "*") , ./parse_pat_era)
    ((BP/starts_with "{") , ./parse_pat_dup)
    ((starts_with_num)    , ./parse_pat_num)
    ((starts_with_nam)    , ./parse_pat_var)
  ] (BP/fail _ "Expected pattern"))
}

./parse_pat_var : (BP Pattern)
| = do BP {
  ask nam = BP/parse_var_name
  ret #Var{#Some{nam}} :: Pattern
}

./parse_pat_str : (BP Pattern)
| = do BP {
  ask str = BP/parse_quoted_string
  ret #Str{str} :: Pattern
}

./parse_pat_num : (BP Pattern)
| = do BP {
  ask num = BP/parse_number
  match num {
    #U24{n}: (BP/pure _ #Num{n} :: Pattern)
    #I24{_}: (BP/fail _ "Only unsigned integers are supported in pattern matching")
    #F24{_}: (BP/fail _ "Only unsigned integers are supported in pattern matching")
  }
}

./parse_pat_lst : (BP Pattern)
| = do BP {
  ask elements = (BP/list_like _ BP/Fun/parse_pattern "[" "]" "," #False #False 0)
  ret #Lst{elements} :: Pattern
}

./parse_pat_era : (BP Pattern)
| = do BP {
  ask _ = (BP/consume "*")
  ret #Var{#None} :: Pattern
}

./parse_pat_dup : (BP Pattern)
| = do BP {
  ask els = (BP/list_like _ BP/Fun/parse_pattern "{" "}" "," #False #False 2)
  ret #Fan{#Dup els} :: Pattern
}

parse_pat_tup : Pattern -> (BP Pattern)
| = Î»head do BP {
  ask tail = (BP/list_like _ BP/Fun/parse_pattern "" ")" "," #True #False 1)
  ret #Fan{#Tup (head;;tail)} :: Pattern
}

parse_pat_ctr : Pattern -> (BP Pattern)
| #Var{#Some{name}} = do BP {
  ask args = (BP/list_like _ BP/Fun/parse_pattern "" ")" "" #False #False 0)
  ret #Ctr{name args} :: Pattern
}
| _ = (BP/fail _ "Expected constructor name")

./parse_pat_ctr_or_tup : (BP Pattern)
| = do BP {
  ask _      = (BP/consume "(")
  ask _      = (BP/skp)
  ask head   = (BP/Fun/parse_pattern)
  ask _      = (BP/skp)
  ask is_tup = (BP/try_consume ",")
  ask _      = (BP/skp)
  if is_tup {
    (parse_pat_tup head)
  } else {
    (parse_pat_ctr head)
  }
}

./parse_pat_chn : (BP Pattern)
| = do BP {
  ask _    = (BP/consume "$")
  ask _    = (BP/skp)
  ask name = (BP/parse_name "unscoped variable")
  ret #Chn{name} :: Pattern
}

./parse_pat_char : (BP Pattern)
| = do BP {
  ask char = BP/parse_quoted_char
  ret #Num{char} :: Pattern
}
