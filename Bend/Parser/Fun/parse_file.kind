use Bend/Parser/Fun/parse_file as .
use Bend/Fun/Adt as Adt
use Bend/Fun/Ctr as Ctr
use Bend/Fun/FnDef as FnDef
use Bend/Parser as BP
use Bend/Load/File as File

// Parses a complete book of definitions.
// Parses top-level definitions until the end of the input is reached.
// = A new ParseBook with the parsed definitions.
BP/Fun/parse_file : (BP File)
// TODO: Store file path
| = (./go #File{(BinMap/empty _) (BinMap/empty _) (BinMap/empty _) ""})

data ./TopLevel {
  #FunDef { def: FnDef }
  #TypeDef{ adt: Adt ctrs: (List Ctr) }
  // #ImpDef
  // #HVMDef
  // #Import
}

// Helper function to iteratively build the ParseBook.
./go : File -> (BP File)
| file = do BP {
  ask _   = BP/skp
  ask eof = BP/is_eof
  if eof do BP {
    ret file
  } else do BP {
    ask def  = ./parse_top_level
    ask file = (./add_top_level def file)
    (./go file)
  }
}

// Parses a single top-level definition.
./parse_top_level : (BP ./TopLevel)
| = do BP {
  let starts_with_fndef = do BP {
    ask c        = BP/peek_one
    let is_fndef = (Maybe/fold _ c Bool #False λc (Bool/or (BP/is_name_char c) (Char/eq c '(')))
    ret is_fndef
  }
  (BP/first_with_guard _ [
    ((BP/starts_with_keyword "type")  , (BP/map _ ./TopLevel BP/Fun/parse_adt (λx let (adt, ctrs) = x #TypeDef{adt ctrs})))
    ((BP/starts_with_keyword "object"), (BP/fail _ "not implemented"))
    ((BP/starts_with_keyword "hvm")   , (BP/fail _ "not implemented"))
    ((starts_with_fndef)              , (BP/map _ ./TopLevel BP/Fun/parse_fn_def (λx #FunDef{x})))
  ] (BP/fail _ "Expected top-level definition"))
}

// Adds a parsed top-level definition to the book.
// Updates the right fields in the book based on the type of the definition.
// - def: The parsed top-level definition.
// - book: The current ParseBook.
// = A new ParseBook with the top-level definition added.
./add_top_level : ./TopLevel -> File -> (BP File)
| #FunDef{def} #File{fun adts ctrs path} = do BP {
  // TODO: Check for repeats
  let fun = (BinMap/set _ fun (String/hash (FnDef/get_nam def)) def)
  ret #File{fun adts ctrs path} :: File
}
| #TypeDef{t_adt t_ctrs} #File{fun adts ctrs path} = do BP {
  let adts = (BinMap/set _ adts (String/hash (Adt/get_nam t_adt)) t_adt)
  let ctrs = (List/foldr _ t_ctrs _ ctrs (λctr λacc (BinMap/set _ acc (String/hash (Ctr/get_nam ctr)) ctr)))
  ret #File{fun adts ctrs path} :: File
}
