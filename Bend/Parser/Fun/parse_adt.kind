use Bend/Parser/Fun/parse_adt as .
use Bend/Fun/Adt as Adt
use Bend/Fun/Ctr as Ctr
use Bend/Fun/CtrField as CtrField
use Bend/Fun/Type as Type
use Bend/Parser as BP
use Bend/Fun/Source as Source

// Parses a Fun syntax ADT definition.
// = The parsed ADT and the list of ADT constructors.
BP/Fun/parse_adt : (BP (Pair Adt (List Ctr)))
| = do BP {
  ask _           = (BP/skp)
  ask ini_idx     = (BP/get_index)
  ask _           = (BP/parse_keyword "type")
  ask _           = (BP/skp)
  ask (nam, vars) = (./parse_name_and_vars)
  ask ctrs        = (./parse_ctrs nam vars [])
  ask end_idx     = (BP/get_index)
  let src         = (Source/from_file_span ini_idx end_idx)
  let adt         = #Adt{nam vars (List/map _ _ ctrs Ctr/get_nam) src} :: Adt
  ret (adt, ctrs) :: (_ & _)
}

// Parses the name and type vars part of the ADT definition.
// = The ADT name and type variables.
./parse_name_and_vars : (BP (Pair String (List String)))
| = do BP {
  ask has_parens = (BP/try_consume "(")
  if has_parens do BP {
    ask _    = (BP/skp)
    ask name = (BP/parse_name "datatype")
    ask _    = (BP/skp)
    ask vars = (BP/list_like _ (BP/parse_name "type variable") "" ")" "" #False #False 0)
    ask _    = (BP/skp)
    ask _    = (BP/consume "=")
    ret (name, vars) :: (_ & _)
  } else do BP {
    ask name = (BP/parse_name "datatype")
    ask _    = (BP/skp)
    ask vars = (BP/list_like _ (BP/parse_name "type variable") "" "=" "" #False #False 0)
    ret (name, vars) :: (_ & _)
  }
}

// Parses the constructors part of an ADT definition.
// - type_name: The name of the ADT being defined.
// - type_vars: The type variables of the ADT being defined.
// = A list of constructors.
./parse_ctrs : String -> (List String) -> (List Ctr) -> (BP (List Ctr))
| type_name type_vars acc = do BP {
  // TODO: Check that only previously defined vars occur in the constructors.
  //       This probably needs to be done later, after we have the full book.
  ask head = (parse_ctr type_name type_vars)
  ask _    = (BP/skp)
  let acc  = (head ;; acc) :: (List _)
  ask many = (BP/try_consume "|")
  if many {
    (./parse_ctrs type_name type_vars acc)
  } else {
    (BP/pure _ (List/reverse _ acc))
  }
}

// Parses a single constructor in an ADT definition.
parse_ctr : String -> (List String) -> (BP Ctr)
| adt_nam adt_var = do BP {
  ask _       = (BP/skp)
  ask ini_idx = (BP/get_index)
  ask parens  = (BP/try_consume "(")
  ask _       = (BP/skp)
  if parens do BP {
    ask nam     = (BP/parse_name "datatype constructor")
    let nam     = (String/concat [adt_nam "/" nam])
    ask fld     = (BP/list_like _ ./parse_field "" ")" "" #False #False 0)
    let typ     = (List/foldr _ (List/map _ _ fld CtrField/get_typ) _
                    #Ctr{adt_nam (List/map _ _ adt_var 位x #Var{x})} :: Type
                    位l 位r #Arr{l r})
    ask end_idx = (BP/get_index)
    ask (BP/Fun/check_repeated_ctr_fields fld nam ini_idx end_idx)
    ret #Ctr{nam adt_nam typ fld} :: Ctr
  } else do BP {
    ask nam     = (BP/parse_name "datatype constructor")
    let nam     = (String/concat [adt_nam "/" nam])
    let typ     = #Ctr{adt_nam (List/map _ _ adt_var 位x #Var{x})} :: Type
    ask end_idx = (BP/get_index)
    ask (BP/Fun/check_repeated_ctr_fields [] nam ini_idx end_idx)
    ret #Ctr{nam adt_nam typ []} :: Ctr
  }
}

// Parses a single field in a constructor definition.
./parse_field : (BP CtrField)
| = do BP {
  ask rec    = (BP/try_consume "~")
  ask _      = (BP/skp)
  ask paren  = (BP/try_consume "(")
  if paren do BP {
    ask _   = (BP/skp)
    ask nam = (BP/parse_name "datatype constructor field")
    ask _   = (BP/skp)
    ask ann = (BP/try_consume ":")
    ask typ = if ann do BP {
      ask (BP/skp)
      BP/Fun/parse_type_term
    } else do BP {
      ret #Any :: Type
    }
    ask _   = (BP/skp)
    ask _   = (BP/consume ")")
    ret #CtrField{nam rec typ} :: CtrField
  } else do BP {
    ask nam = (BP/parse_name "datatype constructor field")
    ret #CtrField{nam rec #Any} :: CtrField
  }
}

#test : (BP/run (Adt & (List Ctr)) BP/Fun/parse_adt "type A = A") == #Done{"" (
  #Adt{"A" [] ["A/A"] (Source/from_file_span 0 10)},
  [#Ctr{"A/A" "A" #Ctr{"A" []} []}])}

#test : (BP/Fun/parse_adt #State{"type A = A | B | C" 0}) == #Done{#Reply{#State{"" 18} (
  #Adt{"A" [] ["A/A" "A/B" "A/C"] (Source/from_file_span 0 18)},
  [#Ctr{"A/A" "A" #Ctr{"A" []} []} #Ctr{"A/B" "A" #Ctr{"A" []} []} #Ctr{"A/C" "A" #Ctr{"A" []} []}])}}

#test : (BP/Fun/parse_adt #State{"type A a = A | B | C" 0}) == #Done{#Reply{#State{"" 20} (
  #Adt{"A" ["a"] ["A/A" "A/B" "A/C"] (Source/from_file_span 0 20)},
  [#Ctr{"A/A" "A" #Ctr{"A" [#Var{"a"}]} []} #Ctr{"A/B" "A" #Ctr{"A" [#Var{"a"}]} []} #Ctr{"A/C" "A" #Ctr{"A" [#Var{"a"}]} []}])}}

#test : (BP/Fun/parse_adt #State{"type (List T) = Nil | (Cons (head: T) ~(tail: (List T)))" 0}) == #Done{#Reply{#State{"" 56} (
  #Adt{"List" ["T"] ["List/Nil" "List/Cons"] (Source/from_file_span 0 56)},
  [ #Ctr{"List/Nil" "List" #Ctr{"List" [#Var{"T"}]} []}
    #Ctr{"List/Cons" "List" #Arr{#Var{"T"} #Arr{#Ctr{"List" [#Var{"T"}]} #Ctr{"List" [#Var{"T"}]}}} [
      #CtrField{"head" #False #Var{"T"}} 
      #CtrField{"tail" #True  #Ctr{"List" [#Var{"T"}]}}]}])}}

#test : (BP/Fun/parse_adt #State{"type Pair = (Pair fst snd)" 0}) == #Done{#Reply{#State{"" 26} (
  #Adt{"Pair" [] ["Pair/Pair"] (Source/from_file_span 0 26)},
  [#Ctr{"Pair/Pair" "Pair" #Arr{#Any #Arr{#Any #Ctr{"Pair" []}}} [#CtrField{"fst" #False #Any} #CtrField{"snd" #False #Any}]}])}}
