use Bend/Fun/Pattern as Pattern
use Bend/Parser as BP

// Parses the left-hand side of a pattern-matching rule.
// - expected: The expected function name, if any.
// = The name of the function and a list of patterns.
BP/Fun/parse_rule_lhs : (Maybe String) -> (BP (Pair String (List Pattern)))
| expected = do BP {
  let p_nam = match expected {
    #Some{name}: do BP {
      ask _ = (BP/parse_keyword name)
      ret name
    }
    #None: BP/parse_top_level_name
  } :: (BP _)
  ask paren = (BP/try_consume "(")
  if paren do BP {
    ask _    = BP/skp
    ask name = p_nam
    ask _    = BP/skp
    ask pats = (BP/list_like _ BP/Fun/parse_pattern "" ")" "" #False #False 0)
    ask _    = BP/skp
    ask _    = (BP/consume "=")
    ret (name, pats) :: (Pair _ _)
  } else do BP {
    ask _    = BP/skp
    ask name = p_nam
    ask _    = BP/skp
    ask pats = (BP/list_like _ BP/Fun/parse_pattern "" "=" "" #False #False 0)
    ret (name, pats) :: (Pair _ _)
  }
}
