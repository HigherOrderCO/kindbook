use Bend/Parser as BP

// Checks if the input starts with the given keyword (a name followed by a non-name character).
// - keyword: The keyword to check for.
// = Parser that returns True if the input starts with the keyword, False otherwise.
BP/starts_with_keyword : String -> (BP Bool)
| keyword = do BP {
  ask found = (BP/peek_many (String/length keyword))
  if (Maybe/eq _ String/IsEqual found #Some{keyword}) do BP {
    ask nxt = (BP/peek_many #Succ{(String/length keyword)})
    match nxt {
      #None     : (BP/pure _ #True)
      #Some{val}: do BP {
        let last = (String/last val)
        (BP/pure _ (Maybe/fold _ last _ #True (位c (Bool/not (BP/is_name_char c)))))
      }
    }
  } else {
    (BP/pure _ #False)
  }
}


#test: (BP/run Bool (BP/starts_with_keyword "let")         "let x = 5")     == #Done{"let x = 5",     #True}
#test: (BP/run Bool (BP/starts_with_keyword "if")          "if\nx > 5")     == #Done{"if\nx > 5",     #True}
#test: (BP/run Bool (BP/starts_with_keyword "match")       "match(x)")      == #Done{"match(x)",      #True}
#test: (BP/run Bool (BP/starts_with_keyword "let")         "x let y = 5")   == #Done{"x let y = 5",   #False}
#test: (BP/run Bool (BP/starts_with_keyword "let")         "letter")        == #Done{"letter",        #False}
#test: (BP/run Bool (BP/starts_with_keyword "if")          "if")            == #Done{"if",            #True}
#test: (BP/run Bool (BP/starts_with_keyword "")            "(non-char)")    == #Done{"(non-char)",    #True}
#test: (BP/run Bool (BP/starts_with_keyword "longkeyword") "short")         == #Done{"short",         #False}
#test: (BP/run Bool (BP/starts_with_keyword "位")           "位 x.x")         == #Done{"位 x.x",         #True}
#test: (BP/run Bool (BP/starts_with_keyword "data type")   "data type Foo") == #Done{"data type Foo", #True}
