use Bend/Parser as BP

// Consumes at least one new line, skipping all trivia.
// = Indent level of the last line.
BP/parse_newlines : (BP U64)
| = do BP {
  ask _ = (BP/skp_inline #True)
  ask _ = (BP/consume "\n")
  ask n = (BP/take_while BP/is_inline_space)
  ask _ = if (List/any _ n (Char/eq '\t')) {
    (BP/fail _ "Tabs are not accepted for indentation.")
  } else do BP {
    ret 0
  }
  let n = (List/length_u64 _ n)
  ask c = (BP/peek_one)
  match c {
    #Some{c}:
      if (Char/eq c '\n') do BP {
        (BP/parse_newlines)
      } else {
        (BP/pure _ n)
      }
    #None: (BP/pure _ n)
  }
}

#test: (BP/run U64 BP/parse_newlines "  \n  abc") == #Done{"abc", 2}
#test: (BP/run U64 BP/parse_newlines "\n\n  abc") == #Done{"abc", 2}
#test: (BP/run U64 BP/parse_newlines "abc")       == #Fail{"Expected \n"}
#test: (BP/run U64 BP/parse_newlines "  abc")     == #Fail{"Expected \n"}
#test: (BP/run U64 BP/parse_newlines "  \n \n  ") == #Done{"", 2}
#test: (BP/run U64 BP/parse_newlines "\n\t")      == #Fail{"Tabs are not accepted for indentation."}
#test: (BP/run U64 BP/parse_newlines "\n  \t")    == #Fail{"Tabs are not accepted for indentation."}
#test: (BP/run U64 BP/parse_newlines "\n")        == #Done{"", 0}
#test: (BP/run U64 BP/parse_newlines "")          == #Fail{"Expected \n"}
