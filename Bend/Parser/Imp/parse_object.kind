use Bend/Parser as BP
use Bend/Fun/Adt as Adt
use Bend/Fun/Ctr as Ctr
use Bend/Fun/Source as Source
use Bend/Fun/Type as Type

// Parses an object definition.
// -: The parser.
// - indent: The current indentation level.
// = A ParseResult containing the parsed Adt and the next indentation level.
BP/Imp/parse_object : U64 -> (BP (Adt & Ctr))
| indent = do BP {
  ask ini_idx = (BP/get_index)
  ask _       = (BP/parse_keyword "object")
  ask (BP/skp_inline #True)

  ask name    = (BP/parse_top_level_name)
  ask (BP/skp_inline #True)

  // Parse type variables
  ask paren   = (BP/starts_with "(")
  ask vars    = if paren {
    (BP/list_like _ (BP/parse_name "type variable") "(" ")" "," #True #False 0)
  } else do BP {
    ret []
  }
  ask (BP/skp_inline #True)

  // Parse fields
  ask fields  = (BP/starts_with "{")
  ask fields  = if fields {
    (BP/list_like _ BP/Imp/parse_ctr_field "{" "}" "," #True #False 0)
  } else do BP {
    ret []
  }
  let fld_typ = (List/map _ _ fields Bend/Fun/CtrField/get_typ)

  ask end_idx = (BP/get_index)
  ask _       = (BP/Fun/check_repeated_ctr_fields fields name ini_idx end_idx)

  // Create Adt
  let typ     = #Ctr{name (List/map _ Type vars λx #Var{x})} :: Type
  let typ     = (List/foldr _ fld_typ _ typ (λfield λacc #Arr{field acc}))
  let ctr     = #Ctr{name name typ fields} :: Ctr
  let src     = (Source/from_file_span ini_idx end_idx)
  let adt     = #Adt{name vars [name] src} :: Adt

  ret (adt, ctr)
}

#test: (BP/run (Adt & Ctr) (BP/Imp/parse_object 0) "object A") == #Done{"", (
  #Adt{"A" [] ["A"] (Source/from_file_span 0 1)}, #Ctr{"A" "A" #Ctr{"A" []} []})}

#test: (BP/run (Adt & Ctr) (BP/Imp/parse_object 0) "object Box { a }") == #Done{"", (
  #Adt{"Box" [] ["Box"] (Source/from_file_span 0 1)},
  #Ctr{"Box" "Box" #Arr{#Any #Ctr{"Box" []}} [#CtrField{"a" #False #Any}]})}


#test: (BP/run (Adt & Ctr) (BP/Imp/parse_object 0) "object V2 { x: f24, y: f24 }") == #Done{"", (
  #Adt{"V2" [] ["V2"] (Source/from_file_span 0 28)},
  #Ctr{"V2" "V2"
    #Arr{#F24 #Arr{#F24 #Ctr{"V2" []}}}
    [#CtrField{"x" #False #F24} #CtrField{"y" #False #F24}]})}

#test: (BP/run (Adt & Ctr) (BP/Imp/parse_object 0) "object Pair(A, B) { x: A, y: B }") == #Done{"", (
  #Adt{"Pair" ["A" "B"] ["Pair"] (Source/from_file_span 0 32)},
  #Ctr{"Pair" "Pair"
    #Arr{#Var{"A"} #Arr{#Var{"B"} #Ctr{"Pair" [#Var{"A"} #Var{"B"}]}}}
    [#CtrField{"x" #False #Var{"A"}} #CtrField{"y" #False #Var{"B"}}]})}
