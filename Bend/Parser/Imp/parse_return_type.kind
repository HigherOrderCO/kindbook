use Bend/Parser as BP
use Bend/Fun/Type as Type

Bend/Parser/Imp/parse_return_type : (Parser (Maybe Type))
| = do Parser {
  ask typ = (BP/try_consume "->")
  if typ do Parser {
    ask _   = (BP/skp_inline)
    ask typ = (BP/Imp/parse_type_expr #True)
    ret #Some{typ}
  } else do Parser {
    ret #None
  }
}

#test: (BP/Imp/parse_return_type (Parser/new_state "-> Nat")) == #Done{#Reply{#State{"" 6} #Some{#Var{"Nat"}}}}
#test: (BP/Imp/parse_return_type (Parser/new_state "not ret")) == #Done{#Reply{#State{"not ret" 0} #None}} 
#test: (BP/Imp/parse_return_type (Parser/new_state "-> List(Pair(Nat, String))")) == #Done{#Reply{#State{"" 26} #Some{#Ctr{"List" [#Ctr{"Pair" [#Var{"Nat"} #Var{"String"}]}]}}}} 
