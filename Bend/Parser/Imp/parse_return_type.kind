use Bend/Parser as BP
use Bend/Fun/Type as Type

Bend/Parser/Imp/parse_return_type : (BP (Maybe Type))
| = do BP {
  ask typ = (BP/try_consume "->")
  if typ do BP {
    ask _   = (BP/skp_inline #True)
    ask typ = (BP/Imp/parse_type #True #True)
    ret #Some{typ}
  } else do BP {
    ret #None
  }
}

#test: (BP/run (Maybe Type) BP/Imp/parse_return_type "-> Nat:")       == #Done{":", #Some{#Var{"Nat"}}}
#test: (BP/run (Maybe Type) BP/Imp/parse_return_type "not ret")       == #Done{"not ret", #None}
#test: (BP/run (Maybe Type) BP/Imp/parse_return_type "-> L(P(N, S))") == #Done{"", #Some{#Ctr{"L" [#Ctr{"P" [#Var{"N"} #Var{"S"}]}]}}}
#test: (BP/run (Maybe Type) BP/Imp/parse_return_type "-> A,B")        == #Done{"", #Some{#Tup{[#Var{"A"} #Var{"B"}]}}}
