use Bend/Parser/Imp/parse_type as .
use Bend/Parser as BP
use Bend/Fun/Type as Type

// Parses a type expression, returning the type and the type variables.
BP/Imp/parse_type : Bool -> Bool -> (BP Type)
| inline tup = do BP {
  ask (BP/skp_inline inline)
  ask ini_idx = (BP/get_index)
  ask typ     = (./parse_primary inline)
  ask typ     = (./parse_suffix inline tup typ)
  ask end_idx = BP/get_index
  ret typ
}

./parse_primary : Bool -> (BP Type)
| inline =
  let starts_with_name = do BP {
    ask c = (BP/peek_one)
    ret (Maybe/fold _ c Bool #False BP/is_name_char)
  }
  (BP/first_with_guard _ [
    ((BP/starts_with_keyword "Any") , ./parse_any)
    ((BP/starts_with_keyword "None"), ./parse_none)
    ((BP/starts_with_keyword "_")   , ./parse_hole)
    ((BP/starts_with_keyword "u24") , ./parse_u24)
    ((BP/starts_with_keyword "i24") , ./parse_i24)
    ((BP/starts_with_keyword "f24") , ./parse_f24)
    ((BP/starts_with "(")       , ./parse_parens)
    ((starts_with_name)             , (./parse_var_or_ctr inline))
  ] (BP/fail _ "Expected type expression"))

./parse_suffix : Bool -> Bool -> Type -> (BP Type)
| inline tup head = do BP {
  ask (BP/skp_inline inline)
  let g_tup = if tup { (BP/starts_with ",") } else { (BP/pure _ #False) } :: (BP Bool)
  (BP/first_with_guard _ [
    (g_tup                    , (./parse_tup inline tup head))
    ((BP/starts_with "->"), (./parse_arr inline tup head))
  ] (BP/pure _ head))
}

./parse_parens : (BP Type)
| = do BP {
  ask _   = (BP/consume "(")
  ask typ = (BP/Imp/parse_type #False #True)
  ask _   = (BP/consume ")")
  ret typ
}

./parse_any : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "Any")
  ret #Any
}

./parse_none : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "None")
  ret #Non
}

./parse_hole : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "_")
  ret #Hol
}

./parse_u24 : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "u24")
  ret #U24
}

./parse_i24 : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "i24")
  ret #I24
}

./parse_f24 : (BP Type)
| = do BP {
  ask _ = (BP/parse_keyword "f24")
  ret #F24
}

./parse_var_or_ctr : Bool -> (BP Type)
| inline = do BP {
  ask nam = (BP/parse_var_name)
  ask _   = (BP/skp_inline inline)
  ask bra = (BP/starts_with "(")
  if bra do BP {
    ask args = (BP/list_like _ (BP/Imp/parse_type #False #False) "(" ")" "," #True #False 0)
    ret #Ctr{nam args}
  } else do BP {
    ret #Var{nam}
  }
}

./parse_arr : Bool -> Bool -> Type -> (BP Type)
| inline tup fst = do BP {
  ask _   = (BP/consume "->")
  ask snd = (BP/Imp/parse_type inline tup)
  ret #Arr{fst snd}
}

./parse_tup : Bool -> Bool -> Type -> (BP Type)
| inline tup head = do BP {
  ask _    = (BP/consume ",")
  ask tail = (BP/Imp/parse_type inline tup)
  match tail {
    #Tup{tail}: (BP/pure _ #Tup{head;;tail})
    _         : (BP/pure _ #Tup{[head tail]})
  }
}

#test: (BP/run Type (. #True  #False) "Nat")                 == #Done{"", #Var{"Nat"}}
#test: (BP/run Type (. #True  #False) "(Nat)")               == #Done{"", #Var{"Nat"}}
#test: (BP/run Type (. #True  #False) "(\nNat )")            == #Done{"", #Var{"Nat"}}
#test: (BP/run Type (. #True  #False) "\nNat")               == #Fail{"Expected type expression"}
#test: (BP/run Type (. #False #False) "\nNat")               == #Done{"", #Var{"Nat"}}
#test: (BP/run Type (. #True  #True ) "Nat,Nat")             == #Done{"", #Tup{[#Var{"Nat"} #Var{"Nat"}]}}
#test: (BP/run Type (. #True  #False) "Nat,Nat")             == #Done{",Nat", #Var{"Nat"}}
#test: (BP/run Type (. #True  #True ) "Nat,\nNat")           == #Fail{"Expected type expression"}
#test: (BP/run Type (. #False #True ) "Nat,\nNat")           == #Done{"", #Tup{[#Var{"Nat"} #Var{"Nat"}]}}
#test: (BP/run Type (. #True  #True ) "(Nat,Nat)")           == #Done{"", #Tup{[#Var{"Nat"} #Var{"Nat"}]}}
#test: (BP/run Type (. #True  #True ) "(Nat,\nNat)")         == #Done{"",  #Tup{[#Var{"Nat"} #Var{"Nat"}]}}
#test: (BP/run Type (. #True  #False) "Pair(\nNat, \nBool)") == #Done{"",  #Ctr{"Pair" [#Var{"Nat"} #Var{"Bool"}]}}
#test: (BP/run Type (. #True  #False) "A -> B")              == #Done{"", #Arr{#Var{"A"} #Var{"B"}}}
#test: (BP/run Type (. #False #False) "A\n ->\n B")          == #Done{"", #Arr{#Var{"A"} #Var{"B"}}}
#test: (BP/run Type (. #True  #False) "A\n ->\n B")          == #Done{"\n ->\n B", #Var{"A"}}
#test: (BP/run Type (. #True  #False) "A -> B -> C")         == #Done{"",  #Arr{#Var{"A"} #Arr{#Var{"B"} #Var{"C"}}}}
#test: (BP/run Type (. #True  #False) "u24")                 == #Done{"", #U24}
#test: (BP/run Type (. #True  #False) "u24a")                == #Done{"", #Var{"u24a"}}
#test: (BP/run Type (. #True  #False) "i24")                 == #Done{"", #I24}
#test: (BP/run Type (. #True  #False) "f24")                 == #Done{"", #F24}
#test: (BP/run Type (. #True  #False) "_")                   == #Done{"", #Hol}
#test: (BP/run Type (. #True  #False) "_a")                  == #Done{"", #Var{"_a"}}
#test: (BP/run Type (. #True  #False) "Any")                 == #Done{"", #Any}
#test: (BP/run Type (. #True  #False) "None")                == #Done{"", #Non}
