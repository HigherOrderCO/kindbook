use Bend/Parser as BP

// Parses a restricted name.
// - kind: Name kind (e.g., "Datatype", "Variable").
// = Parser that returns the parsed name if successful.
BP/parse_name : String -> (BP String)
| kind = do BP {
  ask name = (BP/take_while BP/is_name_char)
  if (String/eq name "") {
    (BP/fail String (String/append "Expected " (String/append kind " name")))
  } else if (String/contains name "__") {
    (BP/fail String "Names are not allowed to contain \"__\".")
  } else if (String/starts_with name "//") {
    (BP/fail String "Names are not allowed to start with \"//\".")
  } else if (Maybe/fold Char (String/head name) Bool #False (Char/is_digit)) {
    (BP/fail String "Names are not allowed to start with a number.")
  } else {
    (BP/pure String name)
  }
}
#test: (BP/run String (BP/parse_name "Variable") "validName"           ) == #Done{"", "validName"}
#test: (BP/run String (BP/parse_name "Function") "func123"             ) == #Done{"", "func123"}
#test: (BP/run String (BP/parse_name "Datatype") ""                    ) == #Fail{"Expected Datatype name"}
#test: (BP/run String (BP/parse_name "Variable") "abcinvalid__name123" ) == #Fail{"Names are not allowed to contain \"__\"."}
#test: (BP/run String (BP/parse_name "Function") "//invalidStart"      ) == #Fail{"Names are not allowed to start with \"//\"."}
#test: (BP/run String (BP/parse_name "Function") "123abc"              ) == #Fail{"Names are not allowed to start with a number."}
#test: (BP/run String (BP/parse_name "Variable") "valid_-./name"       ) == #Done{"", "valid_-./name"}
#test: (BP/run String (BP/parse_name "Datatype") "Valid Name"          ) == #Done{" Name", "Valid"}
#test: (BP/run String (BP/parse_name "Function") "validName"           ) == #Done{"", "validName"}
#test: (BP/run String (BP/parse_name "Variable") " invalidLeadingSpace") == #Fail{"Expected Variable name"}
