use Bend/Parser as BP

// Parses a list-like structure with possibly trailing separators.
// - A: Element type.
// - parser  : Function to parse a single element.
// - start   : String that marks the start of the list.
// - end     : String that marks the end of the list.
// - sep     : String used as separator between elements.
// - hard_sep: If the separator is mandatory or optional.
// - inline  : If all elements and separators must be on the same line.
// - min_els : Minimum number of elements required.
// = List of parsed elements.
BP/list_like: ∀(A: *) (BP A) -> String -> String -> String -> Bool -> Bool -> U64 -> (BP (List A))
| A parser start end sep hard_sep inline min_els = do BP {
  ask (BP/consume start)
  ask (BP/skp_inline inline)
  ask elements =
    if hard_sep {
      (parse_hard A parser end sep inline [] min_els)
    } else {
      (parse_soft A parser end sep inline [] min_els)
    }
  ret (List/reverse A elements)
}

// Parse elements with optional separators
parse_soft: ∀(A: *) (BP A) -> String -> String -> Bool -> (List A) -> U64 -> (BP (List A))
| A parser end sep inline acc 0 = do BP {
  ask (BP/skp_inline inline)
  ask is_end = (BP/starts_with end)
  if is_end do BP {
    ask (BP/consume end)
    ret acc
  } else do BP {
    ask el = parser
    ask (BP/skp_inline inline)
    ask (BP/try_consume sep)
    (parse_soft A parser end sep inline (el;;acc) 0)
  }
}
| A parser end sep inline acc 1+n = do BP {
  ask (BP/skp_inline inline)
  ask el = parser
  ask (BP/skp_inline inline)
  ask (BP/try_consume sep)
  (parse_soft A parser end sep inline (el;;acc) n)
}

// Parse elements with mandatory separators
parse_hard: ∀(A: *) (BP A) -> String -> String -> Bool -> (List A) -> U64 -> (BP (List A))
| A parser end sep inline acc 2+n = do BP {
  ask (BP/skp_inline inline)
  ask el = parser
  ask (BP/skp_inline inline)
  ask (BP/consume sep)
  (parse_hard A parser end sep inline (el;;acc) (+ n 1))
}
| A parser end sep inline acc 1 = do BP {
  ask (BP/skp_inline inline)
  ask el = parser
  ask (BP/skp_inline inline)
  ask is_sep  = (BP/try_consume sep)
  if is_sep {
    (parse_hard A parser end sep inline (el;;acc) 0)
  } else {
    do BP {
      ask (BP/skp_inline inline)
      ask (BP/consume end)
      ret (el;;acc)
    }
  }
}
| A parser end sep inline acc 0 = do BP {
  ask _      = (BP/skp_inline inline)
  ask is_end = (BP/starts_with end)
  if is_end do BP {
    ask (BP/consume end)
    ret acc
  } else do BP {
    ask el     = parser
    ask _      = (BP/skp_inline inline)
    ask is_sep = (BP/try_consume sep)
    if is_sep {
      (parse_hard A parser end sep inline (el;;acc) 0)
    } else do BP {
      ask (BP/consume end)
      ret (el;;acc)
    }
  }
}

#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 0) "[]"            ) == #Done{"", []}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 0) "[foo]"         ) == #Done{"", ["foo"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 0) "[foo,bar,baz]" ) == #Done{"", ["foo" "bar" "baz"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 0) "[foo,bar,baz,]") == #Done{"", ["foo" "bar" "baz"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 2) "[foo,bar]"     ) == #Done{"", ["foo" "bar"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "[" "]" "," #False #False 2) "[foo]"         ) == #Fail{"Expected variable name"}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "(foo,bar,baz)" ) == #Done{"", ["foo" "bar" "baz"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "(foo,bar,baz,)") == #Done{"", ["foo" "bar" "baz"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "(foo bar,baz)" ) == #Fail{"Expected )"}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "(foo)"         ) == #Done{"", ["foo"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "(foo,)"        ) == #Done{"", ["foo"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 1) "(foo)"         ) == #Done{"", ["foo"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 1) "(foo,)"        ) == #Done{"", ["foo"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 2) "(foo,bar)"     ) == #Done{"", ["foo" "bar"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 2) "(foo,bar,)"    ) == #Done{"", ["foo" "bar"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 2) "( foo , bar )" ) == #Done{"", ["foo" "bar"]}
#test: (BP/run (List String) (BP/list_like String (BP/parse_var_name) "(" ")" "," #True  #False 0) "( foo , bar )" ) == #Done{"", ["foo" "bar"]}
