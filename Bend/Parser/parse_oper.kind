// Parses a Bend numeric operator.
// = The parsed operator.
Bend/Parser/parse_oper : (Parser Bend/Fun/Op)
= (Bend/Parser/first_with_guard Bend/Fun/Op [
    #Pair{(Bend/Parser/try_consume "+")  (Parser/pure Bend/Fun/Op #Add)}
    #Pair{(Bend/Parser/try_consume "-")  (Parser/pure Bend/Fun/Op #Sub)}
    #Pair{(Bend/Parser/try_consume "**") (Parser/pure Bend/Fun/Op #Pow)}
    #Pair{(Bend/Parser/try_consume "*")  (Parser/pure Bend/Fun/Op #Mul)}
    #Pair{(Bend/Parser/try_consume "/")  (Parser/pure Bend/Fun/Op #Div)}
    #Pair{(Bend/Parser/try_consume "%")  (Parser/pure Bend/Fun/Op #Rem)}
    #Pair{(Bend/Parser/try_consume "<<") (Parser/pure Bend/Fun/Op #Shl)}
    #Pair{(Bend/Parser/try_consume ">>") (Parser/pure Bend/Fun/Op #Shr)}
    #Pair{(Bend/Parser/try_consume "<=") (Parser/pure Bend/Fun/Op #Lte)}
    #Pair{(Bend/Parser/try_consume ">=") (Parser/pure Bend/Fun/Op #Gte)}
    #Pair{(Bend/Parser/try_consume "<")  (Parser/pure Bend/Fun/Op #Ltn)}
    #Pair{(Bend/Parser/try_consume ">")  (Parser/pure Bend/Fun/Op #Gtn)}
    #Pair{(Bend/Parser/try_consume "==") (Parser/pure Bend/Fun/Op #Eql)}
    #Pair{(Bend/Parser/try_consume "!=") (Parser/pure Bend/Fun/Op #Neq)}
    #Pair{(Bend/Parser/try_consume "&")  (Parser/pure Bend/Fun/Op #And)}
    #Pair{(Bend/Parser/try_consume "|")  (Parser/pure Bend/Fun/Op #Or)}
    #Pair{(Bend/Parser/try_consume "^")  (Parser/pure Bend/Fun/Op #Xor)}
  ] (Parser/fail Bend/Fun/Op "Expected operator"))

#test: ((Bend/Parser/parse_oper #State{"+ 1"     0})) == (#Done{#Reply{#State{" 1" 1} #Add}})
#test: ((Bend/Parser/parse_oper #State{"** 2"    0})) == (#Done{#Reply{#State{" 2" 2} #Pow}})
#test: ((Bend/Parser/parse_oper #State{"<= 3"    0})) == (#Done{#Reply{#State{" 3" 2} #Lte}})
#test: ((Bend/Parser/parse_oper #State{"!= 4"    0})) == (#Done{#Reply{#State{" 4" 2} #Neq}})
#test: ((Bend/Parser/parse_oper #State{"^ 5"     0})) == (#Done{#Reply{#State{" 5" 1} #Xor}})
#test: ((Bend/Parser/parse_oper #State{"invalid" 0})) == (#Fail{#Error{0 "Expected operator"}})
