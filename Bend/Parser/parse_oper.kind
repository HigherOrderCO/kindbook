use Bend/Fun/Op as Op
use Bend/Parser as BP

// Parses a Bend numeric operator.
// = The parsed operator.
BP/parse_oper : (BP Op)
= (BP/first_with_guard _ [
  ((BP/try_consume "+") , (BP/pure _ #Add))
  ((BP/try_consume "-") , (BP/pure _ #Sub))
  ((BP/try_consume "**"), (BP/pure _ #Pow))
  ((BP/try_consume "*") , (BP/pure _ #Mul))
  ((BP/try_consume "/") , (BP/pure _ #Div))
  ((BP/try_consume "%") , (BP/pure _ #Rem))
  ((BP/try_consume "<<"), (BP/pure _ #Shl))
  ((BP/try_consume ">>"), (BP/pure _ #Shr))
  ((BP/try_consume "<="), (BP/pure _ #Lte))
  ((BP/try_consume ">="), (BP/pure _ #Gte))
  ((BP/try_consume "<") , (BP/pure _ #Ltn))
  ((BP/try_consume ">") , (BP/pure _ #Gtn))
  ((BP/try_consume "=="), (BP/pure _ #Eql))
  ((BP/try_consume "!="), (BP/pure _ #Neq))
  ((BP/try_consume "&") , (BP/pure _ #And))
  ((BP/try_consume "|") , (BP/pure _ #Or))
  ((BP/try_consume "^") , (BP/pure _ #Xor))
] (BP/fail _ "Expected operator"))

#test: (BP/run Op BP/parse_oper "+ 1"    ) == #Done{" 1", #Add}
#test: (BP/run Op BP/parse_oper "** 2"   ) == #Done{" 2", #Pow}
#test: (BP/run Op BP/parse_oper "<= 3"   ) == #Done{" 3", #Lte}
#test: (BP/run Op BP/parse_oper "!= 4"   ) == #Done{" 4", #Neq}
#test: (BP/run Op BP/parse_oper "^ 5"    ) == #Done{" 5", #Xor}
#test: (BP/run Op BP/parse_oper "invalid") == #Fail{"Expected operator"}
