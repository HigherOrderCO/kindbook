use Bend/Parser as BP

// Consumes a specific string from the input.
// - target: String to consume.
// = Parser that returns unit if successful, or fails if not found.
BP/consume : String -> (BP U64)
| target #State{input index indent file} =
  if (String/starts_with input target) {
    #Done{
      #Reply{
        state: 
          let length = (String/length_u64 target)
          #State{
            (String/drop input (U64/to_nat length))
            index: (+ index length)
            indent: indent
            file: file
          }
        value: 0
      }
    }
  } else {
    #Fail{
      #Error{
        index: index
        error: (String/append "Expected " target)
      }
    }
  }

#test: ((BP/consume "abc") (#State{"abcdef" 0 0 ""})) == (#Done{#Reply{#State{"def" 3 0 ""} 0}})
#test: ((BP/consume "abc") (#State{"abxdef" 0 0 ""})) == (#Fail{#Error{0 "Expected abc"}})
#test: ((BP/consume "")    (#State{"abcdef" 0 0 ""})) == (#Done{#Reply{#State{"abcdef" 0 0 ""} 0}})
