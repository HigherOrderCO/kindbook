use Bend/Parser as BP

// Checks if the input string starts with an operator.
// = True if the input starts with an operator, False otherwise.
BP/starts_with_oper : (BP Bool)
| = do BP {
  ask one = (BP/peek_many #1)
  let got = match one {
    #Some{c}: (String/contains "+-*/%&|^" c)
    #None   : #False
  } :: Bool
  if got do BP {
    ret #True
  } else do BP {
    ask two = (BP/peek_many #2)
    let got = match two {
      #Some{c}: if (List/contains _ String/IsEqual ["<<" ">>" "<=" ">=" "==" "!=" "**"] c) { #True } else { #False }
      #None   : #False
    } :: Bool
    ret got
  }
}

#test: (BP/run Bool BP/starts_with_oper "+")   == #Done{"+"  , #True}
#test: (BP/run Bool BP/starts_with_oper "-")   == #Done{"-"  , #True}
#test: (BP/run Bool BP/starts_with_oper "*")   == #Done{"*"  , #True}
#test: (BP/run Bool BP/starts_with_oper "/")   == #Done{"/"  , #True}
#test: (BP/run Bool BP/starts_with_oper "%")   == #Done{"%"  , #True}
#test: (BP/run Bool BP/starts_with_oper "<<")  == #Done{"<<" , #True}
#test: (BP/run Bool BP/starts_with_oper ">>")  == #Done{">>" , #True}
#test: (BP/run Bool BP/starts_with_oper "<=")  == #Done{"<=" , #True}
#test: (BP/run Bool BP/starts_with_oper ">=")  == #Done{">=" , #True}
#test: (BP/run Bool BP/starts_with_oper "==")  == #Done{"==" , #True}
#test: (BP/run Bool BP/starts_with_oper "!=")  == #Done{"!=" , #True}
#test: (BP/run Bool BP/starts_with_oper "&")   == #Done{"&"  , #True}
#test: (BP/run Bool BP/starts_with_oper "|")   == #Done{"|"  , #True}
#test: (BP/run Bool BP/starts_with_oper "^")   == #Done{"^"  , #True}
#test: (BP/run Bool BP/starts_with_oper "**")  == #Done{"**" , #True}
#test: (BP/run Bool BP/starts_with_oper "err") == #Done{"err", #False}
#test: (BP/run Bool BP/starts_with_oper "")    == #Done{""   , #False}
#test: (BP/run Bool BP/starts_with_oper " ")   == #Done{" "  , #False}
