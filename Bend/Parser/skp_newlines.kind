use Bend/Parser as BP

Bend/Parser/skp_newlines : (Parser U64)
| = do Parser {
  ask n = (Parser/take_while BP/is_inline_space)
  ask _ = if (List/any _ n (Char/eq '\t')) {
    (Parser/fail _ "Tabs are not accepted for indentation.")
  } else do Parser {
    ret 0
  }
  let n = (List/length_u64 _ n)
  ask c = (Parser/peek_one)
  match c {
    #Some{c}:
      if (Char/eq c '\n') do Parser {
        ask (Parser/advance_one)
        (BP/skp_newlines)
      } else {
        (Parser/pure _ n)
      }
    #None: (Parser/pure _ n)
  }
}

#test: (BP/skp_newlines (Parser/new_state "  \n  abc")) == #Done{#Reply{#State{"abc" 5} 2}}
#test: (BP/skp_newlines (Parser/new_state "\n\n  abc")) == #Done{#Reply{#State{"abc" 4} 2}}
#test: (BP/skp_newlines (Parser/new_state "abc"))       == #Done{#Reply{#State{"abc" 0} 0}}
#test: (BP/skp_newlines (Parser/new_state "  abc"))     == #Done{#Reply{#State{"abc" 2} 2}}
#test: (BP/skp_newlines (Parser/new_state "  \n\n  "))  == #Done{#Reply{#State{"" 6} 2}}
#test: (BP/skp_newlines (Parser/new_state "\t"))        == #Fail{#Error{1 "Tabs are not accepted for indentation."}}
#test: (BP/skp_newlines (Parser/new_state "  \t"))      == #Fail{#Error{3 "Tabs are not accepted for indentation."}}
#test: (BP/skp_newlines (Parser/new_state ""))          == #Done{#Reply{#State{"" 0} 0}}
