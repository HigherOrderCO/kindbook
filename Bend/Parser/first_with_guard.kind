use Bend/Parser as BP

// Parses with the first parser that has a guard parser that succeeds.
// - A: Result type.
// - ps: List of guard-parser pairs.
// - dflt: Default parser.
// = First parser whose guard succeeds, or default.
BP/first_with_guard : âˆ€(A: *) (List (Pair (BP Bool) (BP A))) -> (BP A) -> (BP A)
| A []               dflt = dflt
| A ((guard, p);;ps) dflt = do BP {
  ask is_guard = guard
  if (is_guard) {
    p
  } else {
    (BP/first_with_guard A ps dflt)
  }
}

#test: (BP/run U64 (BP/first_with_guard U64 [] (BP/pure U64 42)) "") == #Done{"", 42}

#test: (BP/run U64 (BP/first_with_guard U64 [
  ((BP/pure Bool #True) , (BP/pure U64 1))] (BP/pure U64 0)) "") == #Done{"", 1}

#test: (BP/run U64 (BP/first_with_guard U64 [
  ((BP/pure Bool #False), (BP/pure U64 1))
  ((BP/pure Bool #True) , (BP/pure U64 2))] (BP/pure U64 0)) "") == #Done{"", 2}

#test: (BP/run U64 (BP/first_with_guard U64 [
  ((BP/pure Bool #False), (BP/pure U64 1))
  ((BP/pure Bool #False), (BP/pure U64 2))] (BP/pure U64 0)) "") == #Done{"", 0}
