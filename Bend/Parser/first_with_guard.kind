// Parses with the first parser that has a guard parser that succeeds.
// - A: Result type.
// - ps: List of guard-parser pairs.
// - dflt: Default parser.
// = First parser whose guard succeeds, or default.
Bend/Parser/first_with_guard : âˆ€(A: *) (List (Pair (Parser Bool) (Parser A))) -> (Parser A) -> (Parser A)
| A #Nil                       dflt = dflt
| A #Cons{#Pair{guard p} tail} dflt = do Parser {
  ask is_guard = guard
  if (is_guard) {
    p
  } else {
    (Bend/Parser/first_with_guard A tail dflt)
  }
}

#test: (Parser/run U64 (Bend/Parser/first_with_guard U64 #Nil (Parser/pure U64 42)) "") == #Some{42}
#test: (Parser/run U64 (Bend/Parser/first_with_guard U64 #Cons{#Pair{(Parser/pure Bool #True) (Parser/pure U64 1)} #Nil} (Parser/pure U64 0)) "") == #Some{1}
#test: (Parser/run U64 (Bend/Parser/first_with_guard U64 #Cons{#Pair{(Parser/pure Bool #False) (Parser/pure U64 1)} #Cons{#Pair{(Parser/pure Bool #True) (Parser/pure U64 2)} #Nil}} (Parser/pure U64 0)) "") == #Some{2}
#test: (Parser/run U64 (Bend/Parser/first_with_guard U64 #Cons{#Pair{(Parser/pure Bool #False) (Parser/pure U64 1)} #Cons{#Pair{(Parser/pure Bool #False) (Parser/pure U64 2)} #Nil}} (Parser/pure U64 0)) "") == #Some{0}
