// Desugars and apply all the Term-level transformations to a Book.
Bend/Run/to-bend-core : Bend/Fun/Book -> (Bend Bend/Fun/Book)
| book = do Bend {
  // TODO: get encoding from options
  ask book = (Bend/Transform/encode-adts Bend/Run/AdtEncoding/NumScott book)

  ask book = (Bend/Transform/fix-ctr-pats book)
  let book = (Bend/Transform/resolve-refs book)
  ask book = (Bend/Transform/desugar-match-defs book)
  ask book = (Bend/Transform/fix-match-terms book)

  ask book = (Bend/Transform/rebuild-match-ctrs book)

  ask book = (Bend/Transform/desugar-local-def book)
  ask book = (Bend/Transform/desugar-open book)
  ask book = (Bend/Transform/desugar-bend book)
  ask book = (Bend/Transform/desugar-fold book)

  let book = (Bend/Transform/unique-names book)
  let book = (Bend/Transform/desugar-use book)

  let book = (Bend/Transform/linearize-matches book)     // TODO: other strategy for linearization
  let book = (Bend/Transform/linearize-match-with book)

  ask book = (Bend/Transform/encode-match-terms Bend/Run/AdtEncoding/NumScott book)
  ask _    = (Bend/Transform/unbound-vars book)              // Sanity check

  let book = (Bend/Transform/unique-names book)
  let book = (Bend/Transform/desugar-use book)

  let book = (Bend/Transform/unique-names book)
  let book = (Bend/Transform/linearize-vars book)
  ask _    = (Bend/Transform/unbound-vars book)              // Sanity check

  let book = (Bend/Transform/float-combinators book 64)  // TODO: get max net size from options
  ask _    = (Bend/Transform/unbound-refs book)

  let book = (Bend/Transform/unique-names book)
  #Done{book}
}
