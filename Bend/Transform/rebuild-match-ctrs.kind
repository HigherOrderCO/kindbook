rebuild-match-arm : Bend/Fun/Book -> (Maybe String) -> Bend/Fun/MatchRule -> (Bend Bend/Fun/MatchRule)
| book bnd #MatchRule{nam bnds body} = do Bend {
  ask nam = (Maybe/to-result _ _ nam "Match with no constructor")
  let bod = #Use{bnd (Bend/Fun/Term/foldl-app #Ref{nam} (List/map Bend/Fun/Term/var-or-era bnds)) body}
  #Done{#MatchRule{#Some{nam} bnds bod}}
}

rebuild-switch-arm : (Maybe String) -> String -> U64 -> (Pair U64 Bend/Fun/Term) -> Bend/Fun/Term
| bnd pred last_arm #Pair{idx bod} = 
  if (U64/eq idx last_arm)
    then #Use{bnd (Bend/Fun/Term/add-num #Var{pred} last_arm) bod}
    else #Use{bnd #Num{#U24{idx}} bod}

rebuild-term : Bend/Fun/Book -> Bend/Fun/Term -> (Bend Bend/Fun/Term)
| book term = do Bend {
  ask term = (Bend/Fun/Term/mmap-children (λ_ (rebuild-term book)) term)
  match term {
    #Mat{bnd arg with_bnd with_arg arms}: do Bend {
      ask arms = (List/mmap (rebuild-match-arm book bnd) arms)
      #Done{#Mat{bnd arg with_bnd with_arg arms}}
    }
    #Swt{bnd arg with_bnd with_arg pred arms}: do Bend {
      ask pred = (Maybe/to-result _ _ pred "Switch with no pred")
      let last_arm = (- (List/length arms) 1)
      let rebuilt_arms = (List/map (rebuild-switch-arm bnd pred last_arm) (List/enumerate arms))
      #Done{#Swt{bnd arg with_bnd with_arg #Some{pred} rebuilt_arms}}
    }
    _: #Done{term}
  }
}

rebuild-rule : Bend/Fun/Book -> Bend/Fun/Rule -> (Bend Bend/Fun/Rule)
| book #Rule{pats bod} = do Bend {
  ask bod = (rebuild-term book bod)
  #Done{#Rule{pats bod}}
}

rebuild-def : Bend/Fun/Book -> Bend/Fun/FnDef -> (Bend Bend/Fun/FnDef)
| book #FnDef{name typ check rules src} = do Bend {
  ask rules = (List/mmap (rebuild-rule book) rules)
  #Done{#FnDef{name typ check rules src}}
}

// Rebuilds match and switch terms to include 'Use' terms in their arms.
Bend/Transform/rebuild-match-ctrs : Bend/Fun/Book -> (Bend Bend/Fun/Book)
| book = do Bend {
  ask defs = (List/mmap (λpair do Bend {
    let #Pair{key def} = pair
    ask def = (rebuild-def book def)
    #Done{#Pair{key def}}
  }) (BinMap/to-list (Bend/Fun/Book/defs book)))
  #Done{(Bend/Fun/Book/set-defs book (BinMap/from-list defs))}
}
