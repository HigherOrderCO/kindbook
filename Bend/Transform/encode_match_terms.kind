use Bend/Fun/Book as Book
use Bend/Fun/Term as Term
use Bend/Fun/FnDef as FnDef

// Encodes pattern matching expressions in the book into their
// core form. Must be run after [`Ctr::fix_match_terms`].
//
// ADT matches are encoded based on `adt_encoding`.
//
// Num matches are encoded as a sequence of native num matches (on 0 and 1+).
Bend/Transform/encode_match_terms : Bend/Run/AdtEncoding -> Book -> (Bend Book)
| encoding book =
  (Book/mmap_rules _ Bend/Monad λr do Bend {
    let #Rule{pats body} = r
    ask body = (encode_term encoding body)
    ret #Rule{pats body}
  } book)

encode_term : Bend/Run/AdtEncoding -> Term -> (Bend Term)
| encoding term = do Bend {
  ask term = (Term/mmap_children _ Bend/Monad (λ_ (encode_term encoding)) term)
  match term {
    #Mat{bnd arg with_bnd with_arg arms}: do Bend {
      ask if (List/is_nil _ with_bnd) { #Done{0} } else { #Fail{"with-bnd not empty"} }
      ask if (List/is_nil _ with_arg) { #Done{0} } else { #Fail{"with-arg not empty"} }
      (encode_match encoding arg arms)
    }
    #Swt{bnd arg with_bnd with_arg pred arms}: do Bend {
      ask if (List/is_nil _ with_bnd) { #Done{0} } else { #Fail{"with-bnd not empty"} }
      ask if (List/is_nil _ with_arg) { #Done{0} } else { #Fail{"with-arg not empty"} }
      (encode_switch arg pred arms)
    }
    _: #Done{term}
  }
}
  

encode_match : Bend/Run/AdtEncoding -> Term -> (List Bend/Fun/MatchRule) -> (Bend Term) 
| Scott arg arms = do Bend {
  let arms = (List/map _ _ arms (λrule 
    let #MatchRule{_ bnd bod} = rule
    (Term/foldr_lam bod bnd)))
  ret (Term/foldl_app arg arms)
}
| NumScott arg arms = do Bend {
  let arms = (List/map _ _ arms (λrule 
    let #MatchRule{_ bnd bod} = rule
    (Term/foldr_lam bod bnd)))
  ask match = match arms {
    // If only one arm, we need to add an Era to the end of the tag matching switch
    #Cons{arm arms}: match arms {
      #Nil: do Bend {
        let bod = #Swt{#None #Var{"%tag"} #Nil #Nil #None #Cons{arm #Cons{#Era #Nil}}}
        ret #Lam{#Var{#Some{"%tag"}} bod}
      }
      _: (make_num_scott_swt arms)
    }
    _: (make_num_scott_swt arms)
  }
  ret #App{arg match}
}


make_num_scott_swt : (List Term) -> (Bend Term)
| #Nil            = #Fail{"No match arms"}
| #Cons{arm #Nil} = #Done{#Lam{#Var{#None} arm}}
| #Cons{arm arms} = do Bend {
  let bod = #Swt{#None #Var{"%tag"} [] [] #None (arm;;arms)} :: Term
  ret #Lam{#Var{#Some{"%tag"}} bod}
}

// Convert into a sequence of native switches, decrementing by 1 each switch.
// `switch n {0: A; 1: B; _ n-2   : (C n-2)}`
// is converted to
// `switch n {0: A; _: λ%x match %x {0: B; _: λn-2 (C n-2)}}`
encode_switch : Term -> (Maybe String) -> (List Term) -> (Bend Term)
| arg pred arms = do Bend {
  let (nums, succ) = (List/unsnoc _ arms)
  ask succ         = (Maybe/to_result _ _ succ "Switch with only 1 arms")
  let succ         = #Lam{#Var{pred} succ} :: Term
  let body         = (List/foldr _ (List/enumerate_u64 _ nums) _ succ (λpair λacc 
    let (i, arm) = pair
    let arms = [arm acc] :: (List Term)
    if (U64/eq i 0) {
      #Swt{#None arg [] [] #None arms}
    } else {
      #Lam{#Var{#Some{"%x"}} #Swt{#None #Var{"%x"} [] [] #None arms}}
    }
  ))
  ret body
}
