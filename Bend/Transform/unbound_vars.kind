use Bend/Fun/Book as Book
use Bend/Fun/FnDef as FnDef
use Bend/Fun/Pattern as Pat
use Bend/Fun/Term as Term

// Checks for unbound variables in an entire Book
Bend/Transform/unbound_vars : Book -> (Bend U64)
| #Book{defs _ _} = do Bend {
  for def in (BinMap/values _ defs) {
    (unbound_vars_def def)
  }
  ret 0
}

// Checks for unbound variables in a function definition
unbound_vars_def : FnDef -> (Bend U64)
| #FnDef{_ _ _ rules _} = do Bend {
  let global = (BinMap/empty _)
  ask global = for rule in rules {
    let #Rule{pats body} = rule
    let scope = (List/concat_map _ _ pats Pat/binds)
    (unbound_vars_term body scope global)
  }
  let errs = (List/foldr _ (BinMap/values _ global) (List _) [] (λpair λacc
    let (var, declared, used) = pair
    if (U64/eq declared 0) {
      #Cons{(String/concat ["Unbound unscoped variable '" var "'"]) acc}
    } else if (Bool/and (U64/eq declared 1) (U64/eq used 1)) {
      acc
    } else if (U64/eq used 0) {
      #Cons{(String/concat ["Unscoped variable '" var "' is never used"]) acc}
    } else {
      #Cons{(String/concat ["Unscoped variable '" var "' is declared or used more than once"]) acc}
    }))
  match errs {
    #Nil        : #Done{0}
    #Cons{err _}: #Fail{err}
  } :: (Bend _)
}

// Checks for unbound variables in a term
unbound_vars_term : Term -> (List String) -> (BinMap (String & U64 & U64)) -> (Bend (BinMap (String & U64 & U64)))
| #Var{nam} scope global = 
  if (scope_contains scope nam) {
    #Done{global}
  } else {
    #Fail{(String/concat ["Unbound variable '" nam "'"])}
  }

| #Lnk{nam} scope global = 
  #Done{(use_global global nam)}

| term scope global = do Bend {
  let global = match term {
    #Lam{pat _}  : (bnd_global global (Pat/unscoped_binds pat))
    #Let{pat _ _}: (bnd_global global (Pat/unscoped_binds pat))
    _            : global
  } :: (BinMap _)
  ask global = for c in (Term/children term) {
    let (bnd, child) = c
    (unbound_vars_term child (List/append _ bnd scope) global)
  }
  ret global
}


// Adds a list of names to the scope
add_bnd : (List String) -> (List String) -> (List String)
| scope names = (List/append _ names scope)

// Checks if a name is in the scope
scope_contains : (List String) -> String -> Bool
| scope nam = (List/contains _ String/IsEqual scope nam)

// Updates the usage count of a global variable
use_global : (BinMap (String & U64 & U64)) -> String -> (BinMap (String & U64 & U64))
| global nam with (BinMap/get _ global (String/hash nam))
. | #Some{(_, bnd, uses)} = (BinMap/set _ global (String/hash nam) (nam, bnd, (+ uses 1)))
. | #None                 = (BinMap/set _ global (String/hash nam) (nam, 0, 1))

// Updates the binding count of global variables
bnd_global : (BinMap (String & U64 & U64)) -> (List String) -> (BinMap (String & U64 & U64))
| global (nam;;nams) = 
  let global = match (BinMap/get _ global (String/hash nam)) {
    #Some{x}: 
      let (_, bnd, uses) = x :: (_ & _ & _)
      (BinMap/set _ global (String/hash nam) #Pair{nam #Pair{(+ bnd 1) uses}}) :: (BinMap _)
    #None: 
      (BinMap/set _ global (String/hash nam) #Pair{nam #Pair{1 0}})
  } :: (BinMap _)
  (bnd_global global nams)
| global [] = global
