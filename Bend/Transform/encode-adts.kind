Bend/Transform/encode-adts : Bend/Run/AdtEncoding -> Bend/Fun/Book -> (Bend Bend/Fun/Book)
| encoding book = do Bend {
  let adt_nams = (List/map (位adt (Bend/Fun/Adt/nam adt)) (BinMap/values (Bend/Fun/Book/adts book)))
  (List/mfoldl (encode-adt encoding) book adt_nams)
}

encode-ctr-scott : Bend/Fun/Adt -> Bend/Fun/Adt/Ctr -> (List Bend/Fun/FnDef)
| #Adt{adt_nam _ ctrs src} #Ctr{nam _ typ fields} = 
  let args = (List/map Bend/Fun/Adt/CtrField/nam fields)
  let bod  = #Var{nam}
  let bod  = (Bend/Fun/Term/foldl-app bod (List/map #Var args))
  let bod  = (Bend/Fun/Term/foldr-lam bod (List/map #Some ctrs))
  let bod  = (Bend/Fun/Term/foldr-lam bod (List/map #Some args))
  #Cons{#FnDef{nam typ #True #Cons{#Rule{#Nil bod} #Nil} src} #Nil}

encode-ctr-num-scott : Bend/Fun/Adt -> (Pair U64 Bend/Fun/Adt/Ctr) -> (List Bend/Fun/FnDef)
| #Adt{adt_nam _ ctrs src} #Pair{tag #Ctr{nam _ typ fields}} = 
  let tag_nam = (String/append nam "/tag")
  let tag_def = (Bend/Fun/FnDef/new-gen tag_nam #Cons{#Rule{#Nil #Num{#U24{tag}}} #Nil} src #True)
  let x       = "%x"
  let bod     = #App{#Var{x} #Ref{tag_nam}}
  let bod     = (Bend/Fun/Term/foldl-app bod (List/map (位a #Var{(Bend/Fun/Adt/CtrField/nam a)}) fields))
  let bod     = #Lam{#Var{#Some{x}} bod}
  let bod     = (Bend/Fun/Term/foldr-lam bod (List/map (位f #Some{(Bend/Fun/Adt/CtrField/nam f)}) fields))
  let ctr_def = #FnDef{nam typ #True #Cons{#Rule{#Nil bod} #Nil} src}
  #Cons{tag_def #Cons{ctr_def #Nil}}

encode-adt : Bend/Run/AdtEncoding -> Bend/Fun/Book -> String -> (Bend Bend/Fun/Book)
| encoding book adt_name = do Bend {
  ask adt  = (Bend/Fun/Book/get-adt book adt_name)
  ask ctrs = (List/mmap (Bend/Fun/Book/get-ctr book) (Bend/Fun/Adt/ctr adt))
  let defs = match encoding {
    Scott:    (List/map (encode-ctr-scott adt) ctrs)
    NumScott: (List/map (encode-ctr-num-scott adt) (List/enumerate ctrs))
  }
  let book = (List/foldr (位def book (Bend/Fun/Book/add-fn-def book def)) book (List/concat defs))
  #Done{book}
}
