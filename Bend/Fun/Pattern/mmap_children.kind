use Bend/Fun/Pattern as Pat

// Maps the children of a pattern using a monadic action.
// - f: The monadic function to apply to each child.
// - pat: The pattern whose children we want to map over.
// = The pattern with its children mapped.
Pat/mmap_children :
  ∀(M: * -> *) (Monad M) -> (Pat -> (M Pat)) -> Pat -> (M Pat)
| M #Monad{pure bind} f #Var{x}    = (pure _ #Var{x})
| M #Monad{pure bind} f #Chn{x}    = (pure _ #Chn{x})
| M #Monad{pure bind} f #Num{x}    = (pure _ #Num{x})
| M #Monad{pure bind} f #Str{x}    = (pure _ #Str{x})
| M #Monad{pure bind} f #Fan{k ps} = (bind _ _ (List/mmap M #Monad{pure bind} _ _ ps f) λps (pure _ #Fan{k ps}))
| M #Monad{pure bind} f #Ctr{n ps} = (bind _ _ (List/mmap M #Monad{pure bind} _ _ ps f) λps (pure _ #Ctr{n ps}))
| M #Monad{pure bind} f #Lst{ps}   = (bind _ _ (List/mmap M #Monad{pure bind} _ _ ps f) λps (pure _ #Lst{ps}))
