use Bend/Fun/Term as Term

// Collects all the free variables that a term has
// - term: The term to analyze
// = A list of all the free variables in the term, in the order they appear
Term/free_vars : Term -> (List String)
| term = (List/dedup _ String/Ord (go term (BinMap/empty _)))

go : Term -> (BinMap Unit) -> (List String)
| #Var{nam} scope with (BinMap/contains _ scope (String/hash nam))
. | #True  = []
. | #False = [nam]
| term scope =
  let cs = (Term/children term)
  (List/concat _ (List/map (Pair _ _) _
    λ{#Pair{bnd child}: (go child (add_scope bnd scope))}
    cs))

add_scope : (List String) -> (BinMap Unit) -> (BinMap Unit)
| bnd scope =
  let bnd = (List/map _ (Pair Bits Unit)
              λb #Pair{(String/hash b) #Unit}
              bnd)
  (BinMap/union _ (BinMap/from_list Unit bnd) scope)
