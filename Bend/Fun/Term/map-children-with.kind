// Bend/Fun/Term/map-children_with

Bend/Fun/Term/map-children_with <S: Type> (f: (List String) -> Bend/Fun/Term -> S -> (Pair Bend/Fun/Term S)) (t: Bend/Fun/Term) (s: S) : (Pair Bend/Fun/Term S)
  ((Bend/Fun/Term/mmap-children (Monad.state S) f t) s)

// Assuming State monad is defined elsewhere
// If not, you might need to define it:

// Monad/state <S: Type> : (Monad (λx S -> (Pair x S)))
//   (Monad.new
//     (λx λs Pair.new x s)
//     (λma λf λs
//       let pair = (ma s)
//       let a    = (Pair.fst pair)
//       let s    = (Pair.snd pair)
//       (f a s)
//     )
//   )
