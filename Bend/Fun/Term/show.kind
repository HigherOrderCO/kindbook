// Bend/Fun/Term/show

Bend/Fun/Term/show : (Show Bend/Fun/Term)
  (Show.new Bend/Fun/Term/show/show_term)

Bend/Fun/Term/show/show_with (with_bnd: (List (Maybe String))) (with_arg: (List Bend/Fun/Term)) : String
| [] [] = ""
| with_bnd with_arg =
  (String/concat "with " (String/concat (String/join ", " (List/map Bend/Fun/Term/show/show_bnd_arg (List/zip with_bnd with_arg))) " "))

Bend/Fun/Term/show/show_bnd_arg (pair: (Pair (Maybe String) Bend/Fun/Term)) : String
  let bnd = (Pair.fst pair)
  let arg = (Pair.snd pair)
  (String/concat (Bend/Fun/show_bnd bnd) (String/concat " = " (Bend/Fun/Term/show/show_term arg)))

Bend/Fun/Term/show/show_term_app (term: Bend/Fun/Term) : String
| (#App fun arg) = (String/concat (Bend/Fun/Term/show/show_term_app fun) (String/concat " " (Bend/Fun/Term/show/show_term arg)))
| term           = (Bend/Fun/Term/show/show_term term)

Bend/Fun/Term/show/show_term (term: Bend/Fun/Term) : String
| (#Lam pat bod) = (String/concat "λ" (String/concat (Bend/Fun/Pattern/show pat) (String/concat " " (Bend/Fun/Term/show/show_term bod))))
| (#Var nam)     = nam
| (#Link nam)    = (String/concat "$" nam)
| (#Let pat val nxt) = (String/concat "let " (String/concat (Bend/Fun/Pattern/show pat) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term val) (String/concat "; " (Bend/Fun/Term/show/show_term nxt))))))
| (#With typ bod)    = (String/concat "with " (String/concat typ (String/concat " { " (String/concat (Bend/Fun/Term/show/show_term bod) " }"))))
| (#Ask pat val nxt) = (String/concat "ask " (String/concat (Bend/Fun/Pattern/show pat) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term val) (String/concat "; " (Bend/Fun/Term/show/show_term nxt))))))
| (#Use nam val nxt) = (String/concat "use " (String/concat (Bend/Fun/show_bnd nam) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term val) (String/concat "; " (Bend/Fun/Term/show/show_term nxt))))))
| (#App fun arg)     = (String/concat "(" (String/concat (Bend/Fun/Term/show/show_term_app (#App fun arg)) ")"))
| (#Fan Bend/Fun/FanKind/FanKind.#Tup els) = (String/concat "(" (String/concat (String/join ", " (List/map Bend/Fun/Term/show/show_term els)) ")"))
| (#Fan Bend/Fun/FanKind/FanKind.#Dup els) = (String/concat "{" (String/concat (String/join " " (List/map Bend/Fun/Term/show/show_term els)) "}"))
| (#Num val)     = (Bend/Fun/Num/show val)
| (#Str val)     = (String/concat "\"" (String/concat val "\""))
| (#List els)    = (String/concat "[" (String/concat (String/join ", " (List/map Bend/Fun/Term/show/show_term els)) "]"))
| (#Oper opr fst snd) = (String/concat "(" (String/concat (Bend/Fun/Op/show opr) (String/concat " " (String/concat (Bend/Fun/Term/show/show_term fst) (String/concat " " (String/concat (Bend/Fun/Term/show/show_term snd) ")"))))))
| (#Mat bnd arg with_bnd with_arg arms) =
  (String/concat "match " (String/concat (Bend/Fun/show_bnd bnd) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term arg) (String/concat " " (String/concat (Bend/Fun/Term/show/show_with with_bnd with_arg) (String/concat "{ " (String/concat (String/join "; " (List/map Bend/Fun/MatchRule/show arms)) " }"))))))))
| (#Swt bnd arg with_bnd with_arg pred arms) =
  (String/concat "switch " (String/concat (Bend/Fun/show_bnd bnd) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term arg) (String/concat " " (String/concat (Bend/Fun/Term/show/show_with with_bnd with_arg) (String/concat "{ " (String/concat (Bend/Fun/Term/show/show_switch_arms 0 pred arms) " }"))))))))
| (#Fold bnd arg with_bnd with_arg arms) =
  (String/concat "fold " (String/concat (Bend/Fun/show_bnd bnd) (String/concat " = " (String/concat (Bend/Fun/Term/show/show_term arg) (String/concat " " (String/concat (Bend/Fun/Term/show/show_with with_bnd with_arg) (String/concat "{ " (String/concat (String/join "; " (List/map Bend/Fun/MatchRule/show arms)) " }"))))))))
| (#Bend bnd arg cond step base) =
  (String/concat "bend " (String/concat (String/join ", " (List/map Bend/Fun/Term/show/show_bnd_init (List/zip bnd arg))) (String/concat " { " (String/concat "when " (String/concat (Bend/Fun/Term/show/show_term cond) (String/concat ": " (String/concat (Bend/Fun/Term/show/show_term step) (String/concat "; " (String/concat "else: " (String/concat (Bend/Fun/Term/show/show_term base) " }")))))))))
| (#Open typ var bnd bod) =
  (String/concat "open " (String/concat typ (String/concat " " (String/concat (Bend/Fun/show_bnd var) (String/concat (String/join "" (List/map (λx String/concat " " (Bend/Fun/show_bnd x)) bnd)) (String/concat "; " (Bend/Fun/Term/show/show_term bod)))))))
| (#Ref nam) = nam
| (#Def def nxt) = (String/concat "def " (String/concat (Bend/Fun/FnDef/show def) (String/concat "\n" (Bend/Fun/Term/show/show_term nxt))))
| #Era = "*"

Bend/Fun/Term/show/show_switch_arms (n: Nat) (pred: (Maybe String)) (arms: (List Bend/Fun/Term)) : String
| n pred []         = ""
| n pred [arm]      = (String/concat "_ " (String/concat (Bend/Fun/show_bnd pred) (String/concat ": " (Bend/Fun/Term/show/show_term arm))))
| n pred (arm:arms) = (String/concat (Nat/show n) (String/concat ": " (String/concat (Bend/Fun/Term/show/show_term arm) (String/concat "; " (Bend/Fun/Term/show/show_switch_arms (Nat/succ n) pred arms)))))

Bend/Fun/Term/show/show_bnd_init (pair: (Pair (Maybe String) Bend/Fun/Term)) : String
  let fst = (Pair.fst pair)
  let snd = (Pair.snd pair)
  (String/concat (Bend/Fun/show_bnd fst) (String/concat " = " (Bend/Fun/Term/show/show_term snd)))
