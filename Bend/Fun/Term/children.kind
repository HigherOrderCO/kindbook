use Bend/Fun/MatchRule as MatchRule
use Bend/Fun/Term as Term

Child : * = (Pair (List String) Term)

// Returns a list of pairs, each containing a list of bound names and the corresponding child term.
// - term: The term to get children and bindings from.
// = A list of pairs, each containing bound names and a child ter.
Term/children : Term -> (List (Pair (List String) Term))
| #Var{_} = []
| #Lnk{_} = []
| #Num{_} = []
| #Str{_} = []
| #Ref{_} = []
| #Era    = []
| #Def{#FnDef{nam _ _ _ _} nxt} = [#Pair{[nam] nxt}]
| #Opn{_ _ bnd bod} = [#Pair{(List/concat_maybes String bnd) bod}]
| #Wth{_ bod}       = [#Pair{[] bod}]
| #App{fun arg}     = [#Pair{[] fun} #Pair{[] arg}]
| #Opr{_ fst snd}   = [#Pair{[] fst} #Pair{[] snd}]
| #Fan{_ els}       = (List/map _ _ els λx #Pair{[] x})
| #Lst{els}         = (List/map _ _ els λx #Pair{[] x})
| #Lam{pat bod}     = [#Pair{(Bend/Fun/Pattern/binds pat) bod}]
| #Let{pat val nxt} = [#Pair{[] val} #Pair{(Bend/Fun/Pattern/binds pat) nxt}]
| #Ask{pat val nxt} = [#Pair{[] val} #Pair{(Bend/Fun/Pattern/binds pat) nxt}]
| #Use{nam val nxt} = [#Pair{[] val} #Pair{(Maybe/to_list _ nam) nxt}]

| #Mat{bnd arg with_bnd with_arg arms} =
  (List/concat Child [
    [#Pair{[] arg}]
    (List/map _ _ with_arg λx #Pair{[] x})
    (List/map _ _ arms     (rule_children bnd with_bnd))
  ])

| #Swt{bnd arg with_bnd with_arg pred arms} =
  let #Pair{a_num a_pred} = (List/unsnoc Term arms)
  (List/concat Child [
    [#Pair{[] arg}]
    (List/map _ _ with_arg                 λx #Pair{[] x})
    (List/map _ _ a_num                    λx #Pair{(List/concat_maybes _ (List/concat _ [[bnd] with_bnd])) x})
    (List/map _ _ (Maybe/to_list _ a_pred) λx #Pair{(List/concat_maybes _ (List/concat _ [[bnd] with_bnd [pred]])) x})
  ])

| #Fld{bnd arg with_bnd with_arg arms} =
  (List/concat Child [
    [#Pair{[] arg}]
    (List/map _ (Pair _ _) with_arg λx #Pair{[] x})
    (List/map _ _ arms     (rule_children bnd with_bnd))
  ])

| #Bnd{bnd arg cond step base} =
  (List/concat Child [
    (List/map _ _ arg λx #Pair{[] x})
    [#Pair{(List/concat_maybes _ bnd) cond}
     #Pair{(List/concat_maybes _ bnd) step}
     #Pair{(List/concat_maybes _ bnd) base}]
  ])

rule_children : (Maybe String) -> (List (Maybe String)) -> MatchRule -> (Pair (List String) Term)
| bnd with_bnd #MatchRule{nam bndr bod} =
  #Pair{(List/concat_maybes String (List/concat _ [[bnd] with_bnd bndr])) bod}
