// Bend/Fun/Term/children

Bend/Fun/Term/children : Bend/Fun/Term -> (List (Pair (List String) Bend/Fun/Term))
| #Var{_} = []
| #Lnk{_} = []
| #Num{_} = []
| #Str{_} = []
| #Ref{_} = []
| #Era    = []
| #Def{#FnDef{nam _ _ _ _} nxt} = [#Pair{[nam] nxt}]
| #Opn{_ _ bnd bod} = [#Pair{(List/concat-maybes _ bnd) bod}]
| #Wth{_ bod}       = [#Pair{[] bod}]
| #App{fun arg}     = [#Pair{[] fun} #Pair{[] arg}]
| #Opr{_ fst snd}   = [#Pair{[] fst} #Pair{[] snd}]
| #Fan{_ els}       = (List/map _ _ (λx #Pair{[] x}) els)
| #Lst{els}         = (List/map _ _ (λx #Pair{[] x}) els)
| #Lam{pat bod}     = [#Pair{(Bend/Fun/Pattern/binds pat) bod}]
| #Let{pat val nxt} = [#Pair{[] val} #Pair{(Bend/Fun/Pattern/binds pat) nxt}]
| #Ask{pat val nxt} = [#Pair{[] val} #Pair{(Bend/Fun/Pattern/binds pat) nxt}]
| #Use{nam val nxt} = [#Pair{[] val} #Pair{(Maybe/to-list _ nam) nxt}]
| #Mat{bnd arg with_bnd with_arg arms} =
  (List/concat _ [
    [#Pair{[] arg}]
    (List/map _ _ λx #Pair{[] x} with_arg)
    (List/map _ _ λ{#MatchRule{_ bndr bod}: #Pair{(List/concat-maybes _ (List/concat _ [bnd with_bnd bndr])) bod}} arms)
  ])
| #Swt{bnd arg with_bnd with_arg pred arms} =
  let #Pair{a_num a_pred} = (List/unsnoc _ arms)
  (List/concat _ [
    [#Pair{[] arg}]
    (List/map _ _ λx #Pair{[] x} with_arg)
    (List/map _ _ λx (List/concat-maybes _ (List/concat _ [bnd with_bnd])) a_num)
    (List/map _ _ λx (List/concat-maybes _ (List/concat _ [bnd with_bnd pred])) (Maybe/to-list _ a_pred))
  ])
| #Fld{bnd arg with_bnd with_arg arms} =
  (List/concat _ [
    [#Pair{[] arg}]
    (List/map _ _ λx #Pair{[] x} with_arg)
    (List/map _ _ λ{#MatchRule{_ bndr bod}: #Pair{(List/concat-maybes _ (List/concat _ [bndr with_bnd bnd])) bod}} arms)
  ])
| #Bnd{bnd arg cond step base} =
  (List/concat _ [
    (List/map _ _ (λx #Pair{[] x}) arg)
    [#Pair{(List/concat-maybes _ bnd) cond}
     #Pair{(List/concat-maybes _ bnd) step}
     #Pair{(List/concat-maybes _ bnd) base}]
  ])
