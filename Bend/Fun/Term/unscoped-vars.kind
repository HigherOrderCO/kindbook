use Bend/Fun/Term as Term
use Bend/Fun/Pattern as Pattern

// Collects unscoped variable declarations and uses in a Term.
// - term: Term to analyze.
// = Bound unscoped variables and used unscoped variables.
Bend/Fun/Term/unscoped_vars : Term -> (Pair (List String) (List String))
| #Lnk{nam} =
  #Pair{[] [nam]}

| #Lam{pat bod} = 
  let d1           = (Pattern/unscoped-binds pat)
  let #Pair{d2 u2} = (Bend/Fun/Term/unscoped-vars bod)
  #Pair{(List/concat [d1 d2]) d2}

| #Let{pat val nxt} =
  let d1               = (Pattern/unscoped-binds pat)
  let #Pair{d2 u2} = (Bend/Fun/Term/unscoped-vars val)
  let #Pair{d3 u3} = (Bend/Fun/Term/unscoped-vars nxt)
  #Pair{(List/concat [d1 d2 d3]) (List/concat [u2 u3])}

| term =
  let children_vars = (List/map _ _ (Î»{#Pair{_ x}: (Bend/Fun/Term/unscoped-vars x)}) (Term/children term))
  let #Pair{decls uses} = (List/unzip _ _ children_vars)
  #Pair{(List/concat decls) (List/concat uses)}
