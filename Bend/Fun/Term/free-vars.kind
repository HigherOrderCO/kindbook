use Bend/Fun/Term as Term

Term/free-vars : Term -> (List String)
| term = (List/dedup (go term (BinMap/empty _)))

go : Term -> (BinMap Unit) -> (List String)
| #Var{nam} scope with (BinMap/contains _ scope (String/hash nam))
. | #True  = []
. | #False = [nam]
| term scope =
  let cs = (Term/children term)
  (List/concat _ (List/map _ _
    {λ{#Pair{bnd child}: (go child (add-scope bnd scope))} : (Pair _ _) -> (List String)}
    cs))

add-scope : (List (Maybe String)) -> (BinMap Unit) -> (BinMap Unit)
| bnd scope =
  let bnd_map = (List/map _ _ λb #Pair{(String/hash b) #Unit} bnd)
  (BinMap/union (BinMap/from-list bnd_map) scope)
