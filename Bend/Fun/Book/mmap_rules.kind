// Bend/Fun/Book/mmap_rules

Bend/Fun/Book/mmap_rules <M: Type -> Type> (m: Monad M) (f: Bend/Fun/Rule/Rule -> M Bend/Fun/Rule/Rule) (book: Bend/Fun/Book/Book) : (M Bend/Fun/Book/Book)
  do m {
    ask defs = (BinMap/mmap m (Bend/Fun/Book/mmap_rules/mmap_def m f) (Bend/Fun/Book/Book.defs book))
    let #Book{adts ctrs} = book
    return #Book{defs adts ctrs}
  }

Bend/Fun/Book/mmap_rules/mmap_def <M: Type -> Type> (m: Monad M) (f: Bend/Fun/Rule/Rule -> M Bend/Fun/Rule/Rule) (def: Bend/Fun/FnDef/FnDef) : (M Bend/Fun/FnDef/FnDef)
  do m {
    ask rules = (List/mmap m f (Bend/Fun/FnDef/FnDef.rules def))
    return (Bend/Fun/FnDef/FnDef.new
      (Bend/Fun/FnDef/FnDef.name def)
      (Bend/Fun/FnDef/FnDef.type def)
      (Bend/Fun/FnDef/FnDef.check def)
      rules
      (Bend/Fun/FnDef/FnDef.src def))
  }
