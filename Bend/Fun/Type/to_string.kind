use Bend/Fun/Type as Type

// Converts a Type to a String
Type/to_string : Type -> String
| #Any          = "Any"
| #Hol          = "_"
| #Var{name}    = name
| #Arr{dom cod} = (String/concat ["(" (Type/to_string dom) " -> " (Type/show_arr cod) ")"])
| #Ctr{nam arg} =
  let arg = (String/join " " (List/map _ _ Type/to_string arg))
  (String/concat ["(" nam " " arg ")"])
| #Tup{els}     =
  let els_str = (String/join ", " (List/map _ _ Type/to_string els))
  (String/concat ["(" els_str ")"])
| #U24          = "u24"
| #I24          = "i24"
| #F24          = "f24"
| #Non          = "None"
| #Num{t}       = (String/concat ["(Number " (Type/to_string t) ")"])
| #Int{t}       = (String/concat ["(Integer " (Type/to_string t) ")"])


// Convert a sequence of arrow types to a non_parenthesized sequence of arrow strings.
Type/show_arr : Type -> String
| #Arr{dom cod} = (String/concat [(Type/to_string dom) " -> " (Type/show_arr cod)])
| t             = (Type/to_string t)
