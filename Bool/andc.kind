use Bool/ as B/

// Performs logical And with complement 1st & ~2nd.
// 1st: The 1st boolean value.
// 2nd: The 2nd boolean value.
// = True if '1st' is true and '2nd' is false, False otherwise.
B/andc
: ∀(a: B/Bool)
  ∀(b: B/Bool)
  B/Bool
= λ{
  #True: λ{
    #False: #True{}
    #True: #False{}
  }
  #False: λb #False{}
}


//TEST//

use Bool/ as B/
use Equal/ as E/

T0 
: (E/Equal B/Bool (B/andc #True{} #False{}) (#True{}))
= #Refl{}

T1 
: (E/Equal B/Bool (B/andc #True{} #True{}) (#False{}))
= #Refl{}

T2 
: (E/Equal B/Bool (B/andc #False{} #True{}) (#False{}))
= #Refl{}

T3 
: (E/Equal B/Bool (B/andc #False{} #False{}) (#False{}))
= #Refl{}

