use Base/Bool/ as B/

// Conditional expression.
// - 1st: The type of the result.
// - 2nd: The boolean condition to evaluate.
// - 3rd: The value to return if the condition is true.
// - 4th: The value to return if the condition is false.
// = Either 3rd or 4th, depending on the condition.
B/if : âˆ€(A: *) B/Bool -> A -> A -> A
| A #True  t f = t
| A #False t f = f

//TEST//

use Bool/ as B/
use Equal/ as E/
use Nat/ as N/

T0 
: (E/Equal B/Bool (B/if B/Bool #True{} #True{} #False{} ) (#True{}))
= #Refl{}

T1 
: (E/Equal B/Bool (B/if B/Bool #False{} #True{} #False{} ) (#False{}))
= #Refl{}

T2
: (E/Equal N/Nat (B/if N/Nat #False{} #Succ{#Zero{}} #Zero{} ) (#Zero{}))
= #Refl{}

